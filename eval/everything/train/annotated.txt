====
# log/116890
U: thanks almond
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/69494
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/111416
U: hi there
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/123243
U: thanks
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/120370
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/18761
U: good afternoon
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/110691
U: hey ada
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/20872
U: thank you!
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/2253
U: never mind
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/825
U: goodbye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/8465
U: good night
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/18480
U: good evening
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/58552
U: goodnight
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/9708
U: reset
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5e8ef3f5446ef9a3ceb9a9d5d0cbf9c6
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/b2eb3422447a53d285645a0d43f11862
U: hi
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/011c3e9fa75b2d1dbaa7329d5872da3d
U: Thank you, I like that music.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a6bdb647534ed0a5a29f997c49d4d598
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6348bd611b59e53055b947a050457268
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/158327
U: hello, almond
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# online/359894
U: notify me of mail once every 2 ms
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: timer(interval=2ms) => @com.gmail.inbox();
====
# recording/4d7d4033eff156190f76d63cc4fed839
U: tell a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="9hyAsrzAItc"^^com.icanhazdadjoke:id, text="Where’s the bin? Dad: I haven’t been anywhere!" }
C: ]];
A: Where’s the bin? Dad: I haven’t been anywhere!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: another one
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="9hyAsrzAItc"^^com.icanhazdadjoke:id, text="Where’s the bin? Dad: I haven’t been anywhere!" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="HtcNuHJBQCd"^^com.icanhazdadjoke:id, text="How many kids with ADD does it take to change a lightbulb? Let's go ride bikes!" }
C: ]];
A: How many kids with ADD does it take to change a lightbulb? Let's go ride bikes!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="9hyAsrzAItc"^^com.icanhazdadjoke:id, text="Where’s the bin? Dad: I haven’t been anywhere!" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="HtcNuHJBQCd"^^com.icanhazdadjoke:id, text="How many kids with ADD does it take to change a lightbulb? Let's go ride bikes!" }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=16C, wind_speed=3.6mps, humidity=35, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: The current weather in Redwood City, California is sunny. The temperature is 60.8 F and the humidity is 35 %.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: how old are you
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_age);
====
# recording/eff39ac4ab8dd4a34704bc4fd1e33b37
U: can you tell me a joke?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Sn39Elb2LBd"^^com.icanhazdadjoke:id, text="What is this movie about? It is about 2 hours long." }
C: ]];
A: What is this movie about? It is about 2 hours long.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: another joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Sn39Elb2LBd"^^com.icanhazdadjoke:id, text="What is this movie about? It is about 2 hours long." }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="vkV0L6wcFlb"^^com.icanhazdadjoke:id, text="Did you hear about the runner who was criticized? He just took it in stride" }
C: ]];
A: Did you hear about the runner who was criticized? He just took it in stride.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: ha ha
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool);
====
# recording/f9c6c90344e6681fbb6f0e17fb8a9045
U: show me restaurants around berkeley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("berkeley");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California")
C: #[results=[
C:   { id="uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/S-5Nn8BJufkVNKJ281D6FQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cheese-board-pizza-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza")], price=enum cheap, rating=4.5, review_count=5367, geo=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709"), phone="+15105493183"^^tt:phone_number },
C:   { id="Q4o6ySw2V6r0UbK-aCAfng"^^com.yelp:restaurant("Angeline's Louisiana Kitchen"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/7JmU5f54Ga5mGEdmLwKt2A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/angelines-louisiana-kitchen-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "southern"^^com.yelp:restaurant_cuisine("Southern"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4, review_count=4318, geo=new Location(37.868282, -122.267555, "2261 Shattuck Ave, Berkeley, CA 94704"), phone="+15105486900"^^tt:phone_number },
C:   { id="2u4DSD6F8RyFXp-Crhj8OA"^^com.yelp:restaurant("Cinnaholic"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/ztLLRhCIvdIWS8j3WujXPw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cinnaholic-berkeley-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan")], price=enum cheap, rating=4.5, review_count=1686, geo=new Location(37.870305, -122.266062498093, "2132 Oxford St, Berkeley, CA 94704"), phone="+15106478684"^^tt:phone_number },
C:   { id="KoZtPdlNO2jMJ7Zc7I9JVg"^^com.yelp:restaurant("Jupiter"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/Tt3T3_pk5u0i6iDJjt4UIQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/jupiter-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "chicken_wings"^^com.yelp:restaurant_cuisine("Chicken Wings")], price=enum moderate, rating=4, review_count=3184, geo=new Location(37.869817, -122.267597, "2181 Shattuck Ave, Berkeley, CA 94704"), phone="+15108438277"^^tt:phone_number },
C:   { id="dmZS7KKxE8GHfIHzsenqUQ"^^com.yelp:restaurant("La Note"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/JALkbjMGELKBg8l3dIHqQg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-note-berkeley-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=3668, geo=new Location(37.8662142064674, -122.267341609173, "2377 Shattuck Ave, Berkeley, CA 94704"), phone="+15108431525"^^tt:phone_number },
C:   { id="Se9nvLiXHWI5ltMSo8klCw"^^com.yelp:restaurant("The Butchers Son"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/BjmhM0KqCJB_NwyAQxavAw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/the-butchers-son-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["salad"^^com.yelp:restaurant_cuisine("Salad"), "tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)")], price=enum moderate, rating=4, review_count=1345, geo=new Location(37.8715428393541, -122.271646200946, "1954 University Ave, Berkeley, CA 94704"), phone="+15109840818"^^tt:phone_number },
C:   { id="cMyf8e6frO9PIutPvXpjow"^^com.yelp:restaurant("Chez Panisse"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/LDM_1qIyYMuI1Z9jgWSGrg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/chez-panisse-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "french"^^com.yelp:restaurant_cuisine("French")], price=enum luxury, rating=4, review_count=2845, geo=new Location(37.879664, -122.26894, "1517 Shattuck Ave, Berkeley, CA 94709"), phone="+15105485525"^^tt:phone_number },
C:   { id="sKnjZ4bb-0AWxWqJv7cHOw"^^com.yelp:restaurant("Grégoire"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/zVNybiotkBeVGWFjSNFnWw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/gregoire-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=2277, geo=new Location(37.8785970706384, -122.268645902327, "2109 Cedar St, Berkeley, CA 94709"), phone="+15108831893"^^tt:phone_number },
C:   { id="oqyeLUSC2Z3Aczzh_4-4Yw"^^com.yelp:restaurant("Berkeley Social Club"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/31M_26DVjqn7EWndAwmVeQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/berkeley-social-club-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "korean"^^com.yelp:restaurant_cuisine("Korean")], price=enum moderate, rating=4, review_count=1333, geo=new Location(37.8718158, -122.2696171, "2050 University Ave, Berkeley, CA 94704"), phone="+15109005858"^^tt:phone_number },
C:   { id="uBuIZ8Pdk9HegYSAU0EsKA"^^com.yelp:restaurant("Great China"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/QpXekbyL5oYjoC-XWdgzxQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/great-china-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4, review_count=2186, geo=new Location(37.8676818865786, -122.26615783488, "2190 Bancroft Way, Berkeley, CA 94704"), phone="+15108437996"^^tt:phone_number }
C: ]]
C: #[count=50];
A: I see Cheese Board Pizza. It is a cheap restaurant near 1512 Shattuck Ave, Berkeley, CA 94709.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what is the address again?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [geo] of @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California") && id == "uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California")
C: #[results=[
C:   { id="uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/S-5Nn8BJufkVNKJ281D6FQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cheese-board-pizza-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza")], price=enum cheap, rating=4.5, review_count=5367, geo=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709"), phone="+15105493183"^^tt:phone_number },
C:   { id="Q4o6ySw2V6r0UbK-aCAfng"^^com.yelp:restaurant("Angeline's Louisiana Kitchen"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/7JmU5f54Ga5mGEdmLwKt2A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/angelines-louisiana-kitchen-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "southern"^^com.yelp:restaurant_cuisine("Southern"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4, review_count=4318, geo=new Location(37.868282, -122.267555, "2261 Shattuck Ave, Berkeley, CA 94704"), phone="+15105486900"^^tt:phone_number },
C:   { id="2u4DSD6F8RyFXp-Crhj8OA"^^com.yelp:restaurant("Cinnaholic"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/ztLLRhCIvdIWS8j3WujXPw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cinnaholic-berkeley-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan")], price=enum cheap, rating=4.5, review_count=1686, geo=new Location(37.870305, -122.266062498093, "2132 Oxford St, Berkeley, CA 94704"), phone="+15106478684"^^tt:phone_number },
C:   { id="KoZtPdlNO2jMJ7Zc7I9JVg"^^com.yelp:restaurant("Jupiter"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/Tt3T3_pk5u0i6iDJjt4UIQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/jupiter-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "chicken_wings"^^com.yelp:restaurant_cuisine("Chicken Wings")], price=enum moderate, rating=4, review_count=3184, geo=new Location(37.869817, -122.267597, "2181 Shattuck Ave, Berkeley, CA 94704"), phone="+15108438277"^^tt:phone_number },
C:   { id="dmZS7KKxE8GHfIHzsenqUQ"^^com.yelp:restaurant("La Note"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/JALkbjMGELKBg8l3dIHqQg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-note-berkeley-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=3668, geo=new Location(37.8662142064674, -122.267341609173, "2377 Shattuck Ave, Berkeley, CA 94704"), phone="+15108431525"^^tt:phone_number },
C:   { id="Se9nvLiXHWI5ltMSo8klCw"^^com.yelp:restaurant("The Butchers Son"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/BjmhM0KqCJB_NwyAQxavAw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/the-butchers-son-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["salad"^^com.yelp:restaurant_cuisine("Salad"), "tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)")], price=enum moderate, rating=4, review_count=1345, geo=new Location(37.8715428393541, -122.271646200946, "1954 University Ave, Berkeley, CA 94704"), phone="+15109840818"^^tt:phone_number },
C:   { id="cMyf8e6frO9PIutPvXpjow"^^com.yelp:restaurant("Chez Panisse"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/LDM_1qIyYMuI1Z9jgWSGrg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/chez-panisse-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "french"^^com.yelp:restaurant_cuisine("French")], price=enum luxury, rating=4, review_count=2845, geo=new Location(37.879664, -122.26894, "1517 Shattuck Ave, Berkeley, CA 94709"), phone="+15105485525"^^tt:phone_number },
C:   { id="sKnjZ4bb-0AWxWqJv7cHOw"^^com.yelp:restaurant("Grégoire"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/zVNybiotkBeVGWFjSNFnWw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/gregoire-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=2277, geo=new Location(37.8785970706384, -122.268645902327, "2109 Cedar St, Berkeley, CA 94709"), phone="+15108831893"^^tt:phone_number },
C:   { id="oqyeLUSC2Z3Aczzh_4-4Yw"^^com.yelp:restaurant("Berkeley Social Club"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/31M_26DVjqn7EWndAwmVeQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/berkeley-social-club-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "korean"^^com.yelp:restaurant_cuisine("Korean")], price=enum moderate, rating=4, review_count=1333, geo=new Location(37.8718158, -122.2696171, "2050 University Ave, Berkeley, CA 94704"), phone="+15109005858"^^tt:phone_number },
C:   { id="uBuIZ8Pdk9HegYSAU0EsKA"^^com.yelp:restaurant("Great China"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/QpXekbyL5oYjoC-XWdgzxQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/great-china-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4, review_count=2186, geo=new Location(37.8676818865786, -122.26615783488, "2190 Bancroft Way, Berkeley, CA 94704"), phone="+15108437996"^^tt:phone_number }
C: ]]
C: #[count=50];
C: [geo] of @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California") && id == "uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza")
C: #[results=[
C:   { id="uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza"), geo=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709") }
C: ]];
A: Cheese Board Pizza is a restaurant near 1512 Shattuck Ave, Berkeley, CA 94709.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what is the weather like there?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709"));
====
# recording/ed3ace50937bcbe1b0e7d09427a1b375
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center"))
C: #[results=[
C:   { temperature=11.1C, wind_speed=3.6mps, humidity=50.8, cloudiness=39.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center") }
C: ]];
A: It is cloudy today in Cantor Arts Center and the temperature is 52 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: change my location
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center"))
C: #[results=[
C:   { temperature=11.1C, wind_speed=3.6mps, humidity=50.8, cloudiness=39.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(type=enum current);
A: What location do you want?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(location);
AT: @org.thingpedia.builtin.thingengine.builtin.set_location(type=enum current);
U: Stanford
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("stanford"));
====
# recording/7bc283be6848a55798d4e5ad70b2d202
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto"))
C: #[results=[
C:   { temperature=11C, wind_speed=3.6mps, humidity=50.8, cloudiness=39.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto") }
C: ]];
A: It is cloudy today in Stanford, Palo Alto and the temperature is 51.8 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: where am I?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
====
# online/55592327
U: notify me when the door opens and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592330
U: notify me when someone opens the door and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592331
U: notify me when someone opens the door while i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592610
U: alert me when somebody opens the door and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592613
U: update me when my door is opened and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592615
U: tell me when my door is opened and i am out of home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592686
U: if i am not at home and my door is open, alert me
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592697
U: tell me if i am not at home and someone opens the door
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592700
U: alert me if i am not at home and someone opens the door
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592702
U: update me if i am not at home and someone opens my door
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# log/54730
U: turn the light on when motion is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.motion.motion()) filter state == enum detecting => @org.thingpedia.iot.light-bulb.set_power(power=enum on);
====
# log/59476
U: if movement in room office, turn on light
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.motion(name="office").motion()) filter state == enum detecting => @org.thingpedia.iot.light-bulb(name="room office").set_power(power=enum on);
====
# log/76789
U: when i arrive home turn on the lights
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.builtin.thingengine.builtin.get_gps()) filter location == $location.home => @org.thingpedia.iot.light-bulb.set_power(power=enum on);
====
# recording/6b62ca72ae439e9508a62a66f95e9d2c
U: get a cat
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.thecatapi.cat();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.thecatapi.cat()
C: #[results=[
C:   { id="AdsrndOAi"^^com.thecatapi:cat, picture_url="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/AdsrndOAi.jpg"^^tt:picture, link="http://thecatapi.com/?id=AdsrndOAi"^^tt:url }
C: ]];
A: Here is a cat picture.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play hello
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hello" => @org.thingpedia.media-player.play(playable=id);
====
# recording/15391f435601a0f7743b69a61beaae2b
U: what's the definition of covid
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @info.owlbot.get(word="covid");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
A: Sorry, Request failed with status code 404.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: where am i now
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error="Sorry, I cannot access your location in this version of Almond."];
A: Sorry, Sorry, I cannot access your location in this version of Almond.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: can you speak
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_voice_output(status=enum on);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error="Sorry, I cannot access your location in this version of Almond."];
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_output(status=enum on)
C: #[results=[]]
C: #[error=enum unsupported];
A: Sorry, voice output is not supported on this platform.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: can you listen to me
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error="Sorry, I cannot access your location in this version of Almond."];
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_output(status=enum on)
C: #[results=[]]
C: #[error=enum unsupported];
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on)
C: #[results=[]]
C: #[error=enum unsupported];
A: Sorry, voice input is not supported on this platform.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: can you help me with home assistant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum troubleshooting_home_assistant);
====
# recording/777edda821529592a0899ffdeadf56eb
U: show me a quote
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.forismatic.quotes.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.forismatic.quotes.get()
C: #[results=[
C:   { author="Plutarch ", text="What we achieve inwardly will change outer reality.  ", link="http://forismatic.com/en/67cf5ed025/"^^tt:url }
C: ]];
A: Plutarch wrote: What we achieve inwardly will change outer reality.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: another one?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.forismatic.quotes.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.forismatic.quotes.get()
C: #[results=[
C:   { author="Plutarch ", text="What we achieve inwardly will change outer reality.  ", link="http://forismatic.com/en/67cf5ed025/"^^tt:url }
C: ]];
C: @com.forismatic.quotes.get()
C: #[results=[
C:   { author="Agatha Christie", text="Good advice is always certain to be ignored, but that's no reason not to give it.", link="http://forismatic.com/en/e4d22ed81c/"^^tt:url }
C: ]];
A: Agatha Christie wrote: Good advice is always certain to be ignored, but that's no reason not to give it.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: turn on the lights
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.iot.light-bulb.set_power(power=enum on);
====
# recording/a0e39845561253ced0501ba1cda02157
U: get xkcd 2431
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.xkcd.comic() filter id == 2431;
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.xkcd.comic() filter id == 2431
C: #[results=[
C:   { id=2431, title="Leap Year 2021", alt_text="I've lived in the present for my whole life and I'm not about to move now.", picture_url="https://imgs.xkcd.com/comics/leap_year_2021.png"^^tt:picture, link="https://xkcd.com/2431"^^tt:url, release_date=new Date("2021-03-01T00:00:00.000Z") }
C: ]];
A: 2,431 is an xkcd comic from 1 Monday titled Leap Year 2021.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: tell me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.xkcd.comic() filter id == 2431
C: #[results=[
C:   { id=2431, title="Leap Year 2021", alt_text="I've lived in the present for my whole life and I'm not about to move now.", picture_url="https://imgs.xkcd.com/comics/leap_year_2021.png"^^tt:picture, link="https://xkcd.com/2431"^^tt:url, release_date=new Date("2021-03-01T00:00:00.000Z") }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4259748921271658525"^^com.smartnews:article, title="CDC Says Vaccinated People Can Visit Each Other Mask Free", date=new Date("2021-03-08T16:11:25.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/cdc-loosens-rules-for-vaccinated-people-but-discourages-travel" },
C:   { id="4259743488112853555"^^com.smartnews:article, title="Republican Sen. Roy Blunt says he won’t run for reelection in 2022", date=new Date("2021-03-08T15:50:42.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/gop-senator-blunt-says-he-won-t-seek-re-election-in-2022" },
C:   { id="4259179482146933923"^^com.smartnews:article, title="How To Get Someone To Stop Texting You Immediately With One Reply", date=new Date("2021-03-07T00:30:03.000Z"), source="YourTango", author="Christine Schoenwald", url="https://www.yourtango.com/2015276841/how-to-get-someone-to-stop-texting-you-with-one-reply" },
C:   { id="4259661098128510254"^^com.smartnews:article, title="FBI warns that extremists 'seek affiliation' with police to further their goals", date=new Date("2021-03-08T10:05:03.000Z"), source="ABC News", url="https://abcnews.go.com/US/white-supremacists-seek-affiliation-law-enforcement-goals-internal/story?id=76309051" },
C:   { id="4259724860520933142"^^com.smartnews:article, title="Dr. Fauci says putting one of these in your home can help stop the coronavirus", date=new Date("2021-03-08T14:00:09.000Z"), source="BGR", author="Yoni Heisler", url="https://bgr.com/2021/03/08/covid-update-fauci-hepa-filter-coronavirus-safety/" },
C:   { id="4259734433977865973"^^com.smartnews:article, title="Supreme Court rejects final Trump bid to nullify 2020 election results", date=new Date("2021-03-08T14:59:32.000Z"), source="The Hill", author="John Kruzel", url="https://thehill.com/regulation/court-battles/542082-supreme-court-rejects-final-trump-bid-to-nullify-2020-election" },
C:   { id="4259517849967531264"^^com.smartnews:article, title="Jeff Bezos’ ex-wife marries Seattle science teacher as Amazon boss says: ‘He is a great guy’", date=new Date("2021-03-08T00:40:55.000Z"), source="The Independent", author="Graeme Massie", url="https://www.independent.co.uk/news/world/americas/jeff-bezos-ex-wife-mackenzie-scott-b1813750.html" },
C:   { id="4258719275369368285"^^com.smartnews:article, title="Katy Perry and Orlando Bloom vacation in Hawaii with baby Daisy Dove", date=new Date("2021-03-05T19:16:05.000Z"), source="Page Six", author="Eileen Reslen", url="https://pagesix.com/2021/03/05/katy-perry-and-orlando-bloom-vacation-with-daisy-dove/" },
C:   { id="4259761133570760718"^^com.smartnews:article, title="Exclusive: EU preparing sanctions on Myanmar military businesses, documents show", date=new Date("2021-03-08T13:11:47.000Z"), source="Reuters", author="Gabriela Baczynska", url="https://www.reuters.com/article/us-myanmar-politics-eu-idUSKBN2B01D1" },
C:   { id="4259740943361514540"^^com.smartnews:article, title="Yellen says Biden COVID bill to fuel 'very strong' U.S. recovery", date=new Date("2021-03-08T14:57:29.000Z"), source="Reuters", author="David Lawder", url="https://www.reuters.com/article/us-usa-economy-yellen-idUSKBN2B01MJ" }
C: ]]
C: #[count=32];
A: The latest news is CDC Says Vaccinated People Can Visit Each Other Mask Free. It is a new articles from Bloomberg published today at 8:11:25 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the definition of coronavirus
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @info.owlbot.get(word="coronavirus");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.xkcd.comic() filter id == 2431
C: #[results=[
C:   { id=2431, title="Leap Year 2021", alt_text="I've lived in the present for my whole life and I'm not about to move now.", picture_url="https://imgs.xkcd.com/comics/leap_year_2021.png"^^tt:picture, link="https://xkcd.com/2431"^^tt:url, release_date=new Date("2021-03-01T00:00:00.000Z") }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4259748921271658525"^^com.smartnews:article, title="CDC Says Vaccinated People Can Visit Each Other Mask Free", date=new Date("2021-03-08T16:11:25.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/cdc-loosens-rules-for-vaccinated-people-but-discourages-travel" },
C:   { id="4259743488112853555"^^com.smartnews:article, title="Republican Sen. Roy Blunt says he won’t run for reelection in 2022", date=new Date("2021-03-08T15:50:42.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/gop-senator-blunt-says-he-won-t-seek-re-election-in-2022" },
C:   { id="4259179482146933923"^^com.smartnews:article, title="How To Get Someone To Stop Texting You Immediately With One Reply", date=new Date("2021-03-07T00:30:03.000Z"), source="YourTango", author="Christine Schoenwald", url="https://www.yourtango.com/2015276841/how-to-get-someone-to-stop-texting-you-with-one-reply" },
C:   { id="4259661098128510254"^^com.smartnews:article, title="FBI warns that extremists 'seek affiliation' with police to further their goals", date=new Date("2021-03-08T10:05:03.000Z"), source="ABC News", url="https://abcnews.go.com/US/white-supremacists-seek-affiliation-law-enforcement-goals-internal/story?id=76309051" },
C:   { id="4259724860520933142"^^com.smartnews:article, title="Dr. Fauci says putting one of these in your home can help stop the coronavirus", date=new Date("2021-03-08T14:00:09.000Z"), source="BGR", author="Yoni Heisler", url="https://bgr.com/2021/03/08/covid-update-fauci-hepa-filter-coronavirus-safety/" },
C:   { id="4259734433977865973"^^com.smartnews:article, title="Supreme Court rejects final Trump bid to nullify 2020 election results", date=new Date("2021-03-08T14:59:32.000Z"), source="The Hill", author="John Kruzel", url="https://thehill.com/regulation/court-battles/542082-supreme-court-rejects-final-trump-bid-to-nullify-2020-election" },
C:   { id="4259517849967531264"^^com.smartnews:article, title="Jeff Bezos’ ex-wife marries Seattle science teacher as Amazon boss says: ‘He is a great guy’", date=new Date("2021-03-08T00:40:55.000Z"), source="The Independent", author="Graeme Massie", url="https://www.independent.co.uk/news/world/americas/jeff-bezos-ex-wife-mackenzie-scott-b1813750.html" },
C:   { id="4258719275369368285"^^com.smartnews:article, title="Katy Perry and Orlando Bloom vacation in Hawaii with baby Daisy Dove", date=new Date("2021-03-05T19:16:05.000Z"), source="Page Six", author="Eileen Reslen", url="https://pagesix.com/2021/03/05/katy-perry-and-orlando-bloom-vacation-with-daisy-dove/" },
C:   { id="4259761133570760718"^^com.smartnews:article, title="Exclusive: EU preparing sanctions on Myanmar military businesses, documents show", date=new Date("2021-03-08T13:11:47.000Z"), source="Reuters", author="Gabriela Baczynska", url="https://www.reuters.com/article/us-myanmar-politics-eu-idUSKBN2B01D1" },
C:   { id="4259740943361514540"^^com.smartnews:article, title="Yellen says Biden COVID bill to fuel 'very strong' U.S. recovery", date=new Date("2021-03-08T14:57:29.000Z"), source="Reuters", author="David Lawder", url="https://www.reuters.com/article/us-usa-economy-yellen-idUSKBN2B01MJ" }
C: ]]
C: #[count=32];
C: @info.owlbot.get(word="coronavirus")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
A: Sorry, Request failed with status code 404.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what will be the weather tomorrow
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
====
# online/131451
U: get my security camera then play music on my speaker
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.iot.security-camera.current_event();
UT: @org.thingpedia.iot.speaker.play_music();
====
# online/130233
U: get xkcd and post on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.xkcd.get_comic();
UT: @com.twitter.post(status=$?);
====
# online/135922
U: if there is a file in "str:QUOTED_STRING::0:" in my dropbox which is not a folder and was last modified on 1/2/2018 and is smaller than 13 kbs then post a picture on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.dropbox.list_folder(folder_name="str:QUOTED_STRING::0:") filter file_size <= 13KB && is_folder == false && modified_time == new Date("2018-01-02T08:00:00.000Z");
UT: @com.twitter.post_picture(caption=$?, picture_url=$?);
====
# online/120499
U: if i receive a tweet with hashtag bdaycelebrationscontinu then send a message on slack
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.twitter.home_timeline() filter contains(hashtags, "bdaycelebrationscontinu"^^tt:hashtag)) => @com.slack.send();
====
# online/120586
U: send me wall street journal technology on gmail
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.wsj.get(section=enum technology)) => @com.gmail.send_email(message=$result);
====
# online/121042
U: tweet wall street journal headlines
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.wsj.get(section=enum opinions)) => @com.twitter.post(status=$result);
====
# online/121060
U: post my instagram pictures on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/121071
U: post my new instagram pictures on tumblr
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.tumblr.blog.post_picture(picture_url=picture_url);
====
# online/121082
U: post on tumblr "str:QUOTED_STRING::0:" if the temperature is more than 13 f
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.temperature.temperature()) filter value >= 13F => @com.tumblr.blog.post_text(title="str:QUOTED_STRING::0:");
====
# online/121084
U: post on tumblr if the temperature is more than 13 f
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.temperature.temperature()) filter value >= 13F => @com.tumblr.blog.post_text();
====
# online/121103
U: if someone tweets with hashtag foreverjuntas then post it on facebook
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.twitter.home_timeline() filter contains(hashtags, "foreverjuntas"^^tt:hashtag)) => @com.facebook.post(status=$result);
====
# online/121550
U: post my ig pictures on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/121552
U: ig pictures to facebook
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.facebook.post_picture(picture_url=picture_url);
====
# online/123118
U: translate new wall street journal technology posts
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.wsj.get(section=enum technology)) => @com.yandex.translate.translate(text=$result);
====
# online/127890
U: get the washington post and translate it to xhosa
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.washingtonpost.get_article()) => @com.yandex.translate.translate(target_language=null^^tt:iso_lang_code("xhosa"), text=$result);
====
# online/131798
U: if someone commits to github and the message contains "str:QUOTED_STRING::0:" then play "str:QUOTED_STRING::1:" from youtube
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.github.get_commit() filter message =~ "str:QUOTED_STRING::0:") => @com.youtube.search_videos(query="str:QUOTED_STRING::1:") => @org.thingpedia.iot.tv.play_url(url=video_url);
====
# online/141671
U: get the washington post and translate it to str:ENTITY_tt:iso_lang_code::0:
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.washingtonpost.get_article()) => @com.yandex.translate.translate(target_language="str:ENTITY_tt:iso_lang_code::0:"^^tt:iso_lang_code, text=$result);
====
# online/359917
U: if i receive a gmail and its title has "str:QUOTED_STRING::0:" in it, send the content to twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(email_id of @com.gmail.inbox() filter subject =~ "str:QUOTED_STRING::0:") => @com.twitter.post(status=$result);
====
# online/359919
U: if i send a new picture to instagram, send this new picture to facebook
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.facebook.post_picture(picture_url=picture_url);
====
# online/1448703
U: get my calendar events when i move to palo alto
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.builtin.thingengine.builtin.get_gps()) filter location == new Location("palo alto") => @org.thingpedia.icalendar.list_events();
====
# online/1448704
U: get my calendar events when i move to
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.builtin.thingengine.builtin.get_gps()) filter location == new Location(2, 2) => @org.thingpedia.icalendar.list_events();
====
# online/1520128
U: tweet my instagram pictures
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/1684068
U: share your instagram pics as native twitter photos
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(caption=caption, picture_url=picture_url);
====
# online/1684094
U: send new york times breaking news to str:EMAIL_ADDRESS::0:
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.nytimes.get_front_page()) => @com.gmail.send_email(message=$result, subject=title, to="str:EMAIL_ADDRESS::0:"^^tt:email_address);
====
# online/53256259
U: when i upload a new instagram picture with hashtag 45likes, post it to twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures() filter contains(hashtags, "45likes"^^tt:hashtag)) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/55592357
U: open the window if smoke is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.air.state()) filter state == enum smoke => @org.thingpedia.iot.cover.set_openclose(state=enum open);
====
# online/55592384
U: close my shutter when the temperature is above 13 degrees
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.weather.current()) filter temperature >= 13C => @org.thingpedia.iot.cover.set_openclose(state=enum close);
====
# online/55592495
U: close my damper when the temperature is below 13 degrees
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.weather.current()) filter temperature <= 13C => @org.thingpedia.iot.cover.set_openclose(state=enum close);
====
# online/55592641
U: open my windows when smoke is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.air.state()) filter state == enum smoke => @org.thingpedia.iot.cover.set_openclose(state=enum open);
====
# online/55592649
U: open my living room window if smoke is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.air.state()) filter state == enum smoke => @org.thingpedia.iot.cover(name="living room").set_openclose(state=enum open);
====
# online/57061574
U: turn off the vacuum when i enter the room
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.occupancy.occupancy()) filter state == enum detecting => @org.thingpedia.iot.vacuum.set_power(power=enum off);
====
# online/57061594
U: send an alert when i leave home and the fan is on
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.fan.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum on;
====
# online/62110233
U: auto translate all new washington post articles to italian
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.washingtonpost.get_article()) => @com.yandex.translate.translate(target_language=null^^tt:iso_lang_code("italian"), text=title);
====
# log/54331
U: close the shades when the temperature is above 13 degrees
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.weather.current()) filter temperature >= 13defaultTemperature => @org.thingpedia.iot.cover.set_openclose(state=enum close);
====
# log/108641
U: message me on slack when a new article appears on the new york times front page
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.nytimes.get_front_page()) => @com.slack.send();
====
# log/158336
U: when the temperature changes turn on the air con
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.temperature.temperature()) => @org.thingpedia.iot.climate.set_hvac_mode(mode=enum cool);
====
# recording/f106519ffba8bc870e58396d5c99e032
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="6hqHJmyPmyd"^^com.icanhazdadjoke:id, text="What kind of music do mummy's like? Rap" }
C: ]];
A: What kind of music do mummy's like? Rap.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: post it on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.twitter.post(status="What kind of music do mummy's like? Rap");
====
# recording/cb7afd794d37c88bc83f658acb47808e
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="4wHB51ws4Ed"^^com.icanhazdadjoke:id, text="Last night me and my girlfriend watched three DVDs back to back. Luckily I was the one facing the TV." }
C: ]];
C: [artists] of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hey jude"
C: #[results=[
C:   { id="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2015"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:3m7V717IKZqZLW5qUIOxdD"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:1eT2CjXwFXNx6oY5ydvzKU"^^org.thingpedia.media-source:playable("Hey Jude"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:album:7BVMsDI63cIp4HzLmUYAKv"^^org.thingpedia.media-source:playable("Hey Jude: Classic Soft Rock Instrumentals on Piano"), artists=["spotify:artist:0cylxW7HGdK9xMdubw2oYW"^^org.thingpedia.media-source:artist("The O'Neill Brothers Group")] },
C:   { id="spotify:album:3X18KtOFTJO0zOWVXddfAh"^^org.thingpedia.media-source:playable("Hey Jude (feat. Kina Grannis)"), artists=["spotify:artist:470WlqN9HSRDGNaMufeHHF"^^org.thingpedia.media-source:artist("Imaginary Future")] }
C: ]];
C: sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQ3-6GAEq_qzKJ9u7LKycQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/vino-santo-bistro-redwood-city-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=393, geo=new Location(37.4868316650391, -122.227058410645, "2030 Broadway St, Redwood City, CA 94063"), phone="+16507800793"^^tt:phone_number, distance=56.460896274938605m }
C: ]];
C: [rating] of sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), rating=4 }
C: ]];
C: @com.bing.web_search(query="coronavirus")
C: #[results=[
C:   { query="coronavirus", title="Coronavirus Disease 2019 (COVID-19) | CDC", description="Coronavirus (COVID-19) Home Page. Links with this icon indicate that you are leaving the CDC website.. The Centers for Disease Control and Prevention (CDC) cannot attest to the accuracy of a non-federal website.", link="https://www.cdc.gov/coronavirus/2019-ncov/index.html"^^tt:url },
C:   { query="coronavirus", title="What Is Coronavirus? | Johns Hopkins Medicine", description="Coronaviruses are a type of virus. There are many different kinds, and some cause disease. A coronavirus identified in 2019, SARS-CoV-2, has caused a pandemic of respiratory illness, called COVID-19. What You Need to Know", link="https://www.hopkinsmedicine.org/health/conditions-and-diseases/coronavirus"^^tt:url },
C:   { query="coronavirus", title="Symptoms of Coronavirus | CDC", description="COVID-19 is caused by infection with a new coronavirus (called SARS-CoV-2), and flu is caused by infection with influenza viruses. COVID-19 seems to spread more easily than flu and causes more serious illnesses in some people. It can also take longer before people show symptoms and people can be contagious for longer. More information about ...", link="https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html"^^tt:url },
C:   { query="coronavirus", title="COVID Live Update: 146,522,088 Cases and 3,103,366 Deaths ...", description="Live statistics and coronavirus news tracking the number of confirmed cases, recovered patients, tests, and death toll due to the COVID-19 coronavirus from Wuhan, China. Coronavirus counter with new cases, deaths, and number of tests per 1 Million population. Historical data and info. Daily charts, graphs, news and updates", link="https://www.worldometers.info/coronavirus/"^^tt:url },
C:   { query="coronavirus", title="Coronavirus (COVID-19) live map tracker from Microsoft Bing", description="Track COVID-19 local and global coronavirus cases with active, recoveries and death rate on the map, with daily news and video.", link="https://bing.com/covid"^^tt:url }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="xHQucUvszd"^^com.icanhazdadjoke:id, text="To the guy who invented zero... thanks for nothing." }
C: ]];
A: To the guy who invented zero... Thanks for nothing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: throw a dice
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_random_between();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="4wHB51ws4Ed"^^com.icanhazdadjoke:id, text="Last night me and my girlfriend watched three DVDs back to back. Luckily I was the one facing the TV." }
C: ]];
C: [artists] of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hey jude"
C: #[results=[
C:   { id="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2015"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:3m7V717IKZqZLW5qUIOxdD"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:1eT2CjXwFXNx6oY5ydvzKU"^^org.thingpedia.media-source:playable("Hey Jude"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:album:7BVMsDI63cIp4HzLmUYAKv"^^org.thingpedia.media-source:playable("Hey Jude: Classic Soft Rock Instrumentals on Piano"), artists=["spotify:artist:0cylxW7HGdK9xMdubw2oYW"^^org.thingpedia.media-source:artist("The O'Neill Brothers Group")] },
C:   { id="spotify:album:3X18KtOFTJO0zOWVXddfAh"^^org.thingpedia.media-source:playable("Hey Jude (feat. Kina Grannis)"), artists=["spotify:artist:470WlqN9HSRDGNaMufeHHF"^^org.thingpedia.media-source:artist("Imaginary Future")] }
C: ]];
C: sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQ3-6GAEq_qzKJ9u7LKycQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/vino-santo-bistro-redwood-city-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=393, geo=new Location(37.4868316650391, -122.227058410645, "2030 Broadway St, Redwood City, CA 94063"), phone="+16507800793"^^tt:phone_number, distance=56.460896274938605m }
C: ]];
C: [rating] of sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), rating=4 }
C: ]];
C: @com.bing.web_search(query="coronavirus")
C: #[results=[
C:   { query="coronavirus", title="Coronavirus Disease 2019 (COVID-19) | CDC", description="Coronavirus (COVID-19) Home Page. Links with this icon indicate that you are leaving the CDC website.. The Centers for Disease Control and Prevention (CDC) cannot attest to the accuracy of a non-federal website.", link="https://www.cdc.gov/coronavirus/2019-ncov/index.html"^^tt:url },
C:   { query="coronavirus", title="What Is Coronavirus? | Johns Hopkins Medicine", description="Coronaviruses are a type of virus. There are many different kinds, and some cause disease. A coronavirus identified in 2019, SARS-CoV-2, has caused a pandemic of respiratory illness, called COVID-19. What You Need to Know", link="https://www.hopkinsmedicine.org/health/conditions-and-diseases/coronavirus"^^tt:url },
C:   { query="coronavirus", title="Symptoms of Coronavirus | CDC", description="COVID-19 is caused by infection with a new coronavirus (called SARS-CoV-2), and flu is caused by infection with influenza viruses. COVID-19 seems to spread more easily than flu and causes more serious illnesses in some people. It can also take longer before people show symptoms and people can be contagious for longer. More information about ...", link="https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html"^^tt:url },
C:   { query="coronavirus", title="COVID Live Update: 146,522,088 Cases and 3,103,366 Deaths ...", description="Live statistics and coronavirus news tracking the number of confirmed cases, recovered patients, tests, and death toll due to the COVID-19 coronavirus from Wuhan, China. Coronavirus counter with new cases, deaths, and number of tests per 1 Million population. Historical data and info. Daily charts, graphs, news and updates", link="https://www.worldometers.info/coronavirus/"^^tt:url },
C:   { query="coronavirus", title="Coronavirus (COVID-19) live map tracker from Microsoft Bing", description="Track COVID-19 local and global coronavirus cases with active, recoveries and death rate on the map, with daily news and video.", link="https://bing.com/covid"^^tt:url }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="xHQucUvszd"^^com.icanhazdadjoke:id, text="To the guy who invented zero... thanks for nothing." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between()
C: #[results=[
C:   { random=3 }
C: ]];
A: 3.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: can you play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/47aa1f36f43d8342f52db10f9ce50b82
U: cool, thanks
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6dadb186b7e4adb5fb9ea3546d7e835c
U: hi
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
A: Hi, how can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/d1e3878b6fd3c673a87d3da6ccb09566
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/773cf5d6ab5788e9632e73b809482650
U: hoy
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/9f6a2e548f079d04640971f744eb2570
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/ff640ca5fb879fcc0630d0ea25544c0a
U: play wolfgang amadeus mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang amadeus mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: previous song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous();
====
# recording/5bc15a4a2e8823d083946d9c4de231c6
U: play sigur ros
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("sigur ros")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6UUrUCIZtQeOf8tC0WuzRy"^^org.thingpedia.media-source:artist("Sigur Rós")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0yQPpUq5BJyqah5m2Q5Stt"^^org.thingpedia.media-source:playable("Hoppípolla"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07eGxuz8bL6QMsRqEe1Adu"^^org.thingpedia.media-source:playable("Svefn-g-englar"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:55gISxV37mffOW2DbSskT3"^^org.thingpedia.media-source:playable("Starálfur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1QUiA9aecDOOnf32A9ZrtW"^^org.thingpedia.media-source:playable("Untitled #3 - Samskeyti"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3OAf2iksV6MRLzqtUglTDq"^^org.thingpedia.media-source:playable("Sæglópur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2zkZGzzWOzGwi1rtWv7mhZ"^^org.thingpedia.media-source:playable("Sigur 3 (Untitled)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0YTfMKGPhWhjS9wgzWvfaf"^^org.thingpedia.media-source:playable("Glósóli"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Rr3lN1BgJtrWNAp97wizI"^^org.thingpedia.media-source:playable("Varðeldur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0S9w3jx4cO9rSBcGwB16in"^^org.thingpedia.media-source:playable("Olsen olsen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3XNjxPoUphJfUD5BShkYat"^^org.thingpedia.media-source:playable("Gobbledigook"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=49];
A: I played music by Sigur Rós on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add to playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6UUrUCIZtQeOf8tC0WuzRy"^^org.thingpedia.media-source:artist("Sigur Rós")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0yQPpUq5BJyqah5m2Q5Stt"^^org.thingpedia.media-source:playable("Hoppípolla"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07eGxuz8bL6QMsRqEe1Adu"^^org.thingpedia.media-source:playable("Svefn-g-englar"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:55gISxV37mffOW2DbSskT3"^^org.thingpedia.media-source:playable("Starálfur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1QUiA9aecDOOnf32A9ZrtW"^^org.thingpedia.media-source:playable("Untitled #3 - Samskeyti"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3OAf2iksV6MRLzqtUglTDq"^^org.thingpedia.media-source:playable("Sæglópur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2zkZGzzWOzGwi1rtWv7mhZ"^^org.thingpedia.media-source:playable("Sigur 3 (Untitled)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0YTfMKGPhWhjS9wgzWvfaf"^^org.thingpedia.media-source:playable("Glósóli"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Rr3lN1BgJtrWNAp97wizI"^^org.thingpedia.media-source:playable("Varðeldur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0S9w3jx4cO9rSBcGwB16in"^^org.thingpedia.media-source:playable("Olsen olsen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3XNjxPoUphJfUD5BShkYat"^^org.thingpedia.media-source:playable("Gobbledigook"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=49];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: FLow
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="flow", song=id);
====
# recording/17424146a60653a9e24c06aa063b822c
U: set my location to new york
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("new york"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(40.7306458, -73.9866136, "New York City, New York"), type=enum current)
C: #[results=[]];
A: I set your current location for you to New York City, New York.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(40.7306458, -73.9866136, "New York City, New York"), type=enum current)
C: #[results=[]];
C: @org.thingpedia.weather.current(location=new Location(40.7306458, -73.9866136, "New York City, New York"))
C: #[results=[
C:   { temperature=25C, wind_speed=3.6mps, humidity=87, cloudiness=0.8, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(40.7306458, -73.9866136, "New York City, New York") }
C: ]];
A: It is sunny today in New York City, New York and the temperature is 77 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast for tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location(40.7306458, -73.9866136, "New York City, New York"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(40.7306458, -73.9866136, "New York City, New York"), type=enum current)
C: #[results=[]];
C: @org.thingpedia.weather.current(location=new Location(40.7306458, -73.9866136, "New York City, New York"))
C: #[results=[
C:   { temperature=25C, wind_speed=3.6mps, humidity=87, cloudiness=0.8, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(40.7306458, -73.9866136, "New York City, New York") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(40.7306458, -73.9866136, "New York City, New York"))
C: #[results=[
C:   { temperature=30.3C, wind_speed=3.2mps, humidity=69.9, cloudiness=29.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-07-16T21:00:00.000Z"), location=new Location(40.7306458, -73.9866136, "New York City, New York") }
C: ]];
A: It will be cloudy tomorrow at 2:00 PM in New York City, New York and the temperature will be 86.5 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what will the weather be next week?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(40.7306458, -73.9866136, "New York City, New York"));
====
# recording/9681704ae6cc8c1bed2b974db10a1617
U: play jump
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "jump" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "jump")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7N3PAbqfTjSEU1edb2tY8j"^^org.thingpedia.media-source:playable("Jump - 2015 Remaster"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "jump")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7N3PAbqfTjSEU1edb2tY8j"^^org.thingpedia.media-source:playable("Jump - 2015 Remaster"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Jump - 2015 Remaster on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play tony's playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "tony's playlist" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/66af0a9f06e492629278df5e75483c65
U: lol
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), geo=new Location(37.4565, -122.229, "Rite Aid, 340 Woodside Plaza, Redwood City, CA, 94061"), link="https://www.riteaid.com/pharmacy/covid-qualifier"^^tt:url, availability_rate=1, zip_code="94062" }
C: ]];
C: @org.thingpedia.covid-vaccine.mark_valid(appointment="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), validity=false)
C: #[results=[]];
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="mukesh:765866102:1624194464066"^^org.thingpedia.covid-vaccine:vaccine_appointment("PharmaCA, 871 Santa Cruz Ave, Menlo Park"), geo=new Location(37.4498999, -122.1856139, "PharmaCA, 871 Santa Cruz Ave, Menlo Park, 871 Santa Cruz Ave, Menlo Park, CA, 94025"), link="https://www.pharmacarx.com/pharmacy-locator/"^^tt:url, availability_rate=0, zip_code="94062" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mbpbapbhiyd"^^com.icanhazdadjoke:id, text="Did you hear about the bread factory burning down? They say the business is toast." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool)
C: #[results=[
C:   { reply="Cool!", question=enum positive_emotion_cool }
C: ]];
A: Cool!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what else can you do
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), geo=new Location(37.4565, -122.229, "Rite Aid, 340 Woodside Plaza, Redwood City, CA, 94061"), link="https://www.riteaid.com/pharmacy/covid-qualifier"^^tt:url, availability_rate=1, zip_code="94062" }
C: ]];
C: @org.thingpedia.covid-vaccine.mark_valid(appointment="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), validity=false)
C: #[results=[]];
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="mukesh:765866102:1624194464066"^^org.thingpedia.covid-vaccine:vaccine_appointment("PharmaCA, 871 Santa Cruz Ave, Menlo Park"), geo=new Location(37.4498999, -122.1856139, "PharmaCA, 871 Santa Cruz Ave, Menlo Park, 871 Santa Cruz Ave, Menlo Park, CA, 94025"), link="https://www.pharmacarx.com/pharmacy-locator/"^^tt:url, availability_rate=0, zip_code="94062" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mbpbapbhiyd"^^com.icanhazdadjoke:id, text="Did you hear about the bread factory burning down? They say the business is toast." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool)
C: #[results=[
C:   { reply="Cool!", question=enum positive_emotion_cool }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/d992333d201d1699664f5bedb2766811
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play the playlist classics
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classics" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classics")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: resume playback
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.resume();
====
# recording/b6151a92051749f93de5c01ffb5fd055
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/e6299acfdcf532ffb56e69283b3b25c6
U: How is it going?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Who are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where is almond?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
A: My creators are mostly at Stanford. I'm an open-source assistant in the cloud.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the weather in ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("iss"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
A: It is cloudy today in Nummi, Turku and the temperature is 70.7 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="iss");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
A: I found International Space Station | NASA.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is elon?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="elon");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
A: I found Elon University / Home.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is bezos?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="bezos");
====
# recording/42e165d09d78df19b10b96c8db1de5bd
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me ajoke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
A: Want to hear a chimney joke? Got stacks of em! First one's on the house.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/6fb1627331a6193db3d3f67b84b3acb2
U: Have a great evening
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: Bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6270a6a9cc4407d5392109a0552d28a6
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="BQnyImOCIBd"^^com.icanhazdadjoke:id, text="How do hens stay fit? They always egg-cercise!" }
C: ]];
A: How do hens stay fit? They always egg-cercise!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/385434ebca941a151090cd39632e803f
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(46.6166686, -64.1084895, "Alaska, PE"))
C: #[results=[
C:   { temperature=22.5C, wind_speed=5.1mps, humidity=83.8, cloudiness=4.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(46.6166686, -64.1084895, "Alaska, PE") }
C: ]];
A: Where are you now?
A: It is sunny today in Alaska, PE and the temperature is 72.5 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: how's the weather in tokyo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("tokyo"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(46.6166686, -64.1084895, "Alaska, PE"))
C: #[results=[
C:   { temperature=22.5C, wind_speed=5.1mps, humidity=83.8, cloudiness=4.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(46.6166686, -64.1084895, "Alaska, PE") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(35.6821116, 139.7656744, "Tōkyō, Tokyo"))
C: #[results=[
C:   { temperature=25.9C, wind_speed=0.6mps, humidity=85.7, cloudiness=47.7, fog=0, status=enum raining, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=5;content_type=image/png"^^tt:picture, location=new Location(35.6821116, 139.7656744, "Tōkyō, Tokyo") }
C: ]];
A: It is raining today in Tōkyō, Tokyo and the temperature is 78.6 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: remind me to do something at 4:24
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[set_time($now, new Time(4, 24))]) => @org.thingpedia.builtin.thingengine.builtin.say();
====
# recording/ba1a32fc3ab0440eba0dbb56584bc87e
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=26.3C, wind_speed=2.8mps, humidity=42.9, cloudiness=3.1, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 79.3 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/51b91c29082d36c7cf6d739ebe7726c4
U: hi there
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/e9c10f4e27f9a41beb9eb4d9098d4ec4
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="lyPZgVn3Le"^^com.icanhazdadjoke:id, text="What did the ocean say to the shore? Nothing, it just waved." }
C: ]];
A: What did the ocean say to the shore? Nothing, it just waved.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/66fb5badb46140b801e4fa90d3b3979d
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
A: "I'm sorry." "Hi sorry, I'm dad".
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="7wciy59MJe"^^com.icanhazdadjoke:id, text="What’s Forest Gump’s Facebook password? 1forest1" }
C: ]];
A: What’s Forest Gump’s Facebook password? 1forest1.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="7wciy59MJe"^^com.icanhazdadjoke:id, text="What’s Forest Gump’s Facebook password? 1forest1" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ElbaF6wHlyd"^^com.icanhazdadjoke:id, text="I cut my finger cutting cheese. I know it may be a cheesy story but I feel grate now." }
C: ]];
A: I cut my finger cutting cheese. I know it may be a cheesy story but I feel grate now.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="7wciy59MJe"^^com.icanhazdadjoke:id, text="What’s Forest Gump’s Facebook password? 1forest1" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ElbaF6wHlyd"^^com.icanhazdadjoke:id, text="I cut my finger cutting cheese. I know it may be a cheesy story but I feel grate now." }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="oOR7hFdx5Ed"^^com.icanhazdadjoke:id, text="I wouldn't buy anything with velcro. It's a total rip-off." }
C: ]];
A: I wouldn't buy anything with velcro. It's a total rip-off.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/b4c1221e21e07f28b35113362e93f0a7
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="baFQZv4w5wc"^^com.icanhazdadjoke:id, text="My New Years resolution is to stop leaving things so late." }
C: ]];
A: My New Years resolution is to stop leaving things so late.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/0d86db403a22912b0bd13c4d6b01c63e
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="V8hFQCY8Unb"^^com.icanhazdadjoke:id, text="Where do you take someone who has been injured in a Peek-a-boo accident? To the I.C.U." }
C: ]];
A: Where do you take someone who has been injured in a Peek-a-boo accident? To the I.C.U.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: more
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/5599bb12e4be6d6ae1c28a242a4cb992
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.1C, wind_speed=1.8mps, humidity=85.6, cloudiness=83.6, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="N7pWvcxsHBd"^^com.icanhazdadjoke:id, text="What happens to a frog's car when it breaks down? It gets toad." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.1C, wind_speed=1.8mps, humidity=85.6, cloudiness=83.6, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 61 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/4f794aaaba91c72961cdb49ab8f932de
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.8C, wind_speed=2.9mps, humidity=52.5, cloudiness=10.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 74.8 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what time is it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.8C, wind_speed=2.9mps, humidity=52.5, cloudiness=10.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(0, 18, 38) }
C: ]];
A: Right now, it's 5:18 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/b4c1325f79f3df84e530499bef121e30
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5c008f9f9a2e4061afe303e6ea867395
U: play wolfgang a mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang a mozart")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/168924dbacf30e68e8ed7a1f35120bf6
U: Ask Bing for a quote from William Shakespeare.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="william shakespeare");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.bing.web_search(query="william shakespeare")
C: #[results=[
C:   { query="william shakespeare", title="William Shakespeare - Wikipedia", description="William Shakespeare (bapt. 26 April 1564 – 23 April 1616) was an English playwright, poet, and actor, widely regarded as the greatest writer in the English language and the world's greatest dramatist. He is often called England's national poet and the \"Bard of Avon\" (or simply \"the Bard\"). His extant works, including collaborations, consist of some 39 plays, 154 sonnets, three long narrative ...", link="https://en.wikipedia.org/wiki/William_Shakespeare"^^tt:url },
C:   { query="william shakespeare", title="William Shakespeare Biography", description="William Shakespeare was a renowned English poet, playwright, and actor born in 1564 in Stratford-upon-Avon.His birthday is most commonly celebrated on 23 April (see When was Shakespeare born), which is also believed to be the date he died in 1616. Shakespeare was a prolific writer during the Elizabethan and Jacobean ages of British theatre (sometimes called the English Renaissance or the Early ...", link="https://www.shakespeare.org.uk/explore-shakespeare/shakespedia/william-shakespeare/william-shakespeare-biography/"^^tt:url },
C:   { query="william shakespeare", title="About William Shakespeare | Academy of American Poets", description="William Shakespeare was born on April 23, 1564, in Stratford-upon-Avon. The son of John Shakespeare and Mary Arden, he was probably educated at the King Edward VI Grammar School in Stratford, where he learned Latin and a little Greek and read the Roman dramatists. At eighteen, he married Anne Hathaway, a woman seven or eight years his senior.", link="https://poets.org/poet/william-shakespeare"^^tt:url },
C:   { query="william shakespeare", title="William Shakespeare: 20 Facts, 37 Plays, 375 Poems, 100 ...", description="William Shakespeare wrote at least 37 plays that scholars know of, with most of them labeled is comedies, histories, or tragedies. The earliest play that is directly attributed to Shakespeare is the trilogy of \"King Henry VI,\" with Richard III also being written around the same time, between 1589 and 1591.", link="https://www.williamshakespeare.net/"^^tt:url },
C:   { query="william shakespeare", title="The Complete Works of William Shakespeare", description="Welcome to the Web's first edition of the Complete Works of William Shakespeare. This site has offered Shakespeare's plays and poetry to the Internet community since 1993. For other Shakespeare resources, visit the Mr. William Shakespeare and the Internet Web site. The original electronic source for this server was the Complete Moby(tm ...", link="http://shakespeare.mit.edu/"^^tt:url }
C: ]];
A: I found William Shakespeare - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: What is the meaning of the word of judicate?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @info.owlbot.get(word="judicate");
====
# recording/64d08ac321c0e85f0b7a895d4bb24468
U: play baba riley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "baba riley" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Baba O'Riley on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/655e9cb921165bcbde06647eaf0ed9e8
U: play mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music by Baby Mozart on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play wolfgang mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/bd2f608983fc6143e47f9a1dae5626f1
U: play the artist the cure on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=35];
A: I played music by The Cure on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5a5c1909fab47a4593c937b17646a71f
U: play mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music by Baby Mozart on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/d0a27ef7d75fd1709b690b1d908188b5
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/836eb051bba5f2d095ddc908e72c93a7
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/aaa33ba9896cec36ee8da57640c6fb5d
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/af632248fa79fe682e347b9dc89a6150
U: play wolfgang amadeus mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang amadeus mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: previous song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[]];
A: I played the previous song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
====
# recording/6401acf784b0b87369027e16b7a747e1
U: play michael jackson
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("michael jackson")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3fMbdgg4jU18AjLCKBhRSm"^^org.thingpedia.media-source:artist("Michael Jackson")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5ChkMS8OtdzJeqyybCc9R5"^^org.thingpedia.media-source:playable("Billie Jean"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1OOtq8tRnDM8kG2gqUPjAj"^^org.thingpedia.media-source:playable("Beat It"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7oOOI85fVQvVnK5ynNMdW7"^^org.thingpedia.media-source:playable("Rock with You - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:46eu3SBuFCXWsPT39Yg3tJ"^^org.thingpedia.media-source:playable("Don't Stop 'Til You Get Enough"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2bCQHF9gdG5BNDVuEIEnNk"^^org.thingpedia.media-source:playable("Smooth Criminal - 2012 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3cybT6ri039rCxZkbsa6IR"^^org.thingpedia.media-source:playable("Rockin' Robin"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5lA3pwMkBdd24StM90QrNR"^^org.thingpedia.media-source:playable("P.Y.T. (Pretty Young Thing)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0sKlV58cODrjxGFOyf9IXY"^^org.thingpedia.media-source:playable("The Way You Make Me Feel - 2012 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4jnFqNWeJCeCRHc4HCdxfd"^^org.thingpedia.media-source:playable("Remember the Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5lWFrW5T3JtxVCLDb7etPu"^^org.thingpedia.media-source:playable("Bad - 2012 Remaster"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=33];
A: I played music by Michael Jackson on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/468d01d54f25e9216f9ce410e18df943
U: play travis playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "travis" => @org.thingpedia.media-player.play(playable=id);
====
# recording/41abf79a945714fe511008497bc629d5
U: Play Sandstorm by Darude
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("darude")) && id =~ "sandstorm" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:0LhHRmSd1EYM5QdNeNnCoQ"^^org.thingpedia.media-source:artist("Darude")) && id =~ "sandstorm")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="10a83fba23ca39d9d843c96f868d452729b18665", display="Nicks room", playable="spotify:track:24CXuh2WNpgeSYUOvz14jk"^^org.thingpedia.media-source:playable("Sandstorm - Radio Edit"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Sandstorm - Radio Edit on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: configure home assistant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.configure(device=null^^tt:device("home assistant"));
====
# recording/218ff06ec9f035bb73287fb801635ed6
U: play yellow submarine
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "yellow submarine" => @org.thingpedia.media-player.play(playable=id);
====
# recording/e2ec417c6984b92092c336ab46a21048
U: what's the latest album by taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.album() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1]
C: #[results=[
C:   { id="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], release_date=new Date("2021-04-09T00:00:00.000Z"), popularity=80, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: The most recent album is Fearless (Taylor's Version). It is an album by Taylor Swift.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: play it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.play(playable="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1]
C: #[results=[
C:   { id="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], release_date=new Date("2021-04-09T00:00:00.000Z"), popularity=80, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"))
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:playable("Fearless (Taylor's Version)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played a song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0c293c5202fd7fe0500ac3c8f570260d
U: what's the weather in san mateo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("san mateo"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.5439684, -122.306678, "San Mateo, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=2mps, humidity=47.9, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.5439684, -122.306678, "San Mateo, California") }
C: ]];
A: It is sunny today in San Mateo, California and the temperature is 20.6 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.5439684, -122.306678, "San Mateo, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=2mps, humidity=47.9, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.5439684, -122.306678, "San Mateo, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="scaFQfFlqjb"^^com.icanhazdadjoke:id, text="My dentist is the best, he even has a little plaque!" }
C: ]];
A: My dentist is the best, he even has a little plaque!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5e26b0a1fb1732d66d33e730f1f79837
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a68abd02b17b67becd4084473e3cb639
U: play 8 mile
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "8 mile" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "8 mile")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5Z01UMMf7V1o0MzF86s6WJ"^^org.thingpedia.media-source:playable("Lose Yourself - From \"8 Mile\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Lose Yourself - From "8 Mile" Soundtrack on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/424c339660ae4d4c19cc636d26a49e89
U: show me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[
C:   { id="4311178050977928700"^^com.smartnews:article, link="https://www.space.com/gravitational-wave-observatory-moon-concept/"^^tt:url, title="We could hunt gravitational waves on the moon if this wild idea takes off", date=new Date("2021-07-28T11:00:02.000Z"), source="Space", author="Mike Wall", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311178050977928563.mp3"^^tt:url, content="smartnews-sha256:38781a749362b8b98762bba3791f057406c7d6d4dd14bc061b5d9617d4307065" },
C:   { id="4311219825989915600"^^com.smartnews:article, link="https://www.kansas.com/news/coronavirus/article253084593.html"^^tt:url, title="Wichita hospital system mandates COVID vaccines for workers amid growing ICU numbers", date=new Date("2021-07-28T16:46:38.000Z"), source="The Wichita Eagle", author="Dion Lefler", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311219825989915471.mp3"^^tt:url, content="smartnews-sha256:3b0cb6e35128d0be65adb659a4df655e8a02733e32774f4d38acca595ef52e5f" },
C:   { id="4311294915339356000"^^com.smartnews:article, link="https://www.fresnobee.com/news/coronavirus/article253087468.html"^^tt:url, title="Fresno church cancels youth activities after COVID exposures at summer camp", date=new Date("2021-07-28T21:45:46.000Z"), source="The Fresno Bee", author="Tim Sheehan", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294915339356334.mp3"^^tt:url, content="smartnews-sha256:dc2af98fc72287a940a3d1f62eb6310d6dfe18924eccb5e62a42e70e4188a991" },
C:   { id="4311094280421639000"^^com.smartnews:article, link="https://www.huffpost.com/entry/michael-fanone-voicemail_n_6100e81be4b0fd216c20006f"^^tt:url, title="Cop Shares Voicemail Threat He Received During Testimony About U.S. Capitol Riot", date=new Date("2021-07-28T08:29:12.000Z"), source="HuffPost", author="Josephine Harvey", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311094280421639029.mp3"^^tt:url, content="smartnews-sha256:e4833fc02473c79bbb0e3d284096d48837b606aece9b3c5d3bb7fd103e20fd77" },
C:   { id="4311268331547002400"^^com.smartnews:article, link="https://www.rawstory.com/proud-boy-arrested/"^^tt:url, title="Feds nab Virginia Proud Boy who charged at cops while wielding a 'large stick' during Capitol riot", date=new Date("2021-07-28T20:00:04.000Z"), source="Raw Story", author="Brad Reed", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311268331547002236.mp3"^^tt:url, content="smartnews-sha256:efd5896ad7b47151ac0aca38546ebc7ef6952997e7b944a2f4df3e2312c28436" },
C:   { id="4311287856317345300"^^com.smartnews:article, link="https://www.latimes.com/california/story/2021-07-28/usc-finds-racial-profiling-stronger-oversight-of-campus-safety-officers-urged"^^tt:url, title="USC finds racial profiling with campus security, urges more oversight", date=new Date("2021-07-28T21:16:39.000Z"), source="Los Angeles Times", author="Teresa Watanabe", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311287856317345034.mp3"^^tt:url, content="smartnews-sha256:f18be8227b5967ef772bded766bd09fbbd4d27e395e0853c5ca9cf41c2741319" },
C:   { id="4311294925128865000"^^com.smartnews:article, link="https://www.audacy.com/wfan/sports/mets/zack-scott-pitching-is-the-mets-top-deadline-priority"^^tt:url, title="Zack Scott tells Carton & Roberts that pitching is the Mets' top deadline priority", date=new Date("2021-07-28T21:42:21.000Z"), source="Audacy", author="Carton Roberts", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294925128864799.mp3"^^tt:url, content="smartnews-sha256:b8213e1112731d4ac245aa618c7e2d4b56946d75798ea25debf7f2d1e6182456" },
C:   { id="4311302557784877000"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/older-builders-back-on-the-tools-construction-boom/100314222"^^tt:url, title="Queensland construction boom means tradies of all ages are trying to keep up", date=new Date("2021-07-28T22:07:32.000Z"), source="Australian Broadcasting Corporation", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302557784877032.mp3"^^tt:url, content="smartnews-sha256:544df438c339b3961e878ef366c012e14a1e24b2cef1c8a36359d52ff267b36e" },
C:   { id="4310815481490581500"^^com.smartnews:article, link="https://www.bloomberg.com/news/articles/2021-07-27/no-crabs-no-scallops-seafood-is-vanishing-from-menus-in-u-s"^^tt:url, title="No Crabs, No Scallops: Seafood Is Vanishing From Menus in U.S.", date=new Date("2021-07-27T13:00:00.000Z"), source="Bloomberg", author="Adam Jackson and Kate Krader", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4310815481490581423.mp3"^^tt:url, content="smartnews-sha256:e5050f59a832e8ce42c42cdd34d12e6997942dca7a7783c712e76236d1f40b59" },
C:   { id="4311302598507374600"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/abc-capricornia-turns-90-4rk-rockhampton-radio-station/100323628"^^tt:url, title="Celebrating 90 years of Aunty in central Queensland", date=new Date("2021-07-28T22:06:19.000Z"), source="Australian Broadcasting Corporation", author="By Erin Semmler and Paul Culliver", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302598507374575.mp3"^^tt:url, content="smartnews-sha256:ac6667c85da0fcdfcc9499abb6cc5550b456c57c914f45acbfb5bb26e0b2e3f5" }
C: ]]
C: #[count=50]
C: #[more=true];
A: Here are the news.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_many;
U: What can you do?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[
C:   { id="4311178050977928700"^^com.smartnews:article, link="https://www.space.com/gravitational-wave-observatory-moon-concept/"^^tt:url, title="We could hunt gravitational waves on the moon if this wild idea takes off", date=new Date("2021-07-28T11:00:02.000Z"), source="Space", author="Mike Wall", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311178050977928563.mp3"^^tt:url, content="smartnews-sha256:38781a749362b8b98762bba3791f057406c7d6d4dd14bc061b5d9617d4307065" },
C:   { id="4311219825989915600"^^com.smartnews:article, link="https://www.kansas.com/news/coronavirus/article253084593.html"^^tt:url, title="Wichita hospital system mandates COVID vaccines for workers amid growing ICU numbers", date=new Date("2021-07-28T16:46:38.000Z"), source="The Wichita Eagle", author="Dion Lefler", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311219825989915471.mp3"^^tt:url, content="smartnews-sha256:3b0cb6e35128d0be65adb659a4df655e8a02733e32774f4d38acca595ef52e5f" },
C:   { id="4311294915339356000"^^com.smartnews:article, link="https://www.fresnobee.com/news/coronavirus/article253087468.html"^^tt:url, title="Fresno church cancels youth activities after COVID exposures at summer camp", date=new Date("2021-07-28T21:45:46.000Z"), source="The Fresno Bee", author="Tim Sheehan", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294915339356334.mp3"^^tt:url, content="smartnews-sha256:dc2af98fc72287a940a3d1f62eb6310d6dfe18924eccb5e62a42e70e4188a991" },
C:   { id="4311094280421639000"^^com.smartnews:article, link="https://www.huffpost.com/entry/michael-fanone-voicemail_n_6100e81be4b0fd216c20006f"^^tt:url, title="Cop Shares Voicemail Threat He Received During Testimony About U.S. Capitol Riot", date=new Date("2021-07-28T08:29:12.000Z"), source="HuffPost", author="Josephine Harvey", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311094280421639029.mp3"^^tt:url, content="smartnews-sha256:e4833fc02473c79bbb0e3d284096d48837b606aece9b3c5d3bb7fd103e20fd77" },
C:   { id="4311268331547002400"^^com.smartnews:article, link="https://www.rawstory.com/proud-boy-arrested/"^^tt:url, title="Feds nab Virginia Proud Boy who charged at cops while wielding a 'large stick' during Capitol riot", date=new Date("2021-07-28T20:00:04.000Z"), source="Raw Story", author="Brad Reed", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311268331547002236.mp3"^^tt:url, content="smartnews-sha256:efd5896ad7b47151ac0aca38546ebc7ef6952997e7b944a2f4df3e2312c28436" },
C:   { id="4311287856317345300"^^com.smartnews:article, link="https://www.latimes.com/california/story/2021-07-28/usc-finds-racial-profiling-stronger-oversight-of-campus-safety-officers-urged"^^tt:url, title="USC finds racial profiling with campus security, urges more oversight", date=new Date("2021-07-28T21:16:39.000Z"), source="Los Angeles Times", author="Teresa Watanabe", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311287856317345034.mp3"^^tt:url, content="smartnews-sha256:f18be8227b5967ef772bded766bd09fbbd4d27e395e0853c5ca9cf41c2741319" },
C:   { id="4311294925128865000"^^com.smartnews:article, link="https://www.audacy.com/wfan/sports/mets/zack-scott-pitching-is-the-mets-top-deadline-priority"^^tt:url, title="Zack Scott tells Carton & Roberts that pitching is the Mets' top deadline priority", date=new Date("2021-07-28T21:42:21.000Z"), source="Audacy", author="Carton Roberts", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294925128864799.mp3"^^tt:url, content="smartnews-sha256:b8213e1112731d4ac245aa618c7e2d4b56946d75798ea25debf7f2d1e6182456" },
C:   { id="4311302557784877000"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/older-builders-back-on-the-tools-construction-boom/100314222"^^tt:url, title="Queensland construction boom means tradies of all ages are trying to keep up", date=new Date("2021-07-28T22:07:32.000Z"), source="Australian Broadcasting Corporation", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302557784877032.mp3"^^tt:url, content="smartnews-sha256:544df438c339b3961e878ef366c012e14a1e24b2cef1c8a36359d52ff267b36e" },
C:   { id="4310815481490581500"^^com.smartnews:article, link="https://www.bloomberg.com/news/articles/2021-07-27/no-crabs-no-scallops-seafood-is-vanishing-from-menus-in-u-s"^^tt:url, title="No Crabs, No Scallops: Seafood Is Vanishing From Menus in U.S.", date=new Date("2021-07-27T13:00:00.000Z"), source="Bloomberg", author="Adam Jackson and Kate Krader", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4310815481490581423.mp3"^^tt:url, content="smartnews-sha256:e5050f59a832e8ce42c42cdd34d12e6997942dca7a7783c712e76236d1f40b59" },
C:   { id="4311302598507374600"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/abc-capricornia-turns-90-4rk-rockhampton-radio-station/100323628"^^tt:url, title="Celebrating 90 years of Aunty in central Queensland", date=new Date("2021-07-28T22:06:19.000Z"), source="Australian Broadcasting Corporation", author="By Erin Semmler and Paul Culliver", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302598507374575.mp3"^^tt:url, content="smartnews-sha256:ac6667c85da0fcdfcc9499abb6cc5550b456c57c914f45acbfb5bb26e0b2e3f5" }
C: ]]
C: #[count=50]
C: #[more=true];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: What can you do?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
====
# recording/f324791053a584b5e895bfa0218b2b15
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ClGY8xc2EBd"^^com.icanhazdadjoke:id, text="Why are graveyards so noisy? Because of all the coffin." }
C: ]];
A: Why are graveyards so noisy? Because of all the coffin.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what time is it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ClGY8xc2EBd"^^com.icanhazdadjoke:id, text="Why are graveyards so noisy? Because of all the coffin." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(21, 33, 12) }
C: ]];
A: Right now, it's 2:33 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: configure spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.configure(device="com.spotify"^^tt:device("spotify"));
====
# recording/2f7fe32a19469324d41ae40e93672485
U: play the podcast all the presidents laywers
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "all the presidents laywers" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents laywers")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Sorry, there are no shows matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3fb594b46d296931269ff000eeb92380
U: what can you do
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: tell me a joke when i wake up
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: attimer(time=[$time.morning]) => @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
C: attimer(time=[new Time(8, 30)]) => @com.icanhazdadjoke.get()
C: #[results=[]];
A: Did you mean get the joke every day in the morning?
A: Alright, I will get the joke every day at 1:30 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/8e37cfbf7c2de7c404a3fc7b6469ad66
U: stop the music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play the latest by taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UAdDYrkCvVQftaKpL6q5f"^^org.thingpedia.media-source:playable("the lakes - original version"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the lakes - original version on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UAdDYrkCvVQftaKpL6q5f"^^org.thingpedia.media-source:playable("the lakes - original version"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:0UAdDYrkCvVQftaKpL6q5f"^^org.thingpedia.media-source:song("the lakes - original version"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:40cMfQDrBCDmOaWZuNEmKq"^^org.thingpedia.media-source:album("the lakes (original version)"), genres=["pop", "post-teen pop"], release_date=new Date("2021-07-24T00:00:00.000Z"), popularity=68, energy=40.6, danceability=19.7, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get the currently playing track?
A: Currently playing the lakes - original version.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: when was this song released
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [release_date] of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
====
# recording/83d5f852dcb2e0e19bde12cbfaf1f82e
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: lower the volume
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.volume-control.lower_volume();
====
# recording/f01b232dab5b321bca441cb810697eab
U: play the podcast all the presidents lawyer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "all the presidents lawyer" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play the podcast all the presidents lawyer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what's my name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
A: Sorry, I don't know your name yet. Would you like to tell me?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: my name is giovanni
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
A: Your request was completed successfully.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's my name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
A: Your name is giovanni.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather next week
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: It will be cloudy on next Sunday at 5:00 AM in Redwood City, California and the temperature will be 15.3 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather on friday
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=20.7C, wind_speed=0.8mps, humidity=45.4, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-07-23T17:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: It will be sunny tomorrow at 10:00 AM in Redwood City, California and the temperature will be 20.7 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather on monday
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum monday), location=new Location(37.4863239, -122.232523, "Redwood City, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=20.7C, wind_speed=0.8mps, humidity=45.4, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-07-23T17:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum monday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=23.4C, wind_speed=1.7mps, humidity=41.2, cloudiness=90.6, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-26T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: It will be cloudy on next Monday at 11:00 AM in Redwood City, California and the temperature will be 23.4 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=20.7C, wind_speed=0.8mps, humidity=45.4, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-07-23T17:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum monday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=23.4C, wind_speed=1.7mps, humidity=41.2, cloudiness=90.6, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-26T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: show me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/736d68b7b8ab3e0630a12eb233d78170
U: what can you do
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: show me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4312977115906583600"^^com.smartnews:article, link="https://www.yahoo.com/lifestyle/suzanne-somers-aging-130025805.html"^^tt:url, title="Suzanne Somers 'proud' of nearly-nude 'birthday suit' photo: 'I was 73 and it was natural'", date=new Date("2021-08-02T13:00:25.000Z"), source="Yahoo Lifestyle", author="Kaitlin Reilly", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312977115906583625.mp3"^^tt:url, content="smartnews-sha256:714c6f2c87db474dc73b3c986d3d0f89b7b066022bf24bdffca76fbf628f2ccf" },
C:   { id="4312847673502730000"^^com.smartnews:article, link="https://apnews.com/article/joe-biden-business-bills-474bc149c0d9867e0b6636bf7695ea85"^^tt:url, title="$1T infrastructure bill gets first action as senators dig in", date=new Date("2021-08-02T04:35:06.000Z"), source="Associated Press", author="By KEVIN FREKING and LISA MASCARO", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312847673502730059.mp3"^^tt:url, content="smartnews-sha256:68c9a58ff7ae96c5d1a02fff7739409f3a070f593fbfaa309876a63c73f48dfe" },
C:   { id="4312929660674511000"^^com.smartnews:article, link="https://www.texastribune.org/2021/08/02/san-antonio-water-supply-rural-wells/"^^tt:url, title="San Antonio built a pipeline to rural Central Texas to increase its water supply. Now local landowners say their wells are running dry.", date=new Date("2021-08-02T10:00:00.000Z"), source="The Texas Tribune", author="Erin Douglas", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312929660674510976.mp3"^^tt:url, content="smartnews-sha256:ad8fb50a528d9d89e018a2d95ef29c571b1ff344a8b0a2b6c6e2932689b09906" },
C:   { id="4312649870834933000"^^com.smartnews:article, link="https://www.mashed.com/475635/fans-are-freaking-out-about-trisha-yearwoods-diamond-ring/?zsource=smartnews"^^tt:url, title="Fans Are Freaking Out About Trisha Yearwood's Diamond Ring", date=new Date("2021-08-01T15:27:49.000Z"), source="Mashed", author="Ashley Steinberg", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312649870834933395.mp3"^^tt:url, content="smartnews-sha256:050ae0e6176564bb4d5b3452b1aadb951d8824c9262c6379940d84cfb0793c71" },
C:   { id="4313094525091320300"^^com.smartnews:article, link="https://www.upi.com/Health_News/2021/08/02/insecticide-neonicotinoid-bees-reproduction-study/2781627924388/"^^tt:url, title="Neonicotinoid insecticides harm bees even in small amounts", date=new Date("2021-08-02T16:54:59.000Z"), source="UPI", author="Kyle Barnett", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313094525091320228.mp3"^^tt:url, content="smartnews-sha256:f17b6958e696c1f6306bf56dbd86cd1581c65d54c80d88bd4876c716d91523be" },
C:   { id="4312602642443410400"^^com.smartnews:article, link="https://metro.co.uk/2021/08/01/tokyo-olympics-who-is-competing-in-the-mens-100m-final-15020484/?ito=smart-news"^^tt:url, title="Tokyo Olympics: Who is competing in the Men’s 100m final?", date=new Date("2021-08-01T11:56:45.000Z"), source="Metro", author="Sophie Dickinson", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312602642443410524.mp3"^^tt:url, content="smartnews-sha256:88cea9da94ba5f7015f210660259ddf9b7b4eea7629f20302f9145cbade3fdaa" },
C:   { id="4313021102122085000"^^com.smartnews:article, link="https://radaronline.com/p/alex-rodriguez-big-dick-energy-melanie-collins-dating-ibiza-private-jet-photos/"^^tt:url, title="Alex Rodriguez Has 'Big D--- Energy' Leaving Ibiza With Blonde Bombshell Melanie Collins On Private Jet", date=new Date("2021-08-02T15:38:51.000Z"), source="RadarOnline", author="Whitney Vasquez", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313021102122084888.mp3"^^tt:url, content="smartnews-sha256:5bfe512d8a6d345703a818612cdbb54ef4f44e3db042bd5a579be43091f71819" },
C:   { id="4312859554237913000"^^com.smartnews:article, link="https://www.insider.com/tennessee-gop-rep-david-byrd-covid-months-take-virus-seriously-2021-8"^^tt:url, title="Tennessee GOP rep who rejected masks now says COVID-19 is real and dangerous after his 8-month battle with the virus", date=new Date("2021-08-02T05:23:36.000Z"), source="Insider", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312859554237912910.mp3"^^tt:url, content="smartnews-sha256:0e906aef8f12b8ebf6f9fff986cd013880f3dee029847ba303ab46c4de4ee6d9" },
C:   { id="4313041364129427000"^^com.smartnews:article, link="https://1061kissfm.iheart.com/content/2021-08-02-watch-argument-over-seat-reclining-leads-to-brawl-on-austin-bound-flight/"^^tt:url, title="WATCH: Argument Over Seat Reclining Leads To Brawl On Austin-Bound Flight", date=new Date("2021-08-02T15:41:00.000Z"), source="KISS FM - Dallas, TX", author="Anna Gallegos", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313041364129426834.mp3"^^tt:url, content="smartnews-sha256:8b17dceed75ce5d592de2912b133cc0e349b3fcbdc158252f3b7450e31e225f0" },
C:   { id="4313094392974946300"^^com.smartnews:article, link="https://www.charlotteobserver.com/entertainment/arts-culture/article252927728.html"^^tt:url, title="These artists have a goal for Charlotte: Prioritize diversity, equity and inclusion", date=new Date("2021-08-02T20:56:21.000Z"), source="Charlotte Observer", author="Liz Rothaus Bertrand", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313094392974946131.mp3"^^tt:url, content="smartnews-sha256:091462d9b58372593861815539cef21f867f56e31fc5eb236882161e86e6e134" }
C: ]]
C: #[count=50]
C: #[more=true];
A: Here are the news.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_many;
U: can you tell the date
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_date();
====
# recording/ecd08afa31db9bdabb8f13877768333c
U: what's my name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
A: Your name is giovanni.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the temperature outside
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [temperature] of @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { location=new Location(37.4863239, -122.232523, "Redwood City, California"), temperature=22.1C, status=enum sunny }
C: ]];
A: It is sunny today in Redwood City, California and the temperature is 22.1 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the humidity
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [humidity] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { location=new Location(37.4863239, -122.232523, "Redwood City, California"), temperature=22.1C, status=enum sunny }
C: ]];
C: [humidity] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { location=new Location(37.4863239, -122.232523, "Redwood City, California"), humidity=43.6, status=enum sunny }
C: ]];
A: The current weather in Redwood City, California is sunny. The humidity is 43.6 %.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0e03191245471940fa24714a3d6a013b
U: play the podcast all the presidents lawyer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "all the presidents lawyer" => @org.thingpedia.media-player.play(playable=id);
====
# recording/d2e020d03ed00eaffa91013aec492ad6
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/4ad00e2e2da979df18ef5edad4236e9b
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/7f51b06c25723f0aa169b9d84afe6f1e
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/8508c0923f0e01040653583e7ec27429
U: play the weekend
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("weekend")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7KxS1dL7Q7jxMkyb2ZvzXH"^^org.thingpedia.media-source:artist("Fury Weekend")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0SLVrAsEqTYcHFOKoDQGzb"^^org.thingpedia.media-source:playable("Another Brick In The Wall"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3RZZ8KnNq63Isfqo67KI4W"^^org.thingpedia.media-source:playable("Black To The Future"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4YyG15mMNRqjYCH3S7aBw0"^^org.thingpedia.media-source:playable("Knightriders"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6ElrKvNHLjtsmUqav1lrZl"^^org.thingpedia.media-source:playable("Dr. Online"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Adp5UsOveWYIsMP2ddkfJ"^^org.thingpedia.media-source:playable("Automatic Love - Extra Terra Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1r90nCKvPoWxSOLAWf0rKs"^^org.thingpedia.media-source:playable("Illumination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3mp3rEFAkam0fvsUzcBVU1"^^org.thingpedia.media-source:playable("12 To Midnight"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6nLlrtjFPS8wBETtkKvnLZ"^^org.thingpedia.media-source:playable("Signals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ePIF5AAQo9FvOJQdFof1z"^^org.thingpedia.media-source:playable("Euphoria"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5bPwnmPUsaSwHs7nBYAebf"^^org.thingpedia.media-source:playable("Gamechanger"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
A: Did you mean get music by weekend and then play the id on Spotify?
A: I played music by Fury Weekend on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play the weeknd
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("weeknd")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7KxS1dL7Q7jxMkyb2ZvzXH"^^org.thingpedia.media-source:artist("Fury Weekend")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0SLVrAsEqTYcHFOKoDQGzb"^^org.thingpedia.media-source:playable("Another Brick In The Wall"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3RZZ8KnNq63Isfqo67KI4W"^^org.thingpedia.media-source:playable("Black To The Future"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4YyG15mMNRqjYCH3S7aBw0"^^org.thingpedia.media-source:playable("Knightriders"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6ElrKvNHLjtsmUqav1lrZl"^^org.thingpedia.media-source:playable("Dr. Online"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Adp5UsOveWYIsMP2ddkfJ"^^org.thingpedia.media-source:playable("Automatic Love - Extra Terra Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1r90nCKvPoWxSOLAWf0rKs"^^org.thingpedia.media-source:playable("Illumination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3mp3rEFAkam0fvsUzcBVU1"^^org.thingpedia.media-source:playable("12 To Midnight"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6nLlrtjFPS8wBETtkKvnLZ"^^org.thingpedia.media-source:playable("Signals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ePIF5AAQo9FvOJQdFof1z"^^org.thingpedia.media-source:playable("Euphoria"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5bPwnmPUsaSwHs7nBYAebf"^^org.thingpedia.media-source:playable("Gamechanger"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37BZB0z9T8Xu7U3e65qxFy"^^org.thingpedia.media-source:playable("Save Your Tears (with Ariana Grande) (Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0VjIjW4GlUZAMYd2vXMi3b"^^org.thingpedia.media-source:playable("Blinding Lights"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fBv7CLKzipRk6EC6TWHOB"^^org.thingpedia.media-source:playable("The Hills"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7MXVkk9YMctZqd1Srtv4MB"^^org.thingpedia.media-source:playable("Starboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:22VdIZQfgXJea34mQxlt81"^^org.thingpedia.media-source:playable("Can't Feel My Face"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:09mEdoA6zrmBPgTEN5qXmN"^^org.thingpedia.media-source:playable("Call Out My Name"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6bnF93Rx87YqUBLSgjiMU8"^^org.thingpedia.media-source:playable("Heartless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7szuecWAPwGoV1e5vGu8tl"^^org.thingpedia.media-source:playable("In Your Eyes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ch7LmS7r2Gy2kc64wv3Bz"^^org.thingpedia.media-source:playable("Die For You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4PhsKqMdgMEUSstTDAmMpg"^^org.thingpedia.media-source:playable("Often"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=44];
A: I played music by The Weeknd on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/770260fda95f0117dc041866f722becd
U: play blink 182
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("blink 182")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6FBDaR13swtiWwGhX1WQsP"^^org.thingpedia.media-source:artist("blink-182")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m1hi0nfMR9vdGC8UcrnwU"^^org.thingpedia.media-source:playable("All The Small Things"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1oTo3ijRbaDAtrjJrGAPSw"^^org.thingpedia.media-source:playable("I Miss You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1fJFuvU2ldmeAm5nFIHcPP"^^org.thingpedia.media-source:playable("1 Date"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6WkSUgo1VdpzgtiXKlFPcY"^^org.thingpedia.media-source:playable("Dammit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xpDh0dXrkVp0Po1qrHUd8"^^org.thingpedia.media-source:playable("Adam's Song"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2ydUT1pFhuLDnouelIv4WH"^^org.thingpedia.media-source:playable("The Rock Show"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26AYR77170U49cMcXB7aRV"^^org.thingpedia.media-source:playable("Feeling This"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:24CRDgNOgA72JLL7PHFjgB"^^org.thingpedia.media-source:playable("Anthem Part 2"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:44TuSOP6xIAEeJmZsN3nXO"^^org.thingpedia.media-source:playable("Bored To Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=41];
A: I played music by blink-182 on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/746d7590e5feba828151320075dcd7ed
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: get joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="TS7U0oWnjyd"^^com.icanhazdadjoke:id, text="What is bread's favorite number?  Leaven." }
C: ]];
A: What is bread's favorite number? Leaven.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: get restaurant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant();
====
# recording/998fc6382c838508ee6df390ea9b302f
U: play megalovania
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "megalovania" => @org.thingpedia.media-player.play(playable=id);
====
# recording/046f33bc50e7433f85c79736e7d386b9
U: like the album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/5cd240d311463a01c25c4344d9e8761e
U: How is it going?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Who are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where is almond?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
A: My creators are mostly at Stanford. I'm an open-source assistant in the cloud.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the weather in ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("iss"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
A: It is cloudy today in Nummi, Turku and the temperature is 70.7 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="iss");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
A: I found International Space Station | NASA.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is elon?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="elon");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
A: I found Elon University / Home.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is bezos?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="bezos");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="bezos")
C: #[results=[
C:   { query="bezos", title="Jeff Bezos - Wikipedia", description="Jeffrey Preston Bezos (/ ˈ b eɪ z oʊ s / BAY-zohss; né Jorgensen; born January 12, 1964) is an American business magnate, media proprietor, and investor.Bezos is the founder and executive chairman of Amazon, having previously served as chairman, president and CEO of the company. With a net worth of more than $200 billion as of June 2021, he is the richest person in the world according to ...", link="https://en.wikipedia.org/wiki/Jeff_Bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Wife, Kids & Amazon - Biography", description="Bezos was born on January 12, 1964, in Albuquerque, New Mexico, to a teenage mother, Jacklyn Gise Jorgensen, and his biological father, Ted Jorgensen. The Jorgensens were married less than a year ...", link="https://www.biography.com/business-figure/jeff-bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Forbes", description="Jeff Bezos founded e-commerce giant Amazon in 1994 out of his garage in Seattle. He stepped down as CEO to become executive chairman on July 5, 2021. Amazon thrived during the pandemic; revenues ...", link="https://www.forbes.com/profile/jeff-bezos/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos steps down as Amazon CEO as retailer starts new ...", description="Bezos founded Amazon as an online bookstore and built it into a shopping and entertainment empire that is the second-largest private employer in the U.S., behind Walmart. Amazon, which is buying ...", link="https://www.cbsnews.com/news/jeff-bezos-amazon-ceo-steps-down/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos | Biography, Amazon, & Facts | Britannica", description="Jeff Bezos, American entrepreneur who played a key role in the growth of e-commerce as the founder and chief executive officer of the online retailer Amazon.com. Under his guidance, Amazon became the largest retailer on the World Wide Web and the model for Internet sales.", link="https://www.britannica.com/biography/Jeff-Bezos"^^tt:url }
C: ]];
A: I found Jeff Bezos - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: how did bezos dies?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="bezos dies");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="bezos")
C: #[results=[
C:   { query="bezos", title="Jeff Bezos - Wikipedia", description="Jeffrey Preston Bezos (/ ˈ b eɪ z oʊ s / BAY-zohss; né Jorgensen; born January 12, 1964) is an American business magnate, media proprietor, and investor.Bezos is the founder and executive chairman of Amazon, having previously served as chairman, president and CEO of the company. With a net worth of more than $200 billion as of June 2021, he is the richest person in the world according to ...", link="https://en.wikipedia.org/wiki/Jeff_Bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Wife, Kids & Amazon - Biography", description="Bezos was born on January 12, 1964, in Albuquerque, New Mexico, to a teenage mother, Jacklyn Gise Jorgensen, and his biological father, Ted Jorgensen. The Jorgensens were married less than a year ...", link="https://www.biography.com/business-figure/jeff-bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Forbes", description="Jeff Bezos founded e-commerce giant Amazon in 1994 out of his garage in Seattle. He stepped down as CEO to become executive chairman on July 5, 2021. Amazon thrived during the pandemic; revenues ...", link="https://www.forbes.com/profile/jeff-bezos/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos steps down as Amazon CEO as retailer starts new ...", description="Bezos founded Amazon as an online bookstore and built it into a shopping and entertainment empire that is the second-largest private employer in the U.S., behind Walmart. Amazon, which is buying ...", link="https://www.cbsnews.com/news/jeff-bezos-amazon-ceo-steps-down/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos | Biography, Amazon, & Facts | Britannica", description="Jeff Bezos, American entrepreneur who played a key role in the growth of e-commerce as the founder and chief executive officer of the online retailer Amazon.com. Under his guidance, Amazon became the largest retailer on the World Wide Web and the model for Internet sales.", link="https://www.britannica.com/biography/Jeff-Bezos"^^tt:url }
C: ]];
C: @com.bing.web_search(query="bezos dies")
C: #[results=[
C:   { query="bezos dies", title="Jeff Bezos Death ? | Is Jeff Bezos Dead ? - What Happened ...", description="– Dies ? – There are unconfirmed rumors spreading everywhere through social media July 8, 2020, that CEO of Amazon, Jeff Bezos has died at the age of 56. There were no reliable source to confirm these rumor neither there was any cause of death said.", link="https://deaddeath.com/jeff-bezos-death-is-jeff-bezos-dead-what-happened-to-jeff-bezos-how-did-amazon-ceo-died-what-is-cause-of-death/"^^tt:url },
C:   { query="bezos dies", title="Jeff Bezos had a brush with death in a helicopter while ...", description="Bezos was visiting a canyon near Cathedral Mountain, which is located in West Texas roughly 50 miles from the Mexico border. He wanted to buy a huge, secluded desert ranch to test-fire rocket ...", link="https://www.businessinsider.com/jeff-bezos-blue-origin-helicopter-crash-2018-3"^^tt:url },
C:   { query="bezos dies", title="Is Jeff Bezos dead? #RipJeffBezos trends over claims 'he ...", description="Is Jeff Bezos dead? #RipJeffBezos trends over claims 'he drowned in Amazon river', Internet debunks viral hoax. It seems a few bored internet users decided to trend #RIPJeffbezos, similar to the previous #rRIPEllen trend, which went viral but was eventually established as a hoax that spread like wildfire", link="https://meaww.com/jeff-bezos-dead-rip-jeff-bezos-trends-internet-claims-drown-amazon-river-viral-hoax-debunk"^^tt:url },
C:   { query="bezos dies", title="Jeff Bezos Just Predicted When Amazon Will Die (and ...", description="In a meeting with employees last week, reported by CNBC, Bezos offered a healthy tinge of realism, as his company expands in the face of substantial and increasing opposition. Indeed, he predicted ...", link="https://www.inc.com/chris-matyszczyk/jeff-bezos-just-predicted-when-amazon-will-die-and-revealed-1-product-that-might-make-it-last-longer.html"^^tt:url },
C:   { query="bezos dies", title="Jeff Bezos refused to meet his dying biological father - Blind", description="Jeff Bezos refused to meet his dying biological father. Ted Jorgensen discovered his son was Jeff Bezos when a biographer writing a book about Jeff Bezos contacted him. He was about to die and wanted to see his son one last time. He died and Jeff's only comment was, \"I've never met him...the only time I ever think about it is when the doctor ...", link="https://www.teamblind.com/post/Jeff-Bezos-refused-to-meet-his-dying-biological-father-6b1HK2Tx"^^tt:url }
C: ]];
A: I found Jeff Bezos Death ? | Is Jeff Bezos Dead ? - What Happened ..
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: how did FBI cause 9/11?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="fbi cause 9 / 11");
====
# recording/6e82fa4b10204f055f5d95df0b3af55a
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me ajoke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
A: Want to hear a chimney joke? Got stacks of em! First one's on the house.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/e7c7ace5d05fb10bcfaddc735d6c24ff
U: hello
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/69ce5ef4b7f91376fd84b98fcf3f3de0
U: how are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: can you run a function?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum how_to_configure_skill);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum how_to_configure_skill)
C: #[results=[
C:   { reply="You can enable new skills to expand the set of commands that I understand. Click on Configure New Skills in the My Genie page to do so.", question=enum how_to_configure_skill }
C: ]];
A: You can enable new skills to expand the set of commands that I understand. Click on Configure New Skills in the My Genie page to do so.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: open the door for me
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.iot.cover.set_openclose(state=enum open);
====
# recording/901d03214273942e12f2bea7569775b0
U: what's the time
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 10, 56) }
C: ]];
A: Right now, it's 11:10 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/ab5d94a4f1d9307d866ec76df4bffec0
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="BQnyImOCIBd"^^com.icanhazdadjoke:id, text="How do hens stay fit? They always egg-cercise!" }
C: ]];
A: How do hens stay fit? They always egg-cercise!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/b15608377d16d13c272dfc98c5da6463
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/f7d0c8dd113d566adddd2a44e3304227
U: what time is it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 9, 57) }
C: ]];
A: Right now, it's 11:09 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: show me a cat picture
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.thecatapi.cat();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 9, 57) }
C: ]];
C: @com.thecatapi.cat()
C: #[results=[
C:   { id="bX5VJKzVM"^^com.thecatapi:cat, picture_url="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/bX5VJKzVM.jpg"^^tt:picture, link="http://thecatapi.com/?id=bX5VJKzVM"^^tt:url }
C: ]];
A: Here is a cat picture.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: show me a dog picture
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.thedogapi.dog();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 9, 57) }
C: ]];
C: @com.thecatapi.cat()
C: #[results=[
C:   { id="bX5VJKzVM"^^com.thecatapi:cat, picture_url="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/bX5VJKzVM.jpg"^^tt:picture, link="http://thecatapi.com/?id=bX5VJKzVM"^^tt:url }
C: ]];
C: @com.thedogapi.dog()
C: #[results=[
C:   { id="ZRQ0TYzz6"^^com.thedogapi:dog("Tibetan Terrier"), picture_url="https://cdn2.thedogapi.com/images/ZRQ0TYzz6.jpg"^^tt:picture }
C: ]];
A: Did you mean Get dog pictures?
A: Here is a picture of a Tibetan Terrier.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the latest song by taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")))[1];
====
# recording/a10f2a3037c2cd2f35ebf4784bc28393
U: hi there
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/ae5d0cc31faf431b391116995ea6a54f
U: Tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="rHBQuXLR7h"^^com.icanhazdadjoke:id, text="Why did the cookie cry?\r\nBecause his mother was a wafer so long" }
C: ]];
A: Why did the cookie cry? Because his mother was a wafer so long.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/6420c03f75c9194e50d9c0a8780a6f3c
U: hey, you there?
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/e42fb3a7ebc533a2300d22ad86f5696a
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="lyPZgVn3Le"^^com.icanhazdadjoke:id, text="What did the ocean say to the shore? Nothing, it just waved." }
C: ]];
A: What did the ocean say to the shore? Nothing, it just waved.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/0e3849c646aa29e5b3a426f05c8908e1
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to rock
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify.add_song_to_playlist(playlist="rock", song=id);
====
# recording/f812a986565de71885b0ce06b3e61502
U: play taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/5f481bba0cc2a0bd79db8446255ffd80
U: can you tell me about soccer too?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.goal_smart.fixtures();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
C: @com.goal_smart.fixtures();
A: Did you mean Get soccer fixtures?
A: What team do you want out check out?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(team_id);
AT: @com.goal_smart.fixtures();
U: chelsea
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.goal_smart.fixtures(team_id=null^^com.goal_smart:soccer_team("chelsea"));
====
# recording/0fd2bcf6fd61643dcf0dcc7632ac3c1d
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/0be9132121c6ac06cabf7617a080e7b9
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/59bfa4f16693184528dd3e229e314ad2
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 82.2 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast for next week?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 60.1 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Did you mean get the weather forecast?
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 60.1 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast for this weekend
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum saturday));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21.6C, wind_speed=2.8mps, humidity=67.8, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-08-07T18:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Did you mean get the weather on start of day on Saturday?
A: It will be cloudy next Saturday at 11:00 AM in Palo Alto, California and the temperature will be 70.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/b38326ed6d93fe3d8b63325b2199ff0d
U: add this song to playlist z
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="z", song=id);
====
# recording/2519187c18544c754d76fb1b91544558
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a9d2d62afc5f9526d74a8e1563c7f434
U: what's the weather next week in palo alto?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location("palo alto"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Did you mean Get the the weather on the end of this week in palo alto?
A: It will be cloudy on next Sunday at 5:00 AM in Palo Alto, California and the temperature will be 58.6 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's my name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
A: Your name is tony.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's your name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where am i
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
A: Sorry, I cannot access your location in this version of genie.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: i am in palo alto
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("palo alto"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
A: I set your current location to Palo Alto, California.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
A: My creators are mostly at Stanford. I'm an open-source assistant in the cloud.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where am i?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
A: Sorry, I cannot access your location in this version of genie.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=31.3C, wind_speed=2.2mps, humidity=32.3, cloudiness=42.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 88.3 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/d893ccb67346625cf250ec62a974e620
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/56ca29accadadcd1e19de4c9be2a7813
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/163b76dc0e8096b67b7e89871d501b91
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b68c8660d885018992451f92391b631c
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: i like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added STAY (with Justin Bieber) to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/680018ce835fe24f5308f14a4b665506
U: play a good podcast on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6f07bdd793e0834f419e59fef3b93839
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/86e510936beed3b1afae9bf319dcf005
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/082da9896b7ea27e3ac46f7b19efbd69
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/fca3c63814637c135094754595c2f237
U: play the cure
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/a774e3e34bc609ed8607c25e9950051c
U: play madonna
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("madonna")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6tbjWDEIzxoDsBA1FuhfPW"^^org.thingpedia.media-source:artist("Madonna")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:22sLuJYcvZOSoLLRYev1s5"^^org.thingpedia.media-source:playable("Material Girl"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1z3ugFmUKoCzGsI6jdY4Ci"^^org.thingpedia.media-source:playable("Like 1 Prayer"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3850dYVgOFIXJh5U4BFEWH"^^org.thingpedia.media-source:playable("Hung Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2n5y6cRV8vr6mJcuNCu2ce"^^org.thingpedia.media-source:playable("Dress You Up / Into The Groove - Live"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7uPaXeJ7a1E8OUzXzgfnNR"^^org.thingpedia.media-source:playable("Express Yourself - MDNA World Tour / Live 2012"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1ZPlNanZsJSPK5h9YZZFbZ"^^org.thingpedia.media-source:playable("Like 1 Virgin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1oHClQEgDmmbcEx12Kc5nZ"^^org.thingpedia.media-source:playable("4 Minutes (feat. Justin Timberlake & Timbaland)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m0M7YqCy4lXfedh18qd8N"^^org.thingpedia.media-source:playable("Into the Groove"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27QvYgBk0CHOVHthWnkuWt"^^org.thingpedia.media-source:playable("Vogue"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6r8k1vznHrzlEKYxL4dZEe"^^org.thingpedia.media-source:playable("La Isla Bonita"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=34];
A: I played music by Madonna on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/039c95a9ea87ab7e7b8d1f055160d4fa
U: time
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(19, 58, 10) }
C: ]];
A: Right now, it's 12:58 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: news?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/914869702b865d3f0a048d2badf80036
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play artist the cure
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
A: Did you mean get music by cure and then play the id on Spotify?
A: I played music by The Cure on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/bacf90e789f94dc838c05828bb88671c
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/80c7c5854ebb7d9964311ca86222bb3c
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/8ac3856f063252eb39cb96fc22226bb4
U: play some tsol
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("tsol")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:5XwDirrHPY6KCzScs3rKGr"^^org.thingpedia.media-source:artist("Tila Tsoli")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3mT3nS7uqcSrw7rPvHs8oq"^^org.thingpedia.media-source:playable("Bimbo Doll"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Bimbo Doll on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some dead kennedy's
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("dead kennedy 's")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/5921ce13377017c5c952d82f1cbd3b70
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/3335c5d678fdfe4a8577df4602c4462a
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/b70ee66c558d96d33455282ad8e472ba
U: play the most popular song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.song())[1] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played STAY (with Justin Bieber) on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/1f796479b17cbb0772301e96b3eb6744
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/bf985db56108dbe6b20308316f7e0239
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play archair expert
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cprB7E9cUJNu5yaLWw85G"^^org.thingpedia.media-source:playable("Armchair Expert"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get music that has name archair expert and then play the id on Spotify?
A: I played Armchair Expert on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play armchair podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "armchair" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cprB7E9cUJNu5yaLWw85G"^^org.thingpedia.media-source:playable("Armchair Expert"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "armchair")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:6kAsbP8pxwaU2kPibKTuHE"^^org.thingpedia.media-source:playable("Armchair Expert with Dax Shepard"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get podcast that has name armchair and then play the id on Spotify?
A: I played Armchair Expert with Dax Shepard on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cprB7E9cUJNu5yaLWw85G"^^org.thingpedia.media-source:playable("Armchair Expert"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "armchair")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:6kAsbP8pxwaU2kPibKTuHE"^^org.thingpedia.media-source:playable("Armchair Expert with Dax Shepard"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the capital of malasyia
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capital of malasyia");
====
# recording/0a24d6bf869129829e74956c8baa3611
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/59341f86458cb5a548aad557e47b1eb7
U: create new playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: secondhand
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="secondhand");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="secondhand")
C: #[results=[
C:   { name="secondhand", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist for you named secondhand.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play secondhand serenade
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "secondhand serenade" => @org.thingpedia.media-player.play(playable=id);
====
# recording/a0d66813c9f8d20acb93adb3cbc0ff86
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[new Date("2021-09-01T15:51:00.000Z")]) => @org.thingpedia.builtin.thingengine.builtin.say(message="hello world")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(22, 52, 57) }
C: ]];
A: Right now, it's 3:52 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather in san francisco?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("san francisco"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[new Date("2021-09-01T15:51:00.000Z")]) => @org.thingpedia.builtin.thingengine.builtin.say(message="hello world")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(22, 52, 57) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.7790262, -122.419906, "San Francisco, California"))
C: #[results=[
C:   { temperature=17C, wind_speed=8.1mps, humidity=68.5, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.7790262, -122.419906, "San Francisco, California") }
C: ]];
A: It is cloudy today in San Francisco, California and the temperature is 62.6 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather there tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location(37.7790262, -122.419906, "San Francisco, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[new Date("2021-09-01T15:51:00.000Z")]) => @org.thingpedia.builtin.thingengine.builtin.say(message="hello world")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(22, 52, 57) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.7790262, -122.419906, "San Francisco, California"))
C: #[results=[
C:   { temperature=17C, wind_speed=8.1mps, humidity=68.5, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.7790262, -122.419906, "San Francisco, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.7790262, -122.419906, "San Francisco, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=5.3mps, humidity=85.3, cloudiness=56.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-09-02T14:00:00.000Z"), location=new Location(37.7790262, -122.419906, "San Francisco, California") }
C: ]];
A: Did you mean get the weather forecast in San Francisco, California?
A: It will be cloudy tomorrow at 7:00 AM in San Francisco, California and the temperature will be 57.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's a good restaurant in san francisco mission district
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("san francisco mission district");
====
# recording/546c213bb1bd8e1749841930d2c8cf16
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b6350cdc69138e1a61893f1bead0e2af
U: add this song to my spotify library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/3d2f0caaac065a28d3bd0a2f43241bf6
U: play baba riley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "baba riley" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Baba O'Riley on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/4894d95d420e9a1fa51aa9c2f425fb6a
U: play music by artist the cure
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
A: I played music by The Cure on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 82.2 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: and the forecast for next week
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 60.1 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5fd4b686facffeaa366fa55972817bea
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/de3aba27dd5a768b8ed2374acfaf4e58
U: ask yelp good chinese
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter contains(cuisines, null^^com.yelp:restaurant_cuisine("chinese"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter contains(cuisines, "chinese"^^com.yelp:restaurant_cuisine("Chinese"))
C: #[results=[
C:   { id="uVploy81jeEvlvPTA6cgjw"^^com.yelp:restaurant("Mandarin Roots"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AnLZUIDEHJsFcEMyzoggzQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/mandarin-roots-palo-alto-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "asianfusion"^^com.yelp:restaurant_cuisine("Asian Fusion"), "tapasmallplates"^^com.yelp:restaurant_cuisine("Tapas/Small Plates")], price=enum moderate, rating=4, review_count=555, geo=new Location(37.42028, -122.13601, "3345 El Camino Real, Palo Alto, CA 94306"), phone="+16505658868"^^tt:phone_number },
C:   { id="w17EBwOBXKaYIiGf7LTD9Q"^^com.yelp:restaurant("Jing Jing Chinese Gourmet"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/fsjBluohoq0fQYUAN8fD4g/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/jing-jing-chinese-gourmet-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=3.5, review_count=403, geo=new Location(37.44514, -122.16306, "443 Emerson St, Palo Alto, CA 94301"), phone="+16503286885"^^tt:phone_number },
C:   { id="ZimdCe2xCAOOZjt1aQAMvg"^^com.yelp:restaurant("Chef Chu's"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/8Ne4RN6pc5NN-w2PRx2KMA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/chef-chus-los-altos?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4, review_count=1864, geo=new Location(37.4006, -122.11367, "1067 N San Antonio Rd, Los Altos, CA 94022"), phone="+16509482696"^^tt:phone_number },
C:   { id="aLXs35royGdxEtfRmesaTw"^^com.yelp:restaurant("Green Elephant Gourmet"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/HUD3IHMYSQMUPHv7pTN2nA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/green-elephant-gourmet-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "burmese"^^com.yelp:restaurant_cuisine("Burmese")], price=enum moderate, rating=3.5, review_count=286, geo=new Location(37.4187397433899, -122.109109532186, "3950 Middlefield Rd, Palo Alto, CA 94303"), phone="+16504947391"^^tt:phone_number },
C:   { id="LjI8BVHVg5vNEHYuRyxtHw"^^com.yelp:restaurant("Peking Duck"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/0kzgVrhDcpPDAaeuef1y8g/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/peking-duck-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=3, review_count=352, geo=new Location(37.428471817387894, -122.14277685914219, "151 S California Ave, Palo Alto, CA 94306"), phone="+16503219388"^^tt:phone_number },
C:   { id="WWyaK9oskNOpjCsO6MA7Pw"^^com.yelp:restaurant("P.F. Chang's"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/SR0mlHWyUwVBqxBBbeGRaw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/p-f-changs-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "asianfusion"^^com.yelp:restaurant_cuisine("Asian Fusion"), "gluten_free"^^com.yelp:restaurant_cuisine("Gluten-Free")], price=enum moderate, rating=2.5, review_count=777, geo=new Location(37.4436714574102, -122.168239921338, "900 Stanford Shopping Ctr, Bldg W, Palo Alto, CA 94304"), phone="+16503301782"^^tt:phone_number },
C:   { id="OFUQHchaV2uqjJmO-EuVlA"^^com.yelp:restaurant("Veggie Garden"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/lXh0FX6kfTa7IXuGew5etQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/veggie-garden-mountain-view?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan"), "vegetarian"^^com.yelp:restaurant_cuisine("Vegetarian"), "chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4.5, review_count=499, geo=new Location(37.399226131236, -122.1086273955, "2464 W El Camino Real, Ste C, Mountain View, CA 94040"), phone="+16509616888"^^tt:phone_number },
C:   { id="cm8oHti0SIPPqR8PcmcSvA"^^com.yelp:restaurant("Garden Fresh"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/EnKogtsi9rjeTVAbGjTY7Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/garden-fresh-mountain-view-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "noodles"^^com.yelp:restaurant_cuisine("Noodles"), "soup"^^com.yelp:restaurant_cuisine("Soup")], price=enum moderate, rating=4, review_count=1333, geo=new Location(37.387904, -122.089053, "1245 W El Camino Real, Mountain View, CA 94040"), phone="+16502541688"^^tt:phone_number },
C:   { id="zg83ulOQw1m18kLoNHcXUA"^^com.yelp:restaurant("Phil's Kitchen"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/rpCFoxuH71QLwDoveRY9Hg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/phils-kitchen-menlo-park?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "hawaiian"^^com.yelp:restaurant_cuisine("Hawaiian"), "bbq"^^com.yelp:restaurant_cuisine("Barbeque")], price=enum cheap, rating=4, review_count=510, geo=new Location(37.4536749590389, -122.184342294931, "625 Oak Grove Ave, Unit B, Menlo Park, CA 94025"), phone="+16505614296"^^tt:phone_number },
C:   { id="IccyNXafP876EY6vkHetbg"^^com.yelp:restaurant("MP Mongolian BBQ"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/MBjcL710bbS2OLNOjvlwvQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/mp-mongolian-bbq-menlo-park?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["buffets"^^com.yelp:restaurant_cuisine("Buffets"), "chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4, review_count=308, geo=new Location(37.451705, -122.178848, "700 El Camino Real, Ste 170, Menlo Park, CA 94025"), phone="+16508531118"^^tt:phone_number }
C: ]]
C: #[count=34];
A: I see Mandarin Roots, Jing Jing Chinese Gourmet, and Chef Chu's. They're moderate restaurants with Chinese food.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: smartnews
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/4482295ba8b48bf198df79341733fe58
U: play don't stop believing
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "don't stop believing" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "don't stop believing")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:4bHsxqR3GMrXTxEPLuK5ue"^^org.thingpedia.media-source:playable("Don't Stop Believin'"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Don't Stop Believin' on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: create playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist(name="oval");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "don't stop believing")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:4bHsxqR3GMrXTxEPLuK5ue"^^org.thingpedia.media-source:playable("Don't Stop Believin'"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="oval")
C: #[results=[
C:   { name="oval", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist named oval.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="oval", song=id);
====
# recording/2f6d6fb318ad713b79b4d14b9d11e6a2
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify.add_item_to_library(playable=id);
====
# recording/7221dc45f037087f578205a9648c8ed9
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/cbc00db36f2c9f377efa926556fa20e1
U: like song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/b122e9f8ffd82b81d399ebfe43e6344a
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/dec64aeb440113f1794b22a29fba40a2
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
====
# recording/12e23096f3aa7bab9827944c05e1e73c
U: play chopin
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("chopin")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/840ddf3c20683989ccd1eb686b29567d
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5a5ddd653f49cc0fcf5ad3724774fc13
U: play playlist cyn piano
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "cyn piano" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "cyn piano")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:7yrp8Jmaj5pfzLYXPEhb5D"^^org.thingpedia.media-source:playable("Cyn Piano"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Cyn Piano on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play playlist this is nine inch nails
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "cyn piano")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:7yrp8Jmaj5pfzLYXPEhb5D"^^org.thingpedia.media-source:playable("Cyn Piano"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Did you mean get playlist that has name this is 9 inch nails and then play the id on Spotify?
A: Sorry, there are no playlist matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b60f8e1fa75e984f449d8f444fd98738
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/80421acf49fcbe6cae8830ffdbb1c1aa
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/6ca83d2cdbedc5808b3c89729919ae81
U: play five songs
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song()[1 : 5] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song()[1 : 5] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6PQ88X9TkUIAUIZJHW2upE"^^org.thingpedia.media-source:playable("Bad Habits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the first 5 songs on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/2f7925b0958d14964a54947c01d3dcb4
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: i like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/fe19884cc3dae50060be994990f78c86
U: play music by composer elton john
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("elton john")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3PhoLpVuITZKcymswpck5b"^^org.thingpedia.media-source:artist("Elton John")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3gdewACMIVMEWVbyb8O9sY"^^org.thingpedia.media-source:playable("Rocket Man (I Think It's Going To Be 1 Long, Long Time)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2TVxnKdb3tqe1nhQWwwZCO"^^org.thingpedia.media-source:playable("Tiny Dancer"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1jDJFeK9x3OZboIAHsY9k2"^^org.thingpedia.media-source:playable("I'm Still Standing"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5Wj1rJnCLpMHdLaxsFtJLs"^^org.thingpedia.media-source:playable("Bennie And The Jets - Remastered 2014"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:38zsOOcu31XbbYj9BIPUF1"^^org.thingpedia.media-source:playable("Your Song"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7HW5WIw7ZgZORCzUxv5gW5"^^org.thingpedia.media-source:playable("Don't Go Breaking My Heart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6WCeFNVAXUtNczb7lqLiZU"^^org.thingpedia.media-source:playable("Crocodile Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4IRHwIZHzlHT1FQpRa5RdE"^^org.thingpedia.media-source:playable("Goodbye Yellow Brick Road - Remastered 2014"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:23l1kVpqMVREiwU1YAlcr4"^^org.thingpedia.media-source:playable("I Guess That's Why They Call It The Blues"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:12yHvSYFXI7PGzNecUvIDu"^^org.thingpedia.media-source:playable("Saturday Night’s Alright (For Fighting) - Remastered 2014"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=43];
A: I played music by Elton John on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add to my playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
====
# recording/97a67e4c84147110ecb9b71fdb8bcfb5
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5e0260f6462b5e10d4934b0df43b1eba
U: play baba o'riley by the who
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("who")) && id =~ "baba o 'riley" => @org.thingpedia.media-player.play(playable=id);
====
# recording/c8827b6892af7d63a9fe0a2f9d3d450a
U: like this song on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/e376921e0221bc3dfea90dfc0c622436
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/fb6a768d27a4d13a8d18fc8f7c05967e
U: news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
A: Sorry, the smartnews service is unavailable. Please try again later.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what's your name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's my name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
A: Your name is tony.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: where do i live?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
A: Did you mean Get the my current location?
A: Sorry, I cannot access your location in this version of genie.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/d2e7fabc96c48059db3f609a61870f99
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3535169b1cd8f4c07af668b2997aa859
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
A: Right now, it's 6:25 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 82.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some reggae
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1wIn4YjJl6OpcMUn5McoxU"^^org.thingpedia.media-source:playable("Mi Gente"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6KErFkRhU1gbVQR8waxl3W"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3HV5bB2lOkBNCWJdqR5hRZ"^^org.thingpedia.media-source:playable("Me Gustas Tu"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JgADdEmaGrh9obb2ke3xi"^^org.thingpedia.media-source:playable("Bajo La Luna"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7IWGXK4ayKVfFG29bo7qYa"^^org.thingpedia.media-source:playable("No Es Justo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1p8TANEe8KLm1AFZcUp8rc"^^org.thingpedia.media-source:playable("Sin Compromiso"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
A: Did you mean get reggae music and then play the id on Spotify?
A: I played reggae music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1wIn4YjJl6OpcMUn5McoxU"^^org.thingpedia.media-source:playable("Mi Gente"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6KErFkRhU1gbVQR8waxl3W"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3HV5bB2lOkBNCWJdqR5hRZ"^^org.thingpedia.media-source:playable("Me Gustas Tu"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JgADdEmaGrh9obb2ke3xi"^^org.thingpedia.media-source:playable("Bajo La Luna"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7IWGXK4ayKVfFG29bo7qYa"^^org.thingpedia.media-source:playable("No Es Justo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1p8TANEe8KLm1AFZcUp8rc"^^org.thingpedia.media-source:playable("Sin Compromiso"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the capitol of the united states
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capitol of the united states");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1wIn4YjJl6OpcMUn5McoxU"^^org.thingpedia.media-source:playable("Mi Gente"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6KErFkRhU1gbVQR8waxl3W"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3HV5bB2lOkBNCWJdqR5hRZ"^^org.thingpedia.media-source:playable("Me Gustas Tu"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JgADdEmaGrh9obb2ke3xi"^^org.thingpedia.media-source:playable("Bajo La Luna"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7IWGXK4ayKVfFG29bo7qYa"^^org.thingpedia.media-source:playable("No Es Justo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1p8TANEe8KLm1AFZcUp8rc"^^org.thingpedia.media-source:playable("Sin Compromiso"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.bing.web_search(query="capitol of the united states")
C: #[results=[
C:   { query="capitol of the united states", title="United States Capitol - Wikipedia", description="The United States Capitol, often called The Capitol or the Capitol Building, is the meeting place of the United States Congress and the seat of the legislative branch of the U.S. federal government.It is located on Capitol Hill at the eastern end of the National Mall in Washington, D.C. Though no longer at the geographic center of the federal district, the Capitol forms the origin point for ...", link="https://en.wikipedia.org/wiki/United_States_Capitol"^^tt:url },
C:   { query="capitol of the united states", title="List of capitals in the United States - Wikipedia", description="States (highlighted in blue) that have changed their capital city at least once. This is a list of capital cities of the United States, including places that serve or have served as federal, state, insular area, territorial, colonial and Native American capitals. Washington, D.C. has been the federal capital of the United States since 1800.", link="https://en.wikipedia.org/wiki/List_of_capitals_in_the_United_States"^^tt:url },
C:   { query="capitol of the united states", title="U.S. Capitol Building | Architect of the Capitol", description="The United States Capitol Building is located in Washington, D.C., at the eastern end of the National Mall on a plateau 88 feet above the level of the Potomac River, commanding a westward view across the U.S. Capitol Reflecting Pool to the Washington Monument 1.4 miles away and the Lincoln Memorial 2.2 miles away.", link="https://www.aoc.gov/explore-capitol-campus/buildings-grounds/capitol-building"^^tt:url },
C:   { query="capitol of the united states", title="United States Capitol | Architecture, History, United ...", description="United States Capitol, meeting place of the United States Congress and one of the most familiar landmarks in Washington, D.C. Possibly the most culturally and historically important building in the United States, it has been home to Congress since 1800. The following year Thomas Jefferson became the first president to be sworn in on its steps.", link="https://www.britannica.com/topic/United-States-Capitol"^^tt:url },
C:   { query="capitol of the united states", title="What Is the Capital of the USA? - WorldAtlas", description="The capital city of the United States of America is Washington, D.C., and can be referred to formally as the District of Columbia or more informally as D.C. or Washington. In 2017, the city had a population of 6,131,977 and an approximate size of 68.34 square miles. The city was founded after the American Revolution and named after Founding Father and first President of the United States of ...", link="https://www.worldatlas.com/articles/what-is-the-capital-of-the-united-states-of-america.html"^^tt:url }
C: ]];
A: I found United States Capitol - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what is the capital of the united states
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capital of the united states");
====
# recording/d507a290e8550a945dc76cf353b03379
U: play playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "oval" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "oval")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3a3xrK5RMXlQ14qPMss3fg"^^org.thingpedia.media-source:playable("oval"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played oval on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play playlist This is Nine Inch Nails
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "oval")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3a3xrK5RMXlQ14qPMss3fg"^^org.thingpedia.media-source:playable("oval"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Did you mean get playlist that has name this is 9 inch nails and then play the id on Spotify?
A: Sorry, there are no playlist matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: create playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "oval")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3a3xrK5RMXlQ14qPMss3fg"^^org.thingpedia.media-source:playable("oval"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: One
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="one");
====
# recording/0c035a374a3e758f6a6ca47e8cc03136
U: play favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/76d6aee60a8292aa375103cbca37d211
U: play latest podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.show())[1] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Sorry, there are no shows matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: play whiteness podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get podcast that has name whiteness and then play the id on Spotify?
A: I played Whiteness at Work on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play playlist secondhand
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "secondhand" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:0BfFoqrSMr5ti6mpSHtgto"^^org.thingpedia.media-source:playable("secondhand"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played secondhand on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:0BfFoqrSMr5ti6mpSHtgto"^^org.thingpedia.media-source:playable("secondhand"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: create a new playlist gizmo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist(name="gizmo");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:0BfFoqrSMr5ti6mpSHtgto"^^org.thingpedia.media-source:playable("secondhand"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="gizmo")
C: #[results=[
C:   { name="gizmo", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean create a new playlist with name gizmo?
A: I created a new playlist for you named gizmo.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add current song to gizmo playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="gizmo", song=id);
====
# recording/cea189516ff0b7fd0a2b64df281521b6
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/e303b8805f67d2379158fc6ae64b60c4
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/84252a03b43c2c5830472c52c7164413
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3a445da4e84e21074753fad229e00305
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[]]
C: #[error=enum no_song_playing];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play my favorite
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/887aa58786f9be544975ea9575f1fe92
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(0, 39, 9) }
C: ]];
A: Right now, it's 5:39 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather in berkeley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("berkeley"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(0, 39, 9) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.8753497, -122.23963364918777, "University of California, Berkeley, North Street"))
C: #[results=[
C:   { temperature=16.3C, wind_speed=5.8mps, humidity=65, cloudiness=3.9, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.8753497, -122.23963364918777, "University of California, Berkeley, North Street") }
C: ]];
A: It is sunny today in University of California, Berkeley, North Street and the temperature is 61.3 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather going to be like tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location(37.8753497, -122.23963364918777, "University of California, Berkeley, North Street"));
====
# recording/a7e10ebfd2f957aca18527b8d921fab4
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/ce813de29b16a97119f05ba51a557994
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.resume();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: resume
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.resume();
====
# recording/20dd651313b7b2fdd01d9bf40ff78425
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c1cf3ff2a9748091d1a0866c57349a57
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/eebc7b4f87c0588dfbfbece03f7dbbac
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/a42096c2ca88251c2e444d48ebee488f
U: save this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/156989012b643e22571437d876582358
U: what's the weather in tahoe
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("tahoe"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(43.6387671, -79.6102134, "Tahoe, Mississauga Transitway"))
C: #[results=[
C:   { temperature=18.2C, wind_speed=2.3mps, humidity=63.6, cloudiness=10.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(43.6387671, -79.6102134, "Tahoe, Mississauga Transitway") }
C: ]];
A: It is sunny today in Tahoe, Mississauga Transitway and the temperature is 64.8 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is the capital of the united states
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capital of the united states");
====
# recording/149a6480fd6f8f13e7c342488fe96297
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/993e2ad4e40e2ab22b14cd612c688019
U: play a podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play my favorite music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/12e4ddc0b5220f06a92464d93728d75d
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/2d38b4844808752efff5e8d5598f0ff4
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
====
# recording/4b5ff826c19f37417aa19ec2abe0dd05
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/8dd63be2cc4b78f90c25c81f9e67c071
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/5859ea7560933e850a9c8caf2257dd60
U: play podcast azaria
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "azaria" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played The Azarias Capital Podcast on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: stop podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b8b36ae8868ba5807e79ff747cf43dc3
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: previous song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the previous song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: weather today
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.7C, wind_speed=3.3mps, humidity=45.9, cloudiness=6.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 74.7 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather tomorrow
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.7C, wind_speed=3.3mps, humidity=45.9, cloudiness=6.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=1.4mps, humidity=86.9, cloudiness=31.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-06T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 59.2 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/34ac7e5ae59f3cf992c7527849c79903
U: play some dead kennedys
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("dead kennedys")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:30U8fYtiNpeA5KH6H87QUV"^^org.thingpedia.media-source:artist("Dead Kennedys")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OuNnwnNQyWrF47pthWxNb"^^org.thingpedia.media-source:playable("Holiday in Cambodia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5szJ8SMwQVEvvdk65w6M6g"^^org.thingpedia.media-source:playable("California Uber Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6M4yg3BknyHmRnsvlkuHD5"^^org.thingpedia.media-source:playable("Police Truck"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gJ4X2ojTykeaoDEDEE1Xj"^^org.thingpedia.media-source:playable("Too Drunk to Fuck"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LF13LC1wG5XqZ2js2yC9O"^^org.thingpedia.media-source:playable("Nazi Punks Fuck Off"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1zLCRp9Co721leiKVD2dMY"^^org.thingpedia.media-source:playable("Soup is Good Food"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3PraFkxThh80PiD685IzWC"^^org.thingpedia.media-source:playable("Kill the Poor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6XDIdtt7sugfe7UHYIDWXW"^^org.thingpedia.media-source:playable("Moon Over Marin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4AjNTrJmgry75yiihCMOP8"^^org.thingpedia.media-source:playable("I Fought the Law"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=49];
A: I played music by Dead Kennedys on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/8aeb38c42f182385d4446b756c3ba791
U: play baba riley by the who
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("the who")) && id =~ "baba riley" => @org.thingpedia.media-player.play(playable=id);
====
# recording/bcb04dffae19c28141b3810d27d53938
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[]]
C: #[error=enum no_song_playing];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0642bb49d172649be6d2d44124aaef0b
U: like this song on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/647b00d84d5e47510e7bd6daf0046524
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/8b4e0e984ad058aebde555d1d268caba
U: play song thriller
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter id =~ "thriller" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter id =~ "thriller")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7azo4rpSUh8nXgtonC6Pkq"^^org.thingpedia.media-source:playable("Thriller"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Thriller on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0d8dcf71ab48b069958ca30115e80aec
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/14b3840307339dfa2925dc4f2b88c4a5
U: play tony's playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "tony 's" => @org.thingpedia.media-player.play(playable=id);
====
# recording/cbabe7220874e057e203de8bfdc7d90e
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/51a6ab4c29b53852b64b59e5eec4fbac
U: play favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/a1630899011f061abe54cf7dd556d160
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/58e4df5becd973459db1aaa0158e17f3
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/e3a7a76acf15898e9bef32a5d2325a08
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3a4ceecf47cb36dc6f995e2d6e400c45
U: play a podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: Did you mean stop playing?
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play a podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get shows and then play the id on Spotify?
A: I played shows on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c35486e24085b68bb43c11df3ae2a84e
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/886c7b089f24f6c0f809f6db70c8a5cc
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/213c0cda6fc19685141f558eda6b63e9
U: play soundtrack gladiator
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "soundtrack gladiator" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "soundtrack gladiator")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:playable("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean Get music that has name soundtrack gladiator and then play the id on Spotify?
A: I played Now We Are Free - From "Gladiator" Soundtrack on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "soundtrack gladiator")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:playable("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="oval", song=id)
C: #[results=[
C:   { playlist="oval", song="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:song("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added a song to a playlist for you named oval named Now We Are Free - From "Gladiator" Soundtrack.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: stop music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "soundtrack gladiator")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:playable("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="oval", song=id)
C: #[results=[
C:   { playlist="oval", song="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:song("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5d6c36f9ed5d7dda55d3ed6740574b41
U: Like currently playing song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/a338ebc83068b79481cf8209de4a747d
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/80f36f91fdfdb19354ce58cafd38d9cf
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to playlist gizmo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="gizmo", song=id);
====
# recording/2784ee32b4115fa5fd60df67fc221189
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/d8ae69289fc61962c4763a57dde8a487
U: play spotify liked songs
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/4080688aed7ccf1bb192adc2e2849f07
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/a076fcf3b5c19931e99dd3239ee4b202
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/80bc04a88f005844acfe9bf2df635f87
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/40d01ce36a0415ee2e5a5d1c6e9f478f
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added STAY (with Justin Bieber) to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/9517aaad7dedbeca9331d925e7fad957
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/2e8ebf70ad42dd8b66a965df8db0eec9
U: play spanish english podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "spanish english" => @org.thingpedia.media-player.play(playable=id);
====
# recording/9af7699bc228f967f9fe91bdbb69e256
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
====
# recording/22558917f992199c7ec4c009c78bdabe
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c21f1f2d3c330286f90269e302120c3d
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/e0d329083ad82a93fbc8e51681c4d45e
U: play album Freedom of Choice by Devo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.album() filter contains(artists, null^^org.thingpedia.media-source:artist("devo")) && id =~ "freedom of choice" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:0UKfenbZb15sqhfPC6zbt3"^^org.thingpedia.media-source:artist("DEVO")) && id =~ "freedom of choice")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6UsP4NQ9K4L4Nqxj0Qis41"^^org.thingpedia.media-source:playable("Freedom Of Choice"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Freedom Of Choice on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like the album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/e172491e7a7863ac381ceba55285aa04
U: Play come down to us by burial.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("burial")) && id =~ "come down to us" => @org.thingpedia.media-player.play(playable=id);
====
# recording/dc8d1c30b3af34e7d91872e7573b07dd
U: Play still alive.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "still alive" => @org.thingpedia.media-player.play(playable=id);
====
# recording/1e3b70ac03a39cf4992fa930cbe1d873
U: play some punk rock
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "punk rock") => @org.thingpedia.media-player.play(playable=id);
====
# recording/054e7d7e0f2814ad710eab41e41b0687
U: Play some pop rock.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "pop rock") => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "pop rock") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5zFglKYiknIxks8geR8rcL"^^org.thingpedia.media-source:playable("Beautiful Mistakes (feat. Megan Thee Stallion)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3JvrhDOgAt6p7K8mDyZwRd"^^org.thingpedia.media-source:playable("Riptide"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0GO8y8jQk1PkHzS31d699N"^^org.thingpedia.media-source:playable("Tongue Tied"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2UbVnbE5FH6008mAm6Mmgw"^^org.thingpedia.media-source:playable("Run"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2iUmqdfGZcHIhS3b9E9EWq"^^org.thingpedia.media-source:playable("Everybody Talks"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7w87IxuO7BDcJ3YUqCyMTT"^^org.thingpedia.media-source:playable("Pumped Up Kicks"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE2iI43OZnszFLuLtvvmg"^^org.thingpedia.media-source:playable("Classic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4HlFJV71xXKIGcU3kRyttv"^^org.thingpedia.media-source:playable("Hey, Soul Sister"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3d8y0t70g7hw2FOWl9Z4Fm"^^org.thingpedia.media-source:playable("Ophelia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:53BHUFdQphHiZUUG3nx9zn"^^org.thingpedia.media-source:playable("Bang!"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=41];
A: I played pop rock music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Turn it off.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.stop();
====
# recording/b499d6f342dc7de4b4ed81ea252a1a52
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Did you mean get music by slayer and then play the id on Spotify?
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: Play some against me.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("against me")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/aff9194ed397b56a8aea1b66d87a4ef4
U: play some devo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("devo")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:0UKfenbZb15sqhfPC6zbt3"^^org.thingpedia.media-source:artist("DEVO")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4sscDOZCkbLSlDqcCgUJnX"^^org.thingpedia.media-source:playable("Whip It"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1RG1Pz45nlYNHka7JioyOT"^^org.thingpedia.media-source:playable("Uncontrollable Urge"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2vFaBeQqDVZW9SiJeiM4LU"^^org.thingpedia.media-source:playable("Gut Feeling / (Slap Your Mammy)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rNXiNb8IN78GL6cx9VsP7"^^org.thingpedia.media-source:playable("Girl U Want - 2009 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5FzBxhIsZBFXDTVGWtV4IQ"^^org.thingpedia.media-source:playable("(I Can't Get No) Satisfaction"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:03YadWiNth3S5n3gD1zQGB"^^org.thingpedia.media-source:playable("Step Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3bGG7jaMbcx8JDl3gLUvo7"^^org.thingpedia.media-source:playable("Mongoloid"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music by DEVO on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/e4663f9dc90d0a77ef6c1f0986e2881e
U: shuffle my electric candy playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_shuffle(shuffle=enum on);
UT: @org.thingpedia.media-source.playlist() filter id =~ "electric candy" => @org.thingpedia.media-player.play(playable=id);
====
# recording/588bdf859a842c3dfcde893419d4df81
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/53581e4d339336ba24b103918cc857f0
U: Cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/ecc7b1d46313c83dbfd02d98184b083e
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/35aeecfc1d5c014a4d1cbfe2b59f32a4
U: Play some songs about cats.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter contains~(genres, "cats") => @org.thingpedia.media-player.play(playable=id);
====
# recording/e5eb78ea2f9e19a329d2d07dc292727e
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added Angel Of Death to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: Did you mean get my favorites and then play the id on Spotify?
A: I played your favorites on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some krs-one
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("krs-one")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2gINJ8xw86xawPyGvx1bla"^^org.thingpedia.media-source:artist("KRS-One")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5xXL4i9L2ZbKBtENNh8fWY"^^org.thingpedia.media-source:playable("Step into 1 World (Rapture's Delight)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0snDRsjNRMJhm7SVja8l6J"^^org.thingpedia.media-source:playable("MC's Act Like They Don't Know"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JPCZLbqNBonKhC53JPu4A"^^org.thingpedia.media-source:playable("1 Friend"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjRkRZ9N9blrca0f0UzeF"^^org.thingpedia.media-source:playable("Outta Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0dupEkAq7v5mTay6lJBvRx"^^org.thingpedia.media-source:playable("I Can't Wake Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7q0xO3uiDpfqyyWXNMWspM"^^org.thingpedia.media-source:playable("Hush"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7sBxvRUzQmF7uB2ZFfjzF3"^^org.thingpedia.media-source:playable("Mortal Thought"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BB2d2NGwpSCyrcdcBCpH7"^^org.thingpedia.media-source:playable("The MC"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0i5BepbSYym7AAIqyOhIxL"^^org.thingpedia.media-source:playable("Black Cop"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
A: Did you mean get music by krs-one and then play the id on Spotify?
A: I played music by KRS-One on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2gINJ8xw86xawPyGvx1bla"^^org.thingpedia.media-source:artist("KRS-One")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5xXL4i9L2ZbKBtENNh8fWY"^^org.thingpedia.media-source:playable("Step into 1 World (Rapture's Delight)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0snDRsjNRMJhm7SVja8l6J"^^org.thingpedia.media-source:playable("MC's Act Like They Don't Know"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JPCZLbqNBonKhC53JPu4A"^^org.thingpedia.media-source:playable("1 Friend"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjRkRZ9N9blrca0f0UzeF"^^org.thingpedia.media-source:playable("Outta Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0dupEkAq7v5mTay6lJBvRx"^^org.thingpedia.media-source:playable("I Can't Wake Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7q0xO3uiDpfqyyWXNMWspM"^^org.thingpedia.media-source:playable("Hush"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7sBxvRUzQmF7uB2ZFfjzF3"^^org.thingpedia.media-source:playable("Mortal Thought"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BB2d2NGwpSCyrcdcBCpH7"^^org.thingpedia.media-source:playable("The MC"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0i5BepbSYym7AAIqyOhIxL"^^org.thingpedia.media-source:playable("Black Cop"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2gINJ8xw86xawPyGvx1bla"^^org.thingpedia.media-source:artist("KRS-One")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5xXL4i9L2ZbKBtENNh8fWY"^^org.thingpedia.media-source:playable("Step into 1 World (Rapture's Delight)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0snDRsjNRMJhm7SVja8l6J"^^org.thingpedia.media-source:playable("MC's Act Like They Don't Know"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JPCZLbqNBonKhC53JPu4A"^^org.thingpedia.media-source:playable("1 Friend"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjRkRZ9N9blrca0f0UzeF"^^org.thingpedia.media-source:playable("Outta Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0dupEkAq7v5mTay6lJBvRx"^^org.thingpedia.media-source:playable("I Can't Wake Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7q0xO3uiDpfqyyWXNMWspM"^^org.thingpedia.media-source:playable("Hush"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7sBxvRUzQmF7uB2ZFfjzF3"^^org.thingpedia.media-source:playable("Mortal Thought"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BB2d2NGwpSCyrcdcBCpH7"^^org.thingpedia.media-source:playable("The MC"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0i5BepbSYym7AAIqyOhIxL"^^org.thingpedia.media-source:playable("Black Cop"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added Sound of da Police to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=album);
====
# recording/9d69a379259aa387ee2e97d1757ea87b
U: Set location to Palo Alto, CA.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("palo alto , ca"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
A: I set your current location for you to Palo Alto, California.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: What's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/b75b5eb1666f48ab61846e11505a5989
U: how you been?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some Slayer.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: OK, so play some Slayer.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: Did you mean get music by slayer and then play the id on Spotify?
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Next song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/0ed3b37fab0b60bbc830ed59245b376e
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/0f6d5e44e01db57eee9492217d5ded98
U: create a playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: black squirrel
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist for you named black squirrel.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some atmosphere
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("atmosphere")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
A: Did you mean get music by atmosphere and then play the id on Spotify?
A: I played music by Atmosphere on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add to my black squirrel playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="black squirrel", song=id);
====
# recording/87e7d01042761e0d8ce15f1b2d9a8c6f
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/563fe38f15a3e8876e3e0394bb923727
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/61bda0cc476def89d7b74e6170fd37cb
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: Did you mean get music by slayer and then play the id on Spotify?
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/69b533faf55f166fc68aa1787059f005
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play holiday in cambodia
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "holiday in cambodia" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "holiday in cambodia")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OuNnwnNQyWrF47pthWxNb"^^org.thingpedia.media-source:playable("Holiday in Cambodia"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get music that has name holiday in cambodia and then play the id on Spotify?
A: I played Holiday in Cambodia on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/d4d87574e1fe8e08cc180ccfd25ae5c3
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/bf8d20f1d33792f7f91b473ed3fc23c8
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:15mZo1Kah03g8CTLbSsWrr"^^org.thingpedia.media-source:playable("The Whole of the Moon - 2004 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2mv6GY70UsHiTCGQZ4JfgC"^^org.thingpedia.media-source:playable("Fools Gold - Remastered"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7CZiDzGVjUssMSOXrDNYHL"^^org.thingpedia.media-source:playable("Ticket To Ride - Remastered 2009"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0n9WsxAyHGJ884COiouw1G"^^org.thingpedia.media-source:playable("Vervet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3kR5YXGreVtFOoPDOBKken"^^org.thingpedia.media-source:playable("Delusional Waste"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Tp6nX0n9aDCYmtTYqRamf"^^org.thingpedia.media-source:playable("Telling You - Elo Rub Mix, Feat. Tim Holmes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:25PA58rQD2zi7TxybWV1AD"^^org.thingpedia.media-source:playable("Telling You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2NjNkyvUvlKWXXqAwC0WPj"^^org.thingpedia.media-source:playable("Under My Skin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3c4bJL7mARZvd387847GsC"^^org.thingpedia.media-source:playable("Precious"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played your favorites on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:15mZo1Kah03g8CTLbSsWrr"^^org.thingpedia.media-source:playable("The Whole of the Moon - 2004 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2mv6GY70UsHiTCGQZ4JfgC"^^org.thingpedia.media-source:playable("Fools Gold - Remastered"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7CZiDzGVjUssMSOXrDNYHL"^^org.thingpedia.media-source:playable("Ticket To Ride - Remastered 2009"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0n9WsxAyHGJ884COiouw1G"^^org.thingpedia.media-source:playable("Vervet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3kR5YXGreVtFOoPDOBKken"^^org.thingpedia.media-source:playable("Delusional Waste"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Tp6nX0n9aDCYmtTYqRamf"^^org.thingpedia.media-source:playable("Telling You - Elo Rub Mix, Feat. Tim Holmes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:25PA58rQD2zi7TxybWV1AD"^^org.thingpedia.media-source:playable("Telling You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2NjNkyvUvlKWXXqAwC0WPj"^^org.thingpedia.media-source:playable("Under My Skin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3c4bJL7mARZvd387847GsC"^^org.thingpedia.media-source:playable("Precious"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: Did you mean stop playing?
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some reggae
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:15mZo1Kah03g8CTLbSsWrr"^^org.thingpedia.media-source:playable("The Whole of the Moon - 2004 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2mv6GY70UsHiTCGQZ4JfgC"^^org.thingpedia.media-source:playable("Fools Gold - Remastered"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7CZiDzGVjUssMSOXrDNYHL"^^org.thingpedia.media-source:playable("Ticket To Ride - Remastered 2009"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0n9WsxAyHGJ884COiouw1G"^^org.thingpedia.media-source:playable("Vervet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3kR5YXGreVtFOoPDOBKken"^^org.thingpedia.media-source:playable("Delusional Waste"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Tp6nX0n9aDCYmtTYqRamf"^^org.thingpedia.media-source:playable("Telling You - Elo Rub Mix, Feat. Tim Holmes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:25PA58rQD2zi7TxybWV1AD"^^org.thingpedia.media-source:playable("Telling You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2NjNkyvUvlKWXXqAwC0WPj"^^org.thingpedia.media-source:playable("Under My Skin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3c4bJL7mARZvd387847GsC"^^org.thingpedia.media-source:playable("Precious"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0G2zPzWqVjR68iNPmx2TBe"^^org.thingpedia.media-source:playable("Volando - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:63aj87TQG6F3RVO5nbG2VQ"^^org.thingpedia.media-source:playable("In Da Getto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0fea68AdmYNygeTGI4RC18"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:47EiUVwUp4C9fGccaPuUCS"^^org.thingpedia.media-source:playable("DÁKITI"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2XIc1pqjXV3Cr2BQUGNBck"^^org.thingpedia.media-source:playable("LA NOCHE DE ANOCHE"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1UdoSq3BY0EMa1kUIN2ZXS"^^org.thingpedia.media-source:playable("Ambiente"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=48];
A: Did you mean get reggae music and then play them on Spotify?
A: I played reggae music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play me some of that there cure music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/95d3f80c8357e25a9e6d027ffa69d5b3
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to gizmo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="gizmo", song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="gizmo", song=id)
C: #[results=[
C:   { playlist="gizmo", song="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:song("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added a song to a playlist for you named gizmo with song name STAY (with Justin Bieber).
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id);
====
# recording/d016e147fa16592aa7b574eba8849ef2
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/e993de692ea6dd92b276792d0948ea81
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/04063ee6ebebb7710ae100e548d16496
U: search the web for black squirrels
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="black squirrels");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.bing.web_search(query="black squirrels")
C: #[results=[
C:   { query="black squirrels", title="Black squirrel - Wikipedia", description="Black squirrels are a melanistic subgroup of squirrels with black coloration on their fur. The phenomenon occurs with several species of squirrels, although it is most frequent with the eastern gray squirrel (Sciurus carolinensis) and the fox squirrel (Sciurus niger).Black morphs of the eastern gray and fox squirrels are the result of an abnormal pigment gene.", link="https://en.wikipedia.org/wiki/Black_squirrel"^^tt:url },
C:   { query="black squirrels", title="Black Squirrels: Are They More Aggressive?", description="What Is A Black Squirrel? Black squirrels are genetic variants that are found for both Grey and Fox squirrels. The melanistic genetic mutation has been studied extensively in the Grey squirrel. A study published in 2019 suggests that the mutation may have originated in Fox squirrels and was passed to Grey squirrels through interspecies breeding.", link="https://www.squirrelsatthefeeder.com/black-squirrels/"^^tt:url },
C:   { query="black squirrels", title="Cute and Cool Facts About the Relatively Rare Black Squirrels", description="Black panthers are a well-known example of adaptive melanism. This is the same condition that affects black squirrels. Black squirrels have some advantages over their lighter-colored counterparts. For example, they are better camouflaged in the dense, dark forests of the eastern United States.", link="https://animalsake.com/facts-about-black-squirrels"^^tt:url },
C:   { query="black squirrels", title="Black Squirrels | Where Do Black Squirrels Come From?", description="Little known fact: The black squirrel is considered the unofficial mascot of Kent State University. It was in 1961 when several of them were trapped in Canada and released by a number of students at Kent State University. There is a story behind this chronicled by Kent State “The Black Squirrel Festival is only the beginning of black squirrel pride in Kent.", link="https://www.removesquirrels.com/black-squirrels/"^^tt:url },
C:   { query="black squirrels", title="Black Squirrel - Profile | Distribution | Habitat | Facts ...", description="Black squirrels can be 400 to 700 grams (14 – 25 oz.), of body weight. During winter, the black squirrel loses 10% of their body weight. The black squirrel has a significantly higher cooling tolerance than the gray squirrel. Black squirrels enjoy the advantage of a better view when viewed from the top in this darkly lit habitat.", link="https://www.mammalage.com/black-squirrel/"^^tt:url }
C: ]];
A: I found Black squirrel - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's a good restaurant in los altos
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("los altos");
====
# recording/0ab59f9aab350f7d07310118457df2a7
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/021a5eb6b717ca8200ad59917364ae3c
U: test
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: tell me a joke in 10 seconds
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10s]) => @com.icanhazdadjoke.get();
====
# log-dev/13013
U: don't forget to say thanks.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/13004
U: jennie.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log-dev/13000
U: hey jeannie. play music on spotify.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12989
U: hey jenny.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log-dev/12984
U: hey jeannie, i'm jeannie.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log-dev/12940
U: play my favorite music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12934
U: play some taylor swift.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")) => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12874
U: play some slayer.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12786
U: play miami by will smith.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("will smith")) && id =~ "miami" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12785
U: play welcome to miami.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "welcome to miami" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12783
U: play dance song party in the city where the heat is on all night on the beach to the break of dawn.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter id =~ "party in the city where the heat is on all night on the beach to the break of dawn" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12767
U: what does the fox say?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter id =~ "what does the fox say" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12731
U: play some workout music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "workout") => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12727
U: never mind.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/12725
U: play some funky music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "funky") => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12697
U: add this song to playlist awesome.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="awesome", song=id);
====
# log-dev/12690
U: add this song to new playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
====
# log-dev/12674
U: play me some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12670
U: add this song to my library.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# log-dev/12636
U: play me some mac dre?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("mac dre")) => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12585
U: stop. yeah, i can tell.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/12574
U: ohadd this to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
====
# log-dev/12491
U: thank you computer.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/12488
U: just cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/12475
U: play me some hot jams.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "hot jams") => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12466
U: you still there?
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log-dev/12442
U: play springsteen music okay
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("springsteen")) => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12406
U: like podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# log-dev/12286
U: play my favorite
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12261
U: play my favorite music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12096
U: shut up.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/12090
U: play some public enemy.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("public enemy")) => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12070
U: play npr podcast. let me know.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "npr" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12054
U: how do i get play podcast?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12051
U: play that joe rogan podcast.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "joe rogan" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12031
U: still there.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log-dev/12029
U: stop. computer.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log-dev/12017
U: play podcast arm chair.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "arm chair" => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/12015
U: play a podcast.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/11950
U: put on a podcast.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/11935
U: play music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# log-dev/11932
U: play some disco.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "disco") => @org.thingpedia.media-player.play(playable=id);
====
# recording/95d05197721e9d86d05ff067003a4bda
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/a174c193e6fb367c760c9ac6558b0d66
U: hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on)
C: #[results=[]]
C: #[error=enum ENOSYS];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between(high=1, low=0)
C: #[results=[
C:   { random=1, high=1, low=0 }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between(high=1, low=0)
C: #[results=[
C:   { random=1, high=1, low=0 }
C: ]];
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on)
C: #[results=[]]
C: #[error=enum ENOSYS];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between(high=1, low=0)
C: #[results=[
C:   { random=1, high=1, low=0 }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between(high=1, low=0)
C: #[results=[
C:   { random=1, high=1, low=0 }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Hey Janie.Pause.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on)
C: #[results=[]]
C: #[error=enum ENOSYS];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between(high=1, low=0)
C: #[results=[
C:   { random=1, high=1, low=0 }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between(high=1, low=0)
C: #[results=[
C:   { random=1, high=1, low=0 }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: Your request was completed successfully.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Find me a restaurant in Mission Dolores Park.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("mission dolores park");
====
# recording/6313650a9e7258d115f7c8a0fb48aec9
U: stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/cc2cc2942bb9ae9b8b01aef4f7a8de7a
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/c260ee5417ce9cd2b0c10a9a0c9830cb
U: what's your name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=1.4mps, humidity=65.4, cloudiness=0.8, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 70.7 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is the worldwide voiceweb?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="worldwide voiceweb");
====
# recording/cd54cd2fb218c432671451a4316d34d9
U: play my test almond playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "test almond" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "test almond")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:77WeGg5Y4BUvGn5Et8YVDY"^^org.thingpedia.media-source:playable("test almond"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played test almond on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is this?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
====
# recording/918695a57c52ca2d8bcfb011628839e4
U: find me a restaurant in Mission Dolores Park.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("mission dolores park");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter geo == new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, California")
C: #[results=[
C:   { id="ri7UUYmx21AgSpRsf4-9QA"^^com.yelp:restaurant("Tartine Bakery"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/nPUUXYVVa3CHJh5yzH8Xnw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tartine-bakery-san-francisco-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cafes"^^com.yelp:restaurant_cuisine("Cafes")], price=enum moderate, rating=4, review_count=8182, geo=new Location(37.76131, -122.42431, "600 Guerrero St, San Francisco, CA"), phone="+14154872600"^^tt:phone_number },
C:   { id="KkAVX3Wb7E3lP5F_f_8pXg"^^com.yelp:restaurant("Liholiho Yacht Club"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/DluAA2YbM8k6qRM_mwbiNw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/liholiho-yacht-club-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum expensive, rating=4.5, review_count=2488, geo=new Location(37.7618143, -122.42296790220479, "3560 18th St, San Francisco, CA"), phone="+14155897266"^^tt:phone_number },
C:   { id="SGRmnarrNuVEsAjYdEoA0w"^^com.yelp:restaurant("El Farolito"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/kYemXiMcYje-Da7AjPtWcg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/el-farolito-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican")], price=enum cheap, rating=4, review_count=5064, geo=new Location(37.75265, -122.41812, "2779 Mission St, San Francisco, CA"), phone="+14158247877"^^tt:phone_number },
C:   { id="n6L5VIGunR51-D55C-eYeQ"^^com.yelp:restaurant("Foreign Cinema"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/cw5y2LSOIE-EVNjKK_d7SQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/foreign-cinema-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum expensive, rating=4, review_count=5019, geo=new Location(37.75637, -122.41925, "2534 Mission St, San Francisco, CA"), phone="+14156487600"^^tt:phone_number },
C:   { id="XQLmEdXoMzOpffwoFaBtaQ"^^com.yelp:restaurant("Kitchen Story"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/XIhdtd0fB2P_v_qhh1hWbg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/kitchen-story-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "asianfusion"^^com.yelp:restaurant_cuisine("Asian Fusion"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=3589, geo=new Location(37.7642352, -122.4306936, "3499 16th St, San Francisco, CA"), phone="+14155254905"^^tt:phone_number },
C:   { id="4KfQnlcSu4bbTqnvGdGptw"^^com.yelp:restaurant("Beretta"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/HKxMJ8q8fzOY76hy7ACIag/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/beretta-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["italian"^^com.yelp:restaurant_cuisine("Italian"), "pizza"^^com.yelp:restaurant_cuisine("Pizza"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=3828, geo=new Location(37.753869, -122.420611, "1199 Valencia St, San Francisco, CA"), phone="+14156951199"^^tt:phone_number },
C:   { id="1hMD7RQogPDWpE-p3LKjXA"^^com.yelp:restaurant("Loló"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QimJjz8ECFnevPcssJYfTw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/lol%C3%B3-san-francisco-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican"), "tapasmallplates"^^com.yelp:restaurant_cuisine("Tapas/Small Plates")], price=enum moderate, rating=4, review_count=2282, geo=new Location(37.7573462, -122.4214034, "974 Valencia St, San Francisco, CA"), phone="+14156435656"^^tt:phone_number },
C:   { id="ZDvIMjJ-7I0561ckM4pAeA"^^com.yelp:restaurant("Anchor Oyster Bar"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/oKLPo1042ojJJC9OcCzAMw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/anchor-oyster-bar-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4.5, review_count=1552, geo=new Location(37.759689, -122.434609, "579 Castro St, San Francisco, CA"), phone="+14154313990"^^tt:phone_number },
C:   { id="JARsJVKLPgs_yC3cwDnp7g"^^com.yelp:restaurant("La Taqueria"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/7LqVKYVg2GdEFKI2CFL4cA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-taqueria-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican")], price=enum moderate, rating=4, review_count=4250, geo=new Location(37.75088, -122.41805, "2889 Mission St, San Francisco, CA"), phone="+14152857117"^^tt:phone_number },
C:   { id="CYttYTEiQuhSfo3SEh79fA"^^com.yelp:restaurant("Shizen Vegan Sushi Bar & Izakaya"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/-1BWnyjrsDmTmXH_3wZl_w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shizen-vegan-sushi-bar-and-izakaya-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["sushi"^^com.yelp:restaurant_cuisine("Sushi Bars"), "vegan"^^com.yelp:restaurant_cuisine("Vegan"), "izakaya"^^com.yelp:restaurant_cuisine("Izakaya")], price=enum moderate, rating=4.5, review_count=1801, geo=new Location(37.768326, -122.421682, "370 14th St, San Francisco, CA"), phone="+14156785767"^^tt:phone_number }
C: ]]
C: #[count=19];
A: I see Tartine Bakery, Liholiho Yacht Club, and El Farolito. Tartine Bakery is rated 4 stars, Liholiho Yacht Club is rated 4.5 stars, and El Farolito is rated 4 stars.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/08991ae9bcd1a685444b91ea8c190b13
U: Play some music by Led Zeppelin.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("led zeppelin")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/b99e674101b82fe4a49414e0c6438b13
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/d49d0712f5dd4e941aba9e40f3b52313
U: Play hotel California.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hotel california" => @org.thingpedia.media-player.play(playable=id);
====
# recording/36a770b4552d8fc7d3efd4043b34d449
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/a8859b4b7c2dea9e51a3a8f7b3de57a7
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/fcc750d8d8c68c39aa8155b787f96ba2
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/e01703905649e7c8d2b71fd866943ead
U: play my test album playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "test album" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "test album")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3hpws2x8SQfpeU8I5bigxe"^^org.thingpedia.media-source:playable("Best Albums of All Time Reddit"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Best Albums of All Time Reddit on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Ajini stop.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.stop();
====
# recording/527fb7b8226c44891a6c3f95229706a7
U: play hotel California.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hotel california" => @org.thingpedia.media-player.play(playable=id);
====
# recording/f449953c41b07d3f806b8255d7a9e8fd
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/da9cf54de69b56a8b40c9984000a07f0
U: play hotel California.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hotel california" => @org.thingpedia.media-player.play(playable=id);
====
# recording/230570d87429ac07f54277e95bd369cd
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/daa5f87fa79f6c6b6e420aab628bd253
U: Play November rain.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "november rain" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "november rain")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/daa6575d75c80ae3dcef6a69e6460c3c
U: play music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/a3a5bb73860efc7fe3af3f37d14a4fe5
U: play November rain.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "november rain" => @org.thingpedia.media-player.play(playable=id);
====
# recording/a7a2d05ef3237f54b6c6da461e3584fa
U: on Saturday play radio KQED.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[new Date(enum saturday)]) => @com.tunein.station() filter id =~ "kqed" => @com.tunein.radio_play(id=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[new Date(enum saturday, new Time(8, 30))]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
A: Alright, I will play kqed at 8:30 AM on Saturday.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: on Saturday tell me the news.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[new Date(enum saturday)]) => @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[new Date(enum saturday, new Time(8, 30))]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
C: ontimer(date=[new Date(enum saturday, new Time(8, 30))]) => @com.smartnews.article()
C: #[results=[]];
A: Alright, I will get headlines at 8:30 AM on Saturday.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: What's the weather in Mission Dolores Park?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("mission dolores park"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[new Date(enum saturday, new Time(8, 30))]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
C: ontimer(date=[new Date(enum saturday, new Time(8, 30))]) => @com.smartnews.article()
C: #[results=[]];
C: @org.thingpedia.weather.current(location=new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=4.7mps, humidity=90.9, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, California") }
C: ]];
A: It is cloudy today in Mission Dolores Park, San Francisco, California and the temperature is 59.2 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: send this to me on Saturday.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[new Date(enum saturday)]) => @org.thingpedia.weather.current(location=new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, California"));
====
# recording/dc68c6dadb0f9746295c7f0d386714ec
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/f5914e4beb2111c961068c7dedf9a4ba
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0ybMBs8mKdAP9WSnFTiZvs"^^org.thingpedia.media-source:playable("ASGORE"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1DkjqnjgbbpT7cYL2D2ma4"^^org.thingpedia.media-source:playable("Home (Music Box)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2FZ99j224ohiGLavqjijza"^^org.thingpedia.media-source:playable("Undertale"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=17]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: next song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0ybMBs8mKdAP9WSnFTiZvs"^^org.thingpedia.media-source:playable("ASGORE"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1DkjqnjgbbpT7cYL2D2ma4"^^org.thingpedia.media-source:playable("Home (Music Box)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2FZ99j224ohiGLavqjijza"^^org.thingpedia.media-source:playable("Undertale"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=17]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Fine.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/16cf7ecec81db650971d9d4da8ac2ccf
U: hey find me a song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song()
C: #[results=[
C:   { id="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:song("Home"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=60, energy=16.2, danceability=51.800000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:song("MEGALOVANIA"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=69, energy=63.2, danceability=71.89999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:song("Undyne"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=43.3, danceability=67.60000000000001, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:song("Determination"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=0.485, danceability=78.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:song("Don't Give Up"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=38.5, danceability=60.4, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:song("Oh! One True Love"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=48, energy=21.4, danceability=66.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:song("An Ending"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=21.4, danceability=56.99999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:song("Dating Fight!"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=50, energy=66, danceability=74.1, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:song("Quiet Water"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=57, energy=0.831, danceability=40.6, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:song("SAVE The World"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=54, energy=91.5, danceability=31.900000000000002, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Home, MEGALOVANIA, and Undyne. Home is by Toby Fox, MEGALOVANIA is by Toby Fox, and Undyne is by Toby Fox.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song()
C: #[results=[
C:   { id="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:song("Home"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=60, energy=16.2, danceability=51.800000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:song("MEGALOVANIA"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=69, energy=63.2, danceability=71.89999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:song("Undyne"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=43.3, danceability=67.60000000000001, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:song("Determination"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=0.485, danceability=78.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:song("Don't Give Up"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=38.5, danceability=60.4, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:song("Oh! One True Love"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=48, energy=21.4, danceability=66.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:song("An Ending"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=21.4, danceability=56.99999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:song("Dating Fight!"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=50, energy=66, danceability=74.1, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:song("Quiet Water"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=57, energy=0.831, danceability=40.6, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:song("SAVE The World"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=54, energy=91.5, danceability=31.900000000000002, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0ybMBs8mKdAP9WSnFTiZvs"^^org.thingpedia.media-source:playable("ASGORE"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1DkjqnjgbbpT7cYL2D2ma4"^^org.thingpedia.media-source:playable("Home (Music Box)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2FZ99j224ohiGLavqjijza"^^org.thingpedia.media-source:playable("Undertale"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=17]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/32bfd60ef69bddddd2b445f621f82ae2
U: what's up?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's up?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable()
C: #[results=[
C:   { id="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=60, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=69, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=48, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=50, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=57, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=54, __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I see Home, MEGALOVANIA, and Undyne. They're recordings by Toby Fox released in September 14, 2015.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable()
C: #[results=[
C:   { id="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=60, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=69, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=48, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=50, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=57, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=54, __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/1583f631d9e98b4d0c6c9d8420237b6f
U: what's my name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
A: Your name is giovanni.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some Bob.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("bob")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/70e730ae9b75ff46fcfe04724b12d7f9
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/a317ba976f47351b3a6c9af134dfcc06
U: play November rain.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "november rain" => @org.thingpedia.media-player.play(playable=id);
====
# recording/dd4c1d66ee71ee8709428b3835c07aec
U: how are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: how are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the weather like today?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/9342a2190df70c91e96369c41405b8ed
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/84e6a4992655729d877c91e56552c81d
U: play the most popular taylor swift song from 2020
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")) && release_date <= new Date("2020-01-01T08:00:00.000Z") + 1year && release_date >= new Date("2020-01-01T08:00:00.000Z"))[1] => @org.thingpedia.media-player.play(playable=id);
====
# recording/c80e5d6ab4c298896d7cf3069267be73
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/ef097970877400e40e31f7923a45a3e9
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/848ab10e5cdae738640dce4389a8b27a
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/63abca69a309c2b54242428da9197753
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/b296d1eb49416b8e9dd58693e16f6d2c
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/ff61c99d067a928d32a2be4ddd4c4478
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a91de9ac4281ab0be50f449c7f6b773d
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/1c1618bae102ae01cdc05e39e2bf766b
U: What time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.bing.web_search(query="alvarex")
C: #[results=[
C:   { query="alvarex", title="Alvarez & Alvarez Yairi Acoustic Guitars", description="Alvarez is one of the leading acoustic guitar brands in the U.S.A. and around the world. Guitars. Yairi. Handcrafted beauty and excellence. Masterworks Elite. Stunning clarity and power. Masterworks. Truly eloquent professional guitars. Cádiz. Designed and developed in Andalusia. Artist Elite.", link="https://www.alvarezguitars.com/"^^tt:url },
C:   { query="alvarex", title="2021 MLB playoffs - Yordan Alvarez's MVP performance ...", description="Alvarez is the second Astros player with 11 hits in a playoff series, behind only Jose Altuve's 12 in the 2020 ALCS. He became the fifth player in MLB history with 11 or more hits in a single ...", link="https://www.espn.com/mlb/story/_/id/32454844/2021-mlb-playoffs-yordan-alvarez-mvp-performance-propels-houston-astros-world-series"^^tt:url },
C:   { query="alvarex", title="Alvarez returns from double knee surgery to win ALCS MVP", description="Alvarez returned this season and was a bargain at $609,000. At two years, 113 days of service time, he is expected to fall just short of arbitration eligibility this winter, if the rules don’t ...", link="https://www.boston.com/sports/sports/2021/10/22/yordan-alvarez-alcs-mvp-red-sox-astros/"^^tt:url },
C:   { query="alvarex", title="Canelo Álvarez - Wikipedia", description="Santos Saúl \"Canelo\" Álvarez Barragán (American Spanish: [saˈul ˈalβaɾes]; born 18 July 1990) is a Mexican professional boxer.He has won multiple world championships in four weight classes from light middleweight to light heavyweight, including unified titles in three of those weight classes. Álvarez is currently a unified super middleweight world champion, having held the WBA (Super ...", link="https://en.wikipedia.org/wiki/Canelo_%C3%81lvarez"^^tt:url },
C:   { query="alvarex", title="Alvarez | Musician's Friend", description="Alvarez Artist Series AD60 Dreadnought Acoustic Guitar. 4.5 of 5 stars. (26) Product Price. $349.99. 2x Point Rewards. Alvarez Artist Series AF30 Folk Acoustic Guitar. 4.5 of 5 stars.", link="https://www.musiciansfriend.com/alvarez"^^tt:url }
C: ]];
C: @com.bing.web_search(query="aardvarks")
C: #[results=[
C:   { query="aardvarks", title="Aardvark - Wikipedia", description="Aardvarks live for up to 23 years in captivity. Its keen hearing warns it of predators: lions, leopards, cheetahs, African wild dogs, hyenas, and pythons. Some humans also hunt aardvarks for meat. Aardvarks can dig fast or run in zigzag fashion to elude enemies, but if all else fails, they will strike with their claws, tail and shoulders, sometimes flipping onto their backs lying motionless ...", link="https://en.wikipedia.org/wiki/Aardvark"^^tt:url },
C:   { query="aardvarks", title="Aardvark | National Geographic", description="Aardvark. Aardvarks live throughout Africa, south of the Sahara. Their name comes from South Africa's Afrikaans language and means “earth pig.”. A glimpse of the aardvark's body and long snout ...", link="https://www.nationalgeographic.com/animals/mammals/facts/aardvark"^^tt:url },
C:   { query="aardvarks", title="Aardvark - Animals", description="The aardvark gets its name from a South African word meaning “earth pig.” Although the aardvark looks like a pig, especially with its body and snout, aardvarks actually share common ancestors with elephants and golden moles. Aardvarks live throughout much of sub-Saharan Africa. STRONG CLAWS Aardvarks use their large front claws to dig holes at a rate of 2 feet (0.6 meters) in 15 seconds so ...", link="https://kids.nationalgeographic.com/animals/mammals/facts/aardvark"^^tt:url },
C:   { query="aardvarks", title="Aardvark | African Wildlife Foundation", description="Aardvarks are hunted by humans. Many African tribes hunt this animal for its meat and sometimes use its body parts as charms—the teeth are believed to prevent illnesses. Other animals, like lions, hyenas, and leopards are its natural predators in the wild. Habitat loss is also a threat to aardvarks.", link="https://www.awf.org/wildlife-conservation/aardvark"^^tt:url },
C:   { query="aardvarks", title="Aardvark - Facts,Information & Pictures", description="Aardvarks live in underground burrows that are 6.5 to 9.8 feet (2 to 3 metres) long, at 45 degree angles. At the end of the tunnel is a rounded ‘room’ where the aardvark curls up to sleep. Female aardvarks give birth in this chamber.", link="https://animalcorner.org/animals/aardvark/"^^tt:url }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(13, 55, 44) }
C: ]];
A: Right now, it's 1:55 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/00ef477923bc3a6ce62b2e4ef2e5a38c
U: Play the latest song by Adele.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("adele")))[1] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Kgi9PGPdvx4fEDMJyAeIg"^^org.thingpedia.media-source:playable("Happy New Year"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0k1WUmIRnG3xU6fvvDVfRG"^^org.thingpedia.media-source:playable("Way 2 Sexy (with Future & Young Thug)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4S4ZY1yKo3WUtzsg3O6hcf"^^org.thingpedia.media-source:playable("Years - 2021 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2BcMwX1MPV6ZHP4tUT9uq6"^^org.thingpedia.media-source:playable("Knife Talk (with 21 Savage ft. Project Pat)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SlrSRKMQxqqMzuLq1EoGs"^^org.thingpedia.media-source:playable("Let Me Love You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[set_time($now, new Time(3, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Monica is here.")
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Zv4wHQuXgyd"^^com.icanhazdadjoke:id, text="How do you tell the difference between a crocodile and an alligator? You will see one later and one in a while." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=17.2C, wind_speed=3.1mps, humidity=67.8, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum wednesday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.7C, wind_speed=3.1mps, humidity=86.1, cloudiness=70.3, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-10-27T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2495, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2291, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QlTVczBSqL9a5RUQM9Ke0A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1388, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/6e9e6mtOPC9ccqETykIrdQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/telef%C3%A8ric-barcelona-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["spanish"^^com.yelp:restaurant_cuisine("Spanish"), "tapas"^^com.yelp:restaurant_cuisine("Tapas Bars")], price=enum expensive, rating=4, review_count=802, geo=new Location(37.4383, -122.158361, "855 El Camino Real, Ste 130, Palo Alto, CA 94301"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 40, 11) }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mrHQKBA5MCd"^^com.icanhazdadjoke:id, text="My boss told me that he was going to fire the person with the worst posture. I have a hunch, it might be me." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 43, 15) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_thanks)
C: #[results=[
C:   { reply="Thanks!", question=enum positive_emotion_thanks }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Easy On Me on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Kgi9PGPdvx4fEDMJyAeIg"^^org.thingpedia.media-source:playable("Happy New Year"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0k1WUmIRnG3xU6fvvDVfRG"^^org.thingpedia.media-source:playable("Way 2 Sexy (with Future & Young Thug)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4S4ZY1yKo3WUtzsg3O6hcf"^^org.thingpedia.media-source:playable("Years - 2021 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2BcMwX1MPV6ZHP4tUT9uq6"^^org.thingpedia.media-source:playable("Knife Talk (with 21 Savage ft. Project Pat)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SlrSRKMQxqqMzuLq1EoGs"^^org.thingpedia.media-source:playable("Let Me Love You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[set_time($now, new Time(3, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Monica is here.")
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Zv4wHQuXgyd"^^com.icanhazdadjoke:id, text="How do you tell the difference between a crocodile and an alligator? You will see one later and one in a while." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=17.2C, wind_speed=3.1mps, humidity=67.8, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum wednesday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.7C, wind_speed=3.1mps, humidity=86.1, cloudiness=70.3, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-10-27T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2495, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2291, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QlTVczBSqL9a5RUQM9Ke0A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1388, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/6e9e6mtOPC9ccqETykIrdQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/telef%C3%A8ric-barcelona-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["spanish"^^com.yelp:restaurant_cuisine("Spanish"), "tapas"^^com.yelp:restaurant_cuisine("Tapas Bars")], price=enum expensive, rating=4, review_count=802, geo=new Location(37.4383, -122.158361, "855 El Camino Real, Ste 130, Palo Alto, CA 94301"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 40, 11) }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mrHQKBA5MCd"^^com.icanhazdadjoke:id, text="My boss told me that he was going to fire the person with the worst posture. I have a hunch, it might be me." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 43, 15) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_thanks)
C: #[results=[
C:   { reply="Thanks!", question=enum positive_emotion_thanks }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
A: Your request was completed successfully.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: resume.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.resume();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Kgi9PGPdvx4fEDMJyAeIg"^^org.thingpedia.media-source:playable("Happy New Year"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0k1WUmIRnG3xU6fvvDVfRG"^^org.thingpedia.media-source:playable("Way 2 Sexy (with Future & Young Thug)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4S4ZY1yKo3WUtzsg3O6hcf"^^org.thingpedia.media-source:playable("Years - 2021 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2BcMwX1MPV6ZHP4tUT9uq6"^^org.thingpedia.media-source:playable("Knife Talk (with 21 Savage ft. Project Pat)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SlrSRKMQxqqMzuLq1EoGs"^^org.thingpedia.media-source:playable("Let Me Love You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[set_time($now, new Time(3, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Monica is here.")
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Zv4wHQuXgyd"^^com.icanhazdadjoke:id, text="How do you tell the difference between a crocodile and an alligator? You will see one later and one in a while." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=17.2C, wind_speed=3.1mps, humidity=67.8, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum wednesday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.7C, wind_speed=3.1mps, humidity=86.1, cloudiness=70.3, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-10-27T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2495, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2291, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QlTVczBSqL9a5RUQM9Ke0A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1388, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/6e9e6mtOPC9ccqETykIrdQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/telef%C3%A8ric-barcelona-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["spanish"^^com.yelp:restaurant_cuisine("Spanish"), "tapas"^^com.yelp:restaurant_cuisine("Tapas Bars")], price=enum expensive, rating=4, review_count=802, geo=new Location(37.4383, -122.158361, "855 El Camino Real, Ste 130, Palo Alto, CA 94301"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 40, 11) }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mrHQKBA5MCd"^^com.icanhazdadjoke:id, text="My boss told me that he was going to fire the person with the worst posture. I have a hunch, it might be me." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 43, 15) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_thanks)
C: #[results=[
C:   { reply="Thanks!", question=enum positive_emotion_thanks }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
A: I resumed for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: resume the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_play();
====
# recording/f5ad77be46239b426cee1fe77782761e
U: What time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains~(genres, "jazz") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(14, 31, 27) }
C: ]];
A: Right now, it's 2:31 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play radio KQED in 10 minutes.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10min]) => @com.tunein.station() filter id =~ "kqed" => @com.tunein.radio_play(id=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains~(genres, "jazz") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(14, 31, 27) }
C: ]];
C: ontimer(date=[$now + 10min]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
A: Alright, I will play kqed in 10 minutes.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: tell me a joke.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains~(genres, "jazz") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(14, 31, 27) }
C: ]];
C: ontimer(date=[$now + 10min]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="S7MCtHBQuc"^^com.icanhazdadjoke:id, text="Ben & Jerry's really need to improve their operation. The only way to get there is down a rocky road." }
C: ]];
A: Ben & Jerry's really need to improve their operation. The only way to get there is down a rocky road.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
====
# recording/59e3c99af90999c97938d2af5f6db7c4
U: play a recent jazz album.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.album() filter contains~(genres, "jazz") => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains~(genres, "jazz") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Sorry, there are no albums at the moment matching your request. Would you like to be notified when there are new albums?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
AT: monitor(id of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains~(genres, "jazz"))
AT: #[confirm=enum proposed];
U: No.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/8988a787db6b10d390ea7fcd37ea1349
U: What time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Kgi9PGPdvx4fEDMJyAeIg"^^org.thingpedia.media-source:playable("Happy New Year"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0k1WUmIRnG3xU6fvvDVfRG"^^org.thingpedia.media-source:playable("Way 2 Sexy (with Future & Young Thug)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4S4ZY1yKo3WUtzsg3O6hcf"^^org.thingpedia.media-source:playable("Years - 2021 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2BcMwX1MPV6ZHP4tUT9uq6"^^org.thingpedia.media-source:playable("Knife Talk (with 21 Savage ft. Project Pat)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SlrSRKMQxqqMzuLq1EoGs"^^org.thingpedia.media-source:playable("Let Me Love You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[set_time($now, new Time(3, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Monica is here.")
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Zv4wHQuXgyd"^^com.icanhazdadjoke:id, text="How do you tell the difference between a crocodile and an alligator? You will see one later and one in a while." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=17.2C, wind_speed=3.1mps, humidity=67.8, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum wednesday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.7C, wind_speed=3.1mps, humidity=86.1, cloudiness=70.3, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-10-27T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2495, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2291, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QlTVczBSqL9a5RUQM9Ke0A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1388, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/6e9e6mtOPC9ccqETykIrdQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/telef%C3%A8ric-barcelona-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["spanish"^^com.yelp:restaurant_cuisine("Spanish"), "tapas"^^com.yelp:restaurant_cuisine("Tapas Bars")], price=enum expensive, rating=4, review_count=802, geo=new Location(37.4383, -122.158361, "855 El Camino Real, Ste 130, Palo Alto, CA 94301"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 40, 11) }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mrHQKBA5MCd"^^com.icanhazdadjoke:id, text="My boss told me that he was going to fire the person with the worst posture. I have a hunch, it might be me." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 43, 15) }
C: ]];
A: Right now, it's 3:43 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Play my favorites.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Kgi9PGPdvx4fEDMJyAeIg"^^org.thingpedia.media-source:playable("Happy New Year"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0k1WUmIRnG3xU6fvvDVfRG"^^org.thingpedia.media-source:playable("Way 2 Sexy (with Future & Young Thug)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4S4ZY1yKo3WUtzsg3O6hcf"^^org.thingpedia.media-source:playable("Years - 2021 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2BcMwX1MPV6ZHP4tUT9uq6"^^org.thingpedia.media-source:playable("Knife Talk (with 21 Savage ft. Project Pat)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SlrSRKMQxqqMzuLq1EoGs"^^org.thingpedia.media-source:playable("Let Me Love You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[set_time($now, new Time(3, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Monica is here.")
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Zv4wHQuXgyd"^^com.icanhazdadjoke:id, text="How do you tell the difference between a crocodile and an alligator? You will see one later and one in a while." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=17.2C, wind_speed=3.1mps, humidity=67.8, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum wednesday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.7C, wind_speed=3.1mps, humidity=86.1, cloudiness=70.3, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-10-27T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2495, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2291, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QlTVczBSqL9a5RUQM9Ke0A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1388, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/6e9e6mtOPC9ccqETykIrdQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/telef%C3%A8ric-barcelona-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["spanish"^^com.yelp:restaurant_cuisine("Spanish"), "tapas"^^com.yelp:restaurant_cuisine("Tapas Bars")], price=enum expensive, rating=4, review_count=802, geo=new Location(37.4383, -122.158361, "855 El Camino Real, Ste 130, Palo Alto, CA 94301"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 40, 11) }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mrHQKBA5MCd"^^com.icanhazdadjoke:id, text="My boss told me that he was going to fire the person with the worst posture. I have a hunch, it might be me." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 43, 15) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played your favorites on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next.There.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Kgi9PGPdvx4fEDMJyAeIg"^^org.thingpedia.media-source:playable("Happy New Year"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0k1WUmIRnG3xU6fvvDVfRG"^^org.thingpedia.media-source:playable("Way 2 Sexy (with Future & Young Thug)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4S4ZY1yKo3WUtzsg3O6hcf"^^org.thingpedia.media-source:playable("Years - 2021 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2BcMwX1MPV6ZHP4tUT9uq6"^^org.thingpedia.media-source:playable("Knife Talk (with 21 Savage ft. Project Pat)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SlrSRKMQxqqMzuLq1EoGs"^^org.thingpedia.media-source:playable("Let Me Love You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.pause()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.resume()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[set_time($now, new Time(3, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Monica is here.")
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Zv4wHQuXgyd"^^com.icanhazdadjoke:id, text="How do you tell the difference between a crocodile and an alligator? You will see one later and one in a while." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=17.2C, wind_speed=3.1mps, humidity=67.8, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum wednesday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.7C, wind_speed=3.1mps, humidity=86.1, cloudiness=70.3, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-10-27T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2495, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2291, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QlTVczBSqL9a5RUQM9Ke0A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1388, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/6e9e6mtOPC9ccqETykIrdQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/telef%C3%A8ric-barcelona-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["spanish"^^com.yelp:restaurant_cuisine("Spanish"), "tapas"^^com.yelp:restaurant_cuisine("Tapas Bars")], price=enum expensive, rating=4, review_count=802, geo=new Location(37.4383, -122.158361, "855 El Camino Real, Ste 130, Palo Alto, CA 94301"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 40, 11) }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mrHQKBA5MCd"^^com.icanhazdadjoke:id, text="My boss told me that he was going to fire the person with the worst posture. I have a hunch, it might be me." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(15, 43, 15) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0wae8KoprNjfrXWjYYHGy9"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26lWYpgbcknITI0Fy1eZDs"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kEpjptnAwt11Atr4cEMe1"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.pause();
====
# recording/7f3c451be5230ccd7f4af47da2cbcc41
U: Play a podcast.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5o26roIQI3zaOZre96oSn3"^^org.thingpedia.media-source:playable("Navigate 2021"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1DheqJ1r3vaSgl0vvdtsT9"^^org.thingpedia.media-source:playable("The Field of 68 2021-22 College Basketball Season Preview!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1xmN9zQBCGONBNOS0NOobM"^^org.thingpedia.media-source:playable("Check Under The Sea: The 2021 Sealab 2021 Podcast"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:62KoKPohAAikQC63a61cjE"^^org.thingpedia.media-source:playable("PreSnap: NFL DFS 2021 Podcast by LineStar App"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/227734f8cb0d4b7366f4d5ad1e2b53f2
U: what's the phone number of coconuts?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [phone] of @com.yelp.restaurant() filter id =~ "coconuts";
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [phone] of @com.yelp.restaurant() filter id =~ "coconuts"
C: #[results=[
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), phone="+16503299533"^^tt:phone_number }
C: ]];
A: Coconuts Caribbean Restaurant & Bar can be reached at (650) 329-9533.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: get the weather in Mission Dolores Park.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("mission dolores park"));
====
# recording/09f5668216476f789b2ef9e07e11ff58
U: tell me the news and tell me a joke.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @com.icanhazdadjoke.get();
====
# recording/df007771ce8280bf83adf87d5b718362
U: Set a reminder in 10 minutes.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10min]) => @org.thingpedia.builtin.thingengine.builtin.say();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[
C:   { id="4346322844225900000"^^com.smartnews:article, title="COVID-19 still rages, but some U.S. states reject federal funds to help", author="Andy Sullivan", source="Reuters", summary=" Idaho health officials say they don't have enough tests to track the disease's spread . The state's Republican-led legislature voted down $40 million in federal aid available for COVID-19 testing in schools . Another $1.8 billion in pandemic-related federal assistance is sitting idle in the state treasury .", link="https://www.reuters.com/world/us/covid-19-still-rages-some-us-states-reject-federal-funds-help-2021-11-02/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T13:20:01.000Z"), mention=["idaho", "united states", "reuters", "washington state", "nampa idaho"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346322844225899885.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346322844225899885.mp3"^^tt:url },
C:   { id="4346297019824876500"^^com.smartnews:article, title="Headlining U.S. elections, Virginia governor’s race is a dead heat", author="Jason Lange", source="Reuters", summary=" Democrat Terry McAuliffe has seen his lead over Republican businessman Glenn Youngkin in opinion polls evaporate . A McAuliffe loss in Virginia, which President Joe Biden won by a double-digit margin over former President Donald Trump last year, would sound alarm bells for national Democrats . Cultural issues have dominated the gubernatorial race, with Youngkin promising to give parents more control over how public schools handle race, gender and COVID-19 protocols .", link="https://www.reuters.com/world/us/too-close-to-call-virginia-governors-race-headlines-us-elections-2021-11-02/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T10:10:50.000Z"), mention=["virginia", "terry mcauliffe", "reuters", "glenn youngkin", "joe biden"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346297019824876637.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346297019824876637.mp3"^^tt:url },
C:   { id="4346271737340503600"^^com.smartnews:article, title="‘We all bear a burden’: How gun violence costs America $280 billion a year", source="ABC News", summary=" \"Rethinking Gun Violence\" looks at the level of gun violence in the U.S. Advocates estimate gun violence costs America almost $300 billion a year .", link="https://abcnews.go.com/US/bear-burden-gun-violence-costs-america-280-billion/story?id=80245349"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T10:02:23.000Z"), mention=["abc news", "united states"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346271737340503781.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346271737340503781.mp3"^^tt:url },
C:   { id="4346239411327872000"^^com.smartnews:article, title="Backlash over US police vaccine mandates has not fueled crime surge, experts say", source="The Guardian", summary=" The Seattle police department has been short staffed since October . The city began enforcing a mandate requiring officers to get vaccinated against Covid-19 .", link="https://www.theguardian.com/us-news/2021/nov/02/police-vaccine-mandate-protest"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T08:00:02.000Z"), mention=["seattle", "united states", "covid 19"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346239411327872162.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346239411327872162.mp3"^^tt:url },
C:   { id="4346143368003193000"^^com.smartnews:article, title="SFPD could be short 533 officers amid staffing strains from vaccine mandate", source="ABC7 Bay Area", summary=" 836 employees reported to be unvaccinated, which is 2.8 percent of the city's entire workforce . That group includes city workers, police officers, fire department staff, sheriff's deputies, and SFMTA personnel . 100 transit operators were unable to work due to being non-compliant with the mandate .", link="https://abc7news.com/san-francisco-vaccine-mandate-sfpd-sf-city-workers-on-leave/11188916/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T01:40:57.000Z"), mention=["san francisco", "san francisco police department", "california", "san francisco municipal transportation agency", "covid 19"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346143368003192936.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346143368003192936.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(16, 11, 58) }
C: ]];
C: ontimer(date=[$now + 10min]) => @org.thingpedia.builtin.thingengine.builtin.say();
A: What would you like me to say?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(message);
AT: ontimer(date=[$now + 10min]) => @org.thingpedia.builtin.thingengine.builtin.say();
U: Test.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Test.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[
C:   { id="4346322844225900000"^^com.smartnews:article, title="COVID-19 still rages, but some U.S. states reject federal funds to help", author="Andy Sullivan", source="Reuters", summary=" Idaho health officials say they don't have enough tests to track the disease's spread . The state's Republican-led legislature voted down $40 million in federal aid available for COVID-19 testing in schools . Another $1.8 billion in pandemic-related federal assistance is sitting idle in the state treasury .", link="https://www.reuters.com/world/us/covid-19-still-rages-some-us-states-reject-federal-funds-help-2021-11-02/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T13:20:01.000Z"), mention=["idaho", "united states", "reuters", "washington state", "nampa idaho"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346322844225899885.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346322844225899885.mp3"^^tt:url },
C:   { id="4346297019824876500"^^com.smartnews:article, title="Headlining U.S. elections, Virginia governor’s race is a dead heat", author="Jason Lange", source="Reuters", summary=" Democrat Terry McAuliffe has seen his lead over Republican businessman Glenn Youngkin in opinion polls evaporate . A McAuliffe loss in Virginia, which President Joe Biden won by a double-digit margin over former President Donald Trump last year, would sound alarm bells for national Democrats . Cultural issues have dominated the gubernatorial race, with Youngkin promising to give parents more control over how public schools handle race, gender and COVID-19 protocols .", link="https://www.reuters.com/world/us/too-close-to-call-virginia-governors-race-headlines-us-elections-2021-11-02/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T10:10:50.000Z"), mention=["virginia", "terry mcauliffe", "reuters", "glenn youngkin", "joe biden"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346297019824876637.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346297019824876637.mp3"^^tt:url },
C:   { id="4346271737340503600"^^com.smartnews:article, title="‘We all bear a burden’: How gun violence costs America $280 billion a year", source="ABC News", summary=" \"Rethinking Gun Violence\" looks at the level of gun violence in the U.S. Advocates estimate gun violence costs America almost $300 billion a year .", link="https://abcnews.go.com/US/bear-burden-gun-violence-costs-america-280-billion/story?id=80245349"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T10:02:23.000Z"), mention=["abc news", "united states"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346271737340503781.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346271737340503781.mp3"^^tt:url },
C:   { id="4346239411327872000"^^com.smartnews:article, title="Backlash over US police vaccine mandates has not fueled crime surge, experts say", source="The Guardian", summary=" The Seattle police department has been short staffed since October . The city began enforcing a mandate requiring officers to get vaccinated against Covid-19 .", link="https://www.theguardian.com/us-news/2021/nov/02/police-vaccine-mandate-protest"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T08:00:02.000Z"), mention=["seattle", "united states", "covid 19"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346239411327872162.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346239411327872162.mp3"^^tt:url },
C:   { id="4346143368003193000"^^com.smartnews:article, title="SFPD could be short 533 officers amid staffing strains from vaccine mandate", source="ABC7 Bay Area", summary=" 836 employees reported to be unvaccinated, which is 2.8 percent of the city's entire workforce . That group includes city workers, police officers, fire department staff, sheriff's deputies, and SFMTA personnel . 100 transit operators were unable to work due to being non-compliant with the mandate .", link="https://abc7news.com/san-francisco-vaccine-mandate-sfpd-sf-city-workers-on-leave/11188916/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-02T01:40:57.000Z"), mention=["san francisco", "san francisco police department", "california", "san francisco municipal transportation agency", "covid 19"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/headline_4346143368003192936.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211102/voice/summary_4346143368003192936.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(16, 11, 58) }
C: ]];
C: ontimer(date=[$now + 10min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Test.")
C: #[results=[]];
A: Alright, I will send you a message Test. In 10 minutes.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: Alert me in 10 minutes.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10min]) => @org.thingpedia.builtin.thingengine.builtin.alert();
====
# recording/54da5dcfccdccbda3e030e2030adfc06
U: Play the top three most popular songs by Sia.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("sia")))[1 : 3] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1 : 3] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:playable("Unstoppable"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7uoFMmxln0GPXQ0AcCBXRq"^^org.thingpedia.media-source:playable("Snowman"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4xigPf2sigSPmuFH3qCelB"^^org.thingpedia.media-source:playable("Genius (feat. Sia, Diplo, and Labrinth)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the 3 songs by Sia with the maximum popularity on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is this?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1 : 3] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:playable("Unstoppable"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7uoFMmxln0GPXQ0AcCBXRq"^^org.thingpedia.media-source:playable("Snowman"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4xigPf2sigSPmuFH3qCelB"^^org.thingpedia.media-source:playable("Genius (feat. Sia, Diplo, and Labrinth)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:song("Unstoppable"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")], album="spotify:album:2eV6DIPDnGl1idcjww6xyX"^^org.thingpedia.media-source:album("This Is Acting (Deluxe Version)"), genres=["australian dance", "australian pop", "pop"], release_date=new Date("2016-10-21T00:00:00.000Z"), popularity=78, energy=77.9, danceability=46.800000000000004, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Currently playing Unstoppable by Sia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: next.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/ff4e01eb41a04503eafc0026741cb2e0
U: cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/1984458cbee0b4ef31a182cd4475cd9d
U: get me a joke and the news.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
UT: @com.smartnews.article();
====
# recording/8f28b16c866bb6bd4a5106bcfe7cf1b6
U: What's the most popular track by Sia?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("sia")))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1]
C: #[results=[
C:   { id="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:song("Unstoppable"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")], album="spotify:album:2eV6DIPDnGl1idcjww6xyX"^^org.thingpedia.media-source:album("This Is Acting (Deluxe Version)"), genres=["australian dance", "australian pop", "pop"], release_date=new Date("2016-10-21T00:00:00.000Z"), popularity=78, energy=77.9, danceability=46.800000000000004, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Unstoppable. It is a song in the album This Is Acting (Deluxe Version) by Sia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: play it.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.play(playable="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:song("Unstoppable"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1]
C: #[results=[
C:   { id="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:song("Unstoppable"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")], album="spotify:album:2eV6DIPDnGl1idcjww6xyX"^^org.thingpedia.media-source:album("This Is Acting (Deluxe Version)"), genres=["australian dance", "australian pop", "pop"], release_date=new Date("2016-10-21T00:00:00.000Z"), popularity=78, energy=77.9, danceability=46.800000000000004, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:song("Unstoppable"))
C: #[results=[]]
C: #[error=enum disallowed_action];
A: Sorry, failed to play: you must first click play from inside the Spotify app, and then I will play songs for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/d8f780f8417482469be95fd6bff61a87
U: what day is today?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_date();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="AXvHeVvHeib"^^com.icanhazdadjoke:id, text="What do you call a bee that lives in America? A USB." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_date()
C: #[results=[
C:   { date=new Date("2021-11-02T07:00:00.000Z") }
C: ]];
A: Today is November 2.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Set a reminder in two minutes.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="AXvHeVvHeib"^^com.icanhazdadjoke:id, text="What do you call a bee that lives in America? A USB." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_date()
C: #[results=[
C:   { date=new Date("2021-11-02T07:00:00.000Z") }
C: ]];
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say();
A: What would you like me to say?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(message);
AT: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say();
U: Best reminder.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="AXvHeVvHeib"^^com.icanhazdadjoke:id, text="What do you call a bee that lives in America? A USB." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_date()
C: #[results=[
C:   { date=new Date("2021-11-02T07:00:00.000Z") }
C: ]];
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.")
C: #[results=[]];
A: Alright, I will send you a message Best reminder. At 2 minutes past now.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: What will be the weather today at noon?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=set_time($start_of(day), new Time(12, 0)));
====
# recording/07635fc10cca272a844db8627b8107a4
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="scaUn3TfNe"^^com.icanhazdadjoke:id, text="So, I heard this pun about cows, but it’s kinda offensive so I won’t say it. I don’t want there to be any beef between us. " }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(13, 51, 58) }
C: ]];
A: Right now, it's 1:51 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Play my favorite music everyday at 10:00 AM.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: attimer(time=[new Time(10, 0)]) => @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/10bf22693c17b370d250df34b9c9f491
U: Play my favorite songs by Taylor Swift.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Sorry, there are no your favorites matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: Play my favorites by Sia.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() filter contains(artists, null^^org.thingpedia.media-source:artist("sia")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3S4px9f4lceWdKf0gWciFu"^^org.thingpedia.media-source:playable("Cheap Thrills"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2s1sdSqGcKxpPr5lCl7jAV"^^org.thingpedia.media-source:playable("Chandelier"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0lHAMNU8RGiIObScrsRgmP"^^org.thingpedia.media-source:playable("Titanium (feat. Sia)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played your favorites by Sia on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is this?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
====
# recording/bb375e239b14b6d82f01f3a618b22243
U: get me the news and the weather forecast.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.forecast();
====
# recording/c4d9c9f499be4c979f51e02fd78b9253
U: add, shake it off to my playlist. Test almonds.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter id =~ "shake it off" => @com.spotify.add_song_to_playlist(playlist="test almonds", song=id);
====
# recording/41df826c9fac95bc388ed6abd5b3a64e
U: find songs by Taylor Swift.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift"))
C: #[results=[
C:   { id="spotify:track:1Ov37jtRQ2YNAe8HzfczkL"^^org.thingpedia.media-source:song("Wildest Dreams (Taylor's Version)"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:5hxKw2PurC0i1VVJMAntDU"^^org.thingpedia.media-source:album("Wildest Dreams (Taylor's Version)"), genres=["pop"], release_date=new Date("2021-09-17T00:00:00.000Z"), popularity=87, energy=67, danceability=58.3, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1p80LdxRV74UKvL8gnD7ky"^^org.thingpedia.media-source:song("Blank Space"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:2QJmrSgbdM35R67eoGQo4j"^^org.thingpedia.media-source:album("1989"), genres=["pop"], release_date=new Date("2014-10-27T00:00:00.000Z"), popularity=74, energy=67.80000000000001, danceability=75.2, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:59HjlYCeBsxdI0fcm3zglw"^^org.thingpedia.media-source:song("Wildest Dreams"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:2QJmrSgbdM35R67eoGQo4j"^^org.thingpedia.media-source:album("1989"), genres=["pop"], release_date=new Date("2014-10-27T00:00:00.000Z"), popularity=74, energy=66.4, danceability=55.300000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4pvb0WLRcMtbPGmtejJJ6y"^^org.thingpedia.media-source:song("exile (feat. Bon Iver)"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift"), "spotify:artist:4LEiUm1SRbFMgfqnQTwUbQ"^^org.thingpedia.media-source:artist("Bon Iver")], album="spotify:album:2fenSS68JI1h4Fo296JfGr"^^org.thingpedia.media-source:album("folklore"), genres=["pop", "eau claire indie", "indie folk", "melancholia"], release_date=new Date("2020-07-24T00:00:00.000Z"), popularity=81, energy=38, danceability=29.799999999999997, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3hUxzQpSfdDqwM3ZTFQY0K"^^org.thingpedia.media-source:song("august"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:2fenSS68JI1h4Fo296JfGr"^^org.thingpedia.media-source:album("folklore"), genres=["pop"], release_date=new Date("2020-07-24T00:00:00.000Z"), popularity=81, energy=62.3, danceability=53.2, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4R2kfaDFhslZEMJqAFNpdd"^^org.thingpedia.media-source:song("cardigan"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:2fenSS68JI1h4Fo296JfGr"^^org.thingpedia.media-source:album("folklore"), genres=["pop"], release_date=new Date("2020-07-24T00:00:00.000Z"), popularity=81, energy=58.099999999999994, danceability=61.3, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1dGr1c8CrMLDpV6mPbImSI"^^org.thingpedia.media-source:song("Lover"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:1NAmidJlEaVgA3MpcPFYGq"^^org.thingpedia.media-source:album("Lover"), genres=["pop"], release_date=new Date("2019-08-23T00:00:00.000Z"), popularity=80, energy=54.300000000000004, danceability=35.9, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0sY6ZUTh4yoctD8VIXz339"^^org.thingpedia.media-source:song("champagne problems"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:2Xoteh7uEpea4TohMxjtaq"^^org.thingpedia.media-source:album("evermore"), genres=["pop"], release_date=new Date("2020-12-11T00:00:00.000Z"), popularity=78, energy=24, danceability=46.2, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1q3RiD1tIWUpGsNFADMlvl"^^org.thingpedia.media-source:song("All Too Well"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:1KlU96Hw9nlvqpBPlSqcTV"^^org.thingpedia.media-source:album("Red (Deluxe Edition)"), genres=["pop"], release_date=new Date("2012-10-22T00:00:00.000Z"), popularity=72, energy=60.9, danceability=60.199999999999996, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0lx2cLdOt3piJbcaXIV74f"^^org.thingpedia.media-source:song("willow"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:2Xoteh7uEpea4TohMxjtaq"^^org.thingpedia.media-source:album("evermore"), genres=["pop"], release_date=new Date("2020-12-11T00:00:00.000Z"), popularity=80, energy=57.4, danceability=39.2, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Wildest Dreams (Taylor's Version), Blank Space, and Wildest Dreams. They're songs by Taylor Swift.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: add wildest dreams to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")) && id == null^^org.thingpedia.media-source:song("wildest dreams") => @com.spotify.add_song_to_playlist(song=id);
====
# recording/64ca5ae9da86f1d2f10d3c3a0c3a66bc
U: Find a restaurant in San Francisco.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("san francisco");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="cp4TCdahqc"^^com.icanhazdadjoke:id, text="I got fired from a florist, apparently I took too many leaves." }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.7790262, -122.419906, "San Francisco, California")
C: #[results=[
C:   { id="lJAGnYzku5zSaLnQ_T6_GQ"^^com.yelp:restaurant("Brenda's French Soul Food"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/olWZc1SyhyPkz1btzms_hg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/brendas-french-soul-food-san-francisco-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "southern"^^com.yelp:restaurant_cuisine("Southern"), "cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole")], price=enum moderate, rating=4, review_count=11236, geo=new Location(37.7829016035273, -122.419043442957, "652 Polk St, San Francisco, CA 94102"), phone="+14153458100"^^tt:phone_number },
C:   { id="hqQoVK0vadOX7_4gN1sh3g"^^com.yelp:restaurant("Saigon Sandwich"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/lE_HHijKAKt08JIeRHVh7w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/saigon-sandwich-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum cheap, rating=4.5, review_count=3413, geo=new Location(37.7831519576568, -122.417318022037, "560 Larkin St, San Francisco, CA 94102"), phone="+14154745698"^^tt:phone_number },
C:   { id="HHtpR0RslupSQ99GIIwW5A"^^com.yelp:restaurant("Marufuku Ramen"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/ouK2VmW0SrI70jsJpTxJhw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/marufuku-ramen-san-francisco-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen")], price=enum moderate, rating=4.5, review_count=3451, geo=new Location(37.78520111708754, -122.43200834862841, "1581 Webster St, Ste 235, San Francisco, CA 94115"), phone="+14158729786"^^tt:phone_number },
C:   { id="ciEDsTWhajcdL3KuJqBRlw"^^com.yelp:restaurant("Espetus Churrascaria"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/F9G1pFFitfi9F4rJw_nrpQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/espetus-churrascaria-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["steak"^^com.yelp:restaurant_cuisine("Steakhouses"), "latin"^^com.yelp:restaurant_cuisine("Latin American"), "brazilian"^^com.yelp:restaurant_cuisine("Brazilian")], price=enum expensive, rating=4, review_count=3510, geo=new Location(37.7733327504928, -122.422131667494, "1686 Market St, San Francisco, CA 94102"), phone="+14155528792"^^tt:phone_number },
C:   { id="-DrR38H1Abk0wCyu9XOLug"^^com.yelp:restaurant("Sweet Maple"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/etyS0Af-PS74CTwxly2uoA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/sweet-maple-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "burgers"^^com.yelp:restaurant_cuisine("Burgers")], price=enum moderate, rating=4.5, review_count=4104, geo=new Location(37.785735681426, -122.43507770852, "2101 Sutter St, San Francisco, CA 94115"), phone="+14156559169"^^tt:phone_number },
C:   { id="DGyoVB9PdI9_jw0CNi_OPg"^^com.yelp:restaurant("Suppenküche"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/HAumhGEjTcqstgie00Fjag/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/suppenk%C3%BCche-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["german"^^com.yelp:restaurant_cuisine("German")], price=enum moderate, rating=4, review_count=3184, geo=new Location(37.7762603759766, -122.426391601562, "525 Laguna St, San Francisco, CA 94102"), phone="+14152529289"^^tt:phone_number },
C:   { id="2hGIxgprREdBieylltWaRQ"^^com.yelp:restaurant("Limoncello"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/GNMz7gMIMgmBZr4WAYUQsw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/limoncello-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches"), "delis"^^com.yelp:restaurant_cuisine("Delis")], price=enum moderate, rating=5, review_count=1232, geo=new Location(37.7873184067081, -122.423591369312, "1400 Sutter St, San Francisco, CA 94109"), phone="+14156386361"^^tt:phone_number },
C:   { id="353bun0151fMbR3ut2d-nw"^^com.yelp:restaurant("Absinthe Brasserie & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/OGEU913CZcjrVIMvlHQHMQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/absinthe-brasserie-and-bar-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French")], price=enum expensive, rating=4, review_count=3286, geo=new Location(37.77714, -122.42268, "398 Hayes St, San Francisco, CA 94102"), phone="+14155511590"^^tt:phone_number },
C:   { id="oT08T3Vpn1I7jDmrBBRMTw"^^com.yelp:restaurant("House of Prime Rib"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/HLrjaMoAgYSac0vx71YpCA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/house-of-prime-rib-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)"), "steak"^^com.yelp:restaurant_cuisine("Steakhouses")], price=enum expensive, rating=4, review_count=7527, geo=new Location(37.79338, -122.4225, "1906 Van Ness Ave, San Francisco, CA 94109"), phone="+14158854605"^^tt:phone_number },
C:   { id="GXu3PD4IPsxIHpo011aydg"^^com.yelp:restaurant("Bob's Donuts & Pastry Shop"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/NbXrMs9bEMJ1biVlLJgzXw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/bobs-donuts-and-pastry-shop-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan")], price=enum cheap, rating=4.5, review_count=3267, geo=new Location(37.791883, -122.4212, "1621 Polk St, San Francisco, CA 94109"), phone="+14157763141"^^tt:phone_number }
C: ]]
C: #[count=20];
A: I see Brenda's French Soul Food, Saigon Sandwich, and Marufuku Ramen. Brenda's French Soul Food is rated 4 star, Saigon Sandwich is rated 4.5 star, and Marufuku Ramen is rated 4.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: what's the address?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [geo] of @com.yelp.restaurant() filter geo == new Location(37.7790262, -122.419906, "San Francisco, California");
====
# recording/cde9fa1415ebee8229826d68e4943710
U: find me a radio station.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.tunein.station();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.tunein.station()
C: #[results=[
C:   { id="station:s25670"^^com.tunein:station("RTHK 3"), show="Night Music", link="http://opml.radiotime.com/Tune.ashx?id=s25670"^^tt:url, image="http://cdn-radiotime-logos.tunein.com/s25670q.png"^^tt:picture },
C:   { id="station:s27437"^^com.tunein:station("WBGO"), show="The World's Premier Jazz Radio Station, NYC And NJ", link="http://opml.radiotime.com/Tune.ashx?id=s27437"^^tt:url, image="http://cdn-profiles.tunein.com/s27437/images/logoq.png?t=1"^^tt:picture },
C:   { id="station:s17077"^^com.tunein:station("talkSPORT"), show="What Real Sport Sounds Like", link="http://opml.radiotime.com/Tune.ashx?id=s17077"^^tt:url, image="http://cdn-profiles.tunein.com/s17077/images/logoq.png?t=1"^^tt:picture },
C:   { id="station:s27111"^^com.tunein:station("WAMU"), show="All Things Considered", link="http://opml.radiotime.com/Tune.ashx?id=s27111"^^tt:url, image="http://cdn-profiles.tunein.com/s27111/images/logoq.png"^^tt:picture },
C:   { id="station:s24948"^^com.tunein:station("BBC World Service News"), show="Discovery", link="http://opml.radiotime.com/Tune.ashx?id=s24948"^^tt:url, image="http://cdn-profiles.tunein.com/s24948/images/logoq.jpg?t=1"^^tt:picture },
C:   { id="station:s22469"^^com.tunein:station("98.7 FM ESPN New York"), show="The Michael Kay Show", link="http://opml.radiotime.com/Tune.ashx?id=s22469"^^tt:url, image="http://cdn-profiles.tunein.com/s22469/images/logoq.jpg?t=1"^^tt:picture },
C:   { id="station:s25419"^^com.tunein:station("BBC Radio 4"), show="Start the Week", link="http://opml.radiotime.com/Tune.ashx?id=s25419"^^tt:url, image="http://cdn-radiotime-logos.tunein.com/s25419q.png"^^tt:picture },
C:   { id="station:s24940"^^com.tunein:station("BBC Radio 2"), show="The Blues Show with Cerys Matthews", link="http://opml.radiotime.com/Tune.ashx?id=s24940"^^tt:url, image="http://cdn-radiotime-logos.tunein.com/s24940q.png"^^tt:picture },
C:   { id="station:s27533"^^com.tunein:station("98.5 The Sports Hub"), show="Boston's Home For Sports!", link="http://opml.radiotime.com/Tune.ashx?id=s27533"^^tt:url, image="http://cdn-profiles.tunein.com/s27533/images/logoq.png?t=3"^^tt:picture },
C:   { id="station:s27654"^^com.tunein:station("WBUR FM"), show="All Things Considered", link="http://opml.radiotime.com/Tune.ashx?id=s27654"^^tt:url, image="http://cdn-radiotime-logos.tunein.com/s27654q.png"^^tt:picture }
C: ]]
C: #[count=50]
C: #[more=true];
A: I see RTHK 3 and WBGO. RTHK 3 is currently streaming Night Music, while WBGO is currently streaming The World's Premier Jazz Radio Station, NYC And NJ.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_two;
U: play a podcast from KQED.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "kqed" => @org.thingpedia.media-player.play(playable=id);
====
# recording/1022995d5ea9848f3423dce12dd69304
U: play some pop music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "pop") => @org.thingpedia.media-player.play(playable=id);
====
# recording/b87ef729e26f364c33a3d6ece12bc18d
U: play my dance playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "dance" => @org.thingpedia.media-player.play(playable=id);
====
# recording/91c0af7b39d11c3e222c03a885a6de68
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter contains(opening_hours, set_time($now, new Time(16, 0)))
C: #[results=[
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1442, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/M_R1GHVgPC8rS-KnkaPALA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1174, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2379, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="GViud5vyi4IxkZ-g6FYuaA"^^com.yelp:restaurant("Mediterranean Wraps"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/LnU4ucAWzqP1twWguAfhvg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/mediterranean-wraps-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=4, review_count=1047, geo=new Location(37.4259033203125, -122.144721984863, "433 S California Ave, Palo Alto, CA 94306"), phone="+16503218189"^^tt:phone_number },
C:   { id="hl2yriEDrXYTj1XFjaImGg"^^com.yelp:restaurant("Fambrini's Cafe"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/i20LGOuso7AsXVrOW18Rag/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/fambrinis-cafe-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches"), "salad"^^com.yelp:restaurant_cuisine("Salad"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4.5, review_count=597, geo=new Location(37.4242609, -122.1449674, "2500 El Camino Real, Palo Alto, CA 94306"), phone="+16508581268"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/sFr91fN0iGlhhSO21S01Jg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-6?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=817, geo=new Location(37.442174, -122.161583, "101 Forest Ave, Palo Alto, CA 94301"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/eoOED41qKM_HEp1nVMaHTQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/crepevine-restaurants-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "creperies"^^com.yelp:restaurant_cuisine("Crepes"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=1389, geo=new Location(37.44698, -122.161, "367 University Ave, Palo Alto, CA 94301"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/4OvcoE7WgF5UVlh-_KEndQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/palo-alto-creamery-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["diners"^^com.yelp:restaurant_cuisine("Diners"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=1415, geo=new Location(37.4438831241214, -122.16178176729, "566 Emerson St, Palo Alto, CA 94301"), phone="+16503233131"^^tt:phone_number },
C:   { id="T7EzfBA_AC3ys-S1McYsKA"^^com.yelp:restaurant("True Food Kitchen"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/LoHpONFnkKAvdtovWU5phg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/true-food-kitchen-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "vegan"^^com.yelp:restaurant_cuisine("Vegan"), "vegetarian"^^com.yelp:restaurant_cuisine("Vegetarian")], price=enum moderate, rating=4, review_count=1255, geo=new Location(37.443921, -122.170323, "180 El Camino Real, Palo Alto, CA 94304"), phone="+16502725157"^^tt:phone_number },
C:   { id="fxnUYgv4gOlyV6BjCanijQ"^^com.yelp:restaurant("Driftwood Deli and Market"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/fQdMKbdjwRTYYW2r5ZYjtg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/driftwood-deli-and-market-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["delis"^^com.yelp:restaurant_cuisine("Delis"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4.5, review_count=433, geo=new Location(37.41912090543142, -122.13494795495569, "3450 El Camino Real, Palo Alto, CA 94306"), phone="+16504934162"^^tt:phone_number }
C: ]]
C: #[count=20];
C: [opening_hours] of @com.yelp.restaurant() filter contains(opening_hours, set_time($now, new Time(16, 0))) && id == "_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee")
C: #[results=[
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(6, 0), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(6, 0), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum sunday }) }
C: ]];
C: sort(rating desc of @com.yelp.restaurant() filter contains(cuisines, "mexican"^^com.yelp:restaurant_cuisine("Mexican")) && geo == new Location(37.4863239, -122.232523, "Redwood City, California"))[1]
C: #[results=[
C:   { id="mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/OwiTEOfpmSIQ-ja12QiY-Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-fonda-de-los-carnalitos-redwood-city-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican")], rating=5, review_count=38, geo=new Location(37.49025, -122.22893, "820 Veterans Blvd, Redwood City, CA 94063"), phone="+16503623069"^^tt:phone_number }
C: ]];
C: [opening_hours] of sort(rating desc of @com.yelp.restaurant() filter contains(cuisines, "mexican"^^com.yelp:restaurant_cuisine("Mexican")) && geo == new Location(37.4863239, -122.232523, "Redwood City, California") && id == "mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"))[1]
C: #[results=[
C:   { id="mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum saturday }) }
C: ]];
C: [opening_hours] of sort(rating desc of @com.yelp.restaurant() filter contains(cuisines, "mexican"^^com.yelp:restaurant_cuisine("Mexican")) && contains(opening_hours, set_time($now, new Time(12, 0))) && geo == new Location(37.4863239, -122.232523, "Redwood City, California"))[1]
C: #[results=[
C:   { id="mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum saturday }) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [opening_hours] of @com.yelp.restaurant() filter contains(opening_hours, set_time($now, new Time(16, 0))) && id == "_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee")
C: #[results=[
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(6, 0), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(6, 0), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum sunday }) }
C: ]];
C: sort(rating desc of @com.yelp.restaurant() filter contains(cuisines, "mexican"^^com.yelp:restaurant_cuisine("Mexican")) && geo == new Location(37.4863239, -122.232523, "Redwood City, California"))[1]
C: #[results=[
C:   { id="mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/OwiTEOfpmSIQ-ja12QiY-Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-fonda-de-los-carnalitos-redwood-city-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican")], rating=5, review_count=38, geo=new Location(37.49025, -122.22893, "820 Veterans Blvd, Redwood City, CA 94063"), phone="+16503623069"^^tt:phone_number }
C: ]];
C: [opening_hours] of sort(rating desc of @com.yelp.restaurant() filter contains(cuisines, "mexican"^^com.yelp:restaurant_cuisine("Mexican")) && geo == new Location(37.4863239, -122.232523, "Redwood City, California") && id == "mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"))[1]
C: #[results=[
C:   { id="mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum saturday }) }
C: ]];
C: [opening_hours] of sort(rating desc of @com.yelp.restaurant() filter contains(cuisines, "mexican"^^com.yelp:restaurant_cuisine("Mexican")) && contains(opening_hours, set_time($now, new Time(12, 0))) && geo == new Location(37.4863239, -122.232523, "Redwood City, California"))[1]
C: #[results=[
C:   { id="mQ3IEOvlWVl5ORYpQx-Hyg"^^com.yelp:restaurant("La Fonda De Los Carnalitos"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(10, 0), endTime=new Time(21, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(10, 0), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum saturday }) }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Test almond.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="test almond", song=id);
====
# recording/56b7356507956cd03911dd6392eb7604
U: Find a song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song()
C: #[results=[
C:   { id="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:song("Home"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=60, energy=16.2, danceability=51.800000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:song("MEGALOVANIA"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=70, energy=63.2, danceability=71.89999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:song("Undyne"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=43.3, danceability=67.60000000000001, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:song("Determination"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=0.485, danceability=78.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:song("Don't Give Up"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=38.5, danceability=60.4, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:song("Oh! One True Love"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=48, energy=21.4, danceability=66.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:song("An Ending"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=21.4, danceability=56.99999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:song("Dating Fight!"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=50, energy=66, danceability=74.1, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:song("Quiet Water"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=57, energy=0.831, danceability=40.6, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:song("SAVE The World"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=55, energy=91.5, danceability=31.900000000000002, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Home, MEGALOVANIA, and Undyne. They're songs by Toby Fox.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: Find songs by The Beatles.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, null^^org.thingpedia.media-source:artist("beatles"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song()
C: #[results=[
C:   { id="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:song("Home"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=60, energy=16.2, danceability=51.800000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:song("MEGALOVANIA"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=70, energy=63.2, danceability=71.89999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:song("Undyne"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=43.3, danceability=67.60000000000001, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:song("Determination"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=0.485, danceability=78.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:song("Don't Give Up"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=49, energy=38.5, danceability=60.4, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:song("Oh! One True Love"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=48, energy=21.4, danceability=66.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:song("An Ending"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=51, energy=21.4, danceability=56.99999999999999, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:song("Dating Fight!"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=50, energy=66, danceability=74.1, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:song("Quiet Water"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=57, energy=0.831, danceability=40.6, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:song("SAVE The World"), artists=["spotify:artist:57DlMWmbVIf2ssJ8QBpBau"^^org.thingpedia.media-source:artist("Toby Fox")], album="spotify:album:2M2Ae2SvZe3fmzUtlVOV5Z"^^org.thingpedia.media-source:album("UNDERTALE Soundtrack"), genres=["dream smp", "indie game soundtrack"], release_date=new Date("2015-09-15T00:00:00.000Z"), popularity=55, energy=91.5, danceability=31.900000000000002, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles"))
C: #[results=[
C:   { id="spotify:track:6dGnYIeXmHdcikdzNNDMm2"^^org.thingpedia.media-source:song("Here Comes The Sun - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:0ETFjACtuP2ADo6LFhL6HN"^^org.thingpedia.media-source:album("Abbey Road (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1969-09-26T00:00:00.000Z"), popularity=82, energy=54, danceability=55.7, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:2EqlS6tkEnglzr7tkKAAYD"^^org.thingpedia.media-source:song("Come Together - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:0ETFjACtuP2ADo6LFhL6HN"^^org.thingpedia.media-source:album("Abbey Road (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1969-09-26T00:00:00.000Z"), popularity=78, energy=37.6, danceability=53.300000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:7iN1s7xHE4ifF5povM6A48"^^org.thingpedia.media-source:song("Let It Be - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:0jTGHV5xqHPvEcwL8f6YU5"^^org.thingpedia.media-source:album("Let It Be (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1970-05-08T00:00:00.000Z"), popularity=78, energy=40.300000000000004, danceability=44.3, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3BQHpFgAp4l80e1XslIjNI"^^org.thingpedia.media-source:song("Yesterday - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:0PT5m6hwPRrpBwIHVnvbFX"^^org.thingpedia.media-source:album("Help! (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1965-08-06T00:00:00.000Z"), popularity=77, energy=17.9, danceability=33.2, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:5jgFfDIR6FR0gvlA56Nakr"^^org.thingpedia.media-source:song("Blackbird - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:1klALx0u4AavZNEvC4LrTL"^^org.thingpedia.media-source:album("The Beatles (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1968-11-22T00:00:00.000Z"), popularity=74, energy=12.7, danceability=68.60000000000001, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:song("Hey Jude - Remastered 2015"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:7vEJAtP3KgKSpOHVgwm3Eh"^^org.thingpedia.media-source:album("1 (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("2000-11-13T00:00:00.000Z"), popularity=75, energy=60.699999999999996, danceability=38.6, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3KfbEIOC7YIv90FIfNSZpo"^^org.thingpedia.media-source:song("In My Life - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:50o7kf2wLwVmOTVYJOTplm"^^org.thingpedia.media-source:album("Rubber Soul (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1965-12-03T00:00:00.000Z"), popularity=73, energy=43.5, danceability=68.8, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:5ZBeML7Lf3FMEVviTyvi8l"^^org.thingpedia.media-source:song("Twist And Shout - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:3KzAvEXcqJKBF97HrXwlgf"^^org.thingpedia.media-source:album("Please Please Me (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1963-03-22T00:00:00.000Z"), popularity=74, energy=84.89999999999999, danceability=48.199999999999996, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4pbG9SUmWIvsROVLF0zF9s"^^org.thingpedia.media-source:song("I Want To Hold Your Hand - Remastered 2015"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:7vEJAtP3KgKSpOHVgwm3Eh"^^org.thingpedia.media-source:album("1 (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("2000-11-13T00:00:00.000Z"), popularity=72, energy=71.5, danceability=49, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3Am0IbOxmvlSXro7N5iSfZ"^^org.thingpedia.media-source:song("Strawberry Fields Forever - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")], album="spotify:album:2BtE7qm1qzM80p9vLSiXkj"^^org.thingpedia.media-source:album("Magical Mystery Tour (Remastered)"), genres=["beatlesque", "british invasion", "classic rock", "merseybeat", "psychedelic rock", "rock"], release_date=new Date("1967-11-27T00:00:00.000Z"), popularity=70, energy=50.2, danceability=39, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Here Comes The Sun - Remastered 2009, Come Together - Remastered 2009, and Let It Be - Remastered 2009.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: let add, let it be to a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter id =~ "let it be" => @com.spotify.add_song_to_playlist(song=id);
====
# recording/836e50bee25066216371487b79354c60
U: get me the news and find a restaurant in Palo Alto.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @com.yelp.restaurant() filter geo == new Location("palo alto");
====
# recording/8876a886e747b44fb4e90736b0cd9968
U: Play my dance hits playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "dance hits" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "dance hits")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0BcQWzuB7ZO"^^org.thingpedia.media-source:playable("Dance Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Dance Hits on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is currently playing.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "dance hits")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0BcQWzuB7ZO"^^org.thingpedia.media-source:playable("Dance Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:2gpWyfu7eZ01zzncHpxOtA"^^org.thingpedia.media-source:song("Moth To A Flame (with The Weeknd)"), artists=["spotify:artist:1h6Cn3P4NGzXbaXidqURXs"^^org.thingpedia.media-source:artist("Swedish House Mafia"), "spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")], album="spotify:album:3udIvIqyBG1RrHxXrUZDoK"^^org.thingpedia.media-source:album("Moth To A Flame"), genres=["dance pop", "edm", "electro house", "pop", "pop dance", "progressive electro house", "canadian contemporary r&b", "canadian pop"], release_date=new Date("2021-10-22T00:00:00.000Z"), popularity=90, energy=65.9, danceability=54.2, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Currently playing Moth To A Flame (with The Weeknd) by Swedish House Mafia and The Weeknd.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: next song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "dance hits")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0BcQWzuB7ZO"^^org.thingpedia.media-source:playable("Dance Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:2gpWyfu7eZ01zzncHpxOtA"^^org.thingpedia.media-source:song("Moth To A Flame (with The Weeknd)"), artists=["spotify:artist:1h6Cn3P4NGzXbaXidqURXs"^^org.thingpedia.media-source:artist("Swedish House Mafia"), "spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")], album="spotify:album:3udIvIqyBG1RrHxXrUZDoK"^^org.thingpedia.media-source:album("Moth To A Flame"), genres=["dance pop", "edm", "electro house", "pop", "pop dance", "progressive electro house", "canadian contemporary r&b", "canadian pop"], release_date=new Date("2021-10-22T00:00:00.000Z"), popularity=90, energy=65.9, danceability=54.2, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is this?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing();
====
# recording/c98b1456d29bda65a2ed8d744d30cb35
U: what's the most recent song by Adele?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("adele")))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1]
C: #[results=[
C:   { id="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:song("Easy On Me"), artists=["spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")], album="spotify:album:224jZ4sUX7OhAuMwaxp86S"^^org.thingpedia.media-source:album("Easy On Me"), genres=["british soul", "pop", "pop soul", "uk pop"], release_date=new Date("2021-10-14T00:00:00.000Z"), popularity=100, energy=36.6, danceability=60.4, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Easy On Me. It is a song in the album Easy On Me by Adele.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: play it.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.play(playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:song("Easy On Me"));
====
# recording/a7d6902a0443e5dd1e77e13968aa1117
U: Cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/01216697b99838f06fc05fc37683f4ad
U: play Owl City.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("owl city")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/9e724ed19bcbd14a4474d80b8a9d4e3f
U: What's the most popular album by Sia?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.album() filter contains(artists, null^^org.thingpedia.media-source:artist("sia")))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1]
C: #[results=[
C:   { id="spotify:album:2eV6DIPDnGl1idcjww6xyX"^^org.thingpedia.media-source:album("This Is Acting (Deluxe Version)"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")], release_date=new Date("2016-10-21T00:00:00.000Z"), popularity=79, genres=[], __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: The album with the highest popularity is This Is Acting (Deluxe Version). It is an album by Sia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: play it.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.play(playable="spotify:album:2eV6DIPDnGl1idcjww6xyX"^^org.thingpedia.media-source:album("This Is Acting (Deluxe Version)"));
====
# recording/0a8822408374cf2efc9b31057ed410f4
U: Tell me the weather every morning.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: attimer(time=[$time.morning]) => @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: attimer(time=[new Time(8, 30)]) => @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[]];
A: Alright, I will get the current weather in Palo Alto, California every day at 8:30 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: Tell me the news and the weather every morning.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: attimer(time=[$time.morning]) => @com.smartnews.article();
UT: attimer(time=[$time.morning]) => @org.thingpedia.weather.current();
====
# recording/1c5f55924ed14baa7edcb6f9d5f5164d
U: Tell me the news and the weather.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.current();
====
# recording/8a12517e157e54549aedb90fdb646167
U: play the most popular album.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.album())[1] => @org.thingpedia.media-player.play(playable=id);
====
# recording/5f64674af82b6df205417402f1284ad5
U: get me the news and the weather tomorrow.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.forecast();
====
# recording/5464952da9fd22b5d3431f35fab867cc
U: get me the news and the weather in San Francisco.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.current(location=new Location("san francisco"));
====
# recording/d61a33c972793f58d8fc87beb9f785e8
U: find me a restaurant in San Francisco?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("san francisco");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter geo == new Location(37.7790262, -122.419906, "San Francisco, California")
C: #[results=[
C:   { id="lJAGnYzku5zSaLnQ_T6_GQ"^^com.yelp:restaurant("Brenda's French Soul Food"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/olWZc1SyhyPkz1btzms_hg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/brendas-french-soul-food-san-francisco-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "southern"^^com.yelp:restaurant_cuisine("Southern"), "cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole")], price=enum moderate, rating=4, review_count=11234, geo=new Location(37.7829016035273, -122.419043442957, "652 Polk St, San Francisco, CA 94102"), phone="+14153458100"^^tt:phone_number },
C:   { id="hqQoVK0vadOX7_4gN1sh3g"^^com.yelp:restaurant("Saigon Sandwich"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/lE_HHijKAKt08JIeRHVh7w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/saigon-sandwich-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum cheap, rating=4.5, review_count=3413, geo=new Location(37.7831519576568, -122.417318022037, "560 Larkin St, San Francisco, CA 94102"), phone="+14154745698"^^tt:phone_number },
C:   { id="HHtpR0RslupSQ99GIIwW5A"^^com.yelp:restaurant("Marufuku Ramen"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/ouK2VmW0SrI70jsJpTxJhw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/marufuku-ramen-san-francisco-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen")], price=enum moderate, rating=4.5, review_count=3451, geo=new Location(37.78520111708754, -122.43200834862841, "1581 Webster St, Ste 235, San Francisco, CA 94115"), phone="+14158729786"^^tt:phone_number },
C:   { id="ciEDsTWhajcdL3KuJqBRlw"^^com.yelp:restaurant("Espetus Churrascaria"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/F9G1pFFitfi9F4rJw_nrpQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/espetus-churrascaria-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["steak"^^com.yelp:restaurant_cuisine("Steakhouses"), "latin"^^com.yelp:restaurant_cuisine("Latin American"), "brazilian"^^com.yelp:restaurant_cuisine("Brazilian")], price=enum expensive, rating=4, review_count=3510, geo=new Location(37.7733327504928, -122.422131667494, "1686 Market St, San Francisco, CA 94102"), phone="+14155528792"^^tt:phone_number },
C:   { id="-DrR38H1Abk0wCyu9XOLug"^^com.yelp:restaurant("Sweet Maple"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/etyS0Af-PS74CTwxly2uoA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/sweet-maple-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "burgers"^^com.yelp:restaurant_cuisine("Burgers")], price=enum moderate, rating=4.5, review_count=4103, geo=new Location(37.785735681426, -122.43507770852, "2101 Sutter St, San Francisco, CA 94115"), phone="+14156559169"^^tt:phone_number },
C:   { id="DGyoVB9PdI9_jw0CNi_OPg"^^com.yelp:restaurant("Suppenküche"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/HAumhGEjTcqstgie00Fjag/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/suppenk%C3%BCche-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["german"^^com.yelp:restaurant_cuisine("German")], price=enum moderate, rating=4, review_count=3183, geo=new Location(37.7762603759766, -122.426391601562, "525 Laguna St, San Francisco, CA 94102"), phone="+14152529289"^^tt:phone_number },
C:   { id="2hGIxgprREdBieylltWaRQ"^^com.yelp:restaurant("Limoncello"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/GNMz7gMIMgmBZr4WAYUQsw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/limoncello-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches"), "delis"^^com.yelp:restaurant_cuisine("Delis")], price=enum moderate, rating=5, review_count=1232, geo=new Location(37.7873184067081, -122.423591369312, "1400 Sutter St, San Francisco, CA 94109"), phone="+14156386361"^^tt:phone_number },
C:   { id="353bun0151fMbR3ut2d-nw"^^com.yelp:restaurant("Absinthe Brasserie & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/OGEU913CZcjrVIMvlHQHMQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/absinthe-brasserie-and-bar-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French")], price=enum expensive, rating=4, review_count=3286, geo=new Location(37.77714, -122.42268, "398 Hayes St, San Francisco, CA 94102"), phone="+14155511590"^^tt:phone_number },
C:   { id="oT08T3Vpn1I7jDmrBBRMTw"^^com.yelp:restaurant("House of Prime Rib"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/HLrjaMoAgYSac0vx71YpCA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/house-of-prime-rib-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)"), "steak"^^com.yelp:restaurant_cuisine("Steakhouses")], price=enum expensive, rating=4, review_count=7526, geo=new Location(37.79338, -122.4225, "1906 Van Ness Ave, San Francisco, CA 94109"), phone="+14158854605"^^tt:phone_number },
C:   { id="GXu3PD4IPsxIHpo011aydg"^^com.yelp:restaurant("Bob's Donuts & Pastry Shop"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/NbXrMs9bEMJ1biVlLJgzXw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/bobs-donuts-and-pastry-shop-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan")], price=enum cheap, rating=4.5, review_count=3267, geo=new Location(37.791883, -122.4212, "1621 Polk St, San Francisco, CA 94109"), phone="+14157763141"^^tt:phone_number }
C: ]]
C: #[count=20];
A: I see Brenda's French Soul Food, Saigon Sandwich, and Marufuku Ramen. Brenda's French Soul Food is rated 4 star, Saigon Sandwich is rated 4.5 star, and Marufuku Ramen is rated 4.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: get the news and the weather there.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.current(location=new Location(37.7790262, -122.419906, "San Francisco, California"));
====
# recording/231cbb6ac90819e7dfcf2336df5f4cac
U: Tell me a joke every hour.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: timer(interval=1h) => @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[]];
A: Alright, I will get the joke every 60 minutes.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: tell me a joke.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
A: Want to hear a chimney joke? Got stacks of em! First one's on the house.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: shuffle.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on)
C: #[results=[
C:   { shuffle=enum on, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I set the shuffle state to on.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on)
C: #[results=[
C:   { shuffle=enum on, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this to a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=1h) => @com.icanhazdadjoke.get()
C: #[results=[]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5L9MJsGqzTRD09rSzHkCDy"^^org.thingpedia.media-source:playable("Home"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1J03Vp93ybKIxfzYI4YJtL"^^org.thingpedia.media-source:playable("MEGALOVANIA"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MoAGaJNyPwaLSB6iTLNg1"^^org.thingpedia.media-source:playable("Undyne"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3KHbBpwYdlM6uKJirvCrEA"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Yqrr5SMB84skeJ8cupJgs"^^org.thingpedia.media-source:playable("Don't Give Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4wBMMqeY2NnFnStBIPHxyG"^^org.thingpedia.media-source:playable("Oh! One True Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6eTcxkl9G7C2mwejLJ7Amm"^^org.thingpedia.media-source:playable("An Ending"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0KQnhlCVldP6qicvBy9IJ5"^^org.thingpedia.media-source:playable("Dating Fight!"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gt76DuMx7F3UZJPg7jcC5"^^org.thingpedia.media-source:playable("Quiet Water"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0w5CRIokPrQAAq7OdIKesr"^^org.thingpedia.media-source:playable("SAVE The World"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on)
C: #[results=[
C:   { shuffle=enum on, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Test almond.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="Test almond.", song=id);
====
# recording/2d7162e39a2084525820f2b89c133993
U: get me financial news and the weather.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article() filter contains(category, null^^com.smartnews:category("financial"));
UT: @org.thingpedia.weather.current();
====
# recording/8cb6ee37db27b14933fdb4865e45ad80
U: What are the three most popular song by Sia?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("sia")))[1 : 3];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1 : 3]
C: #[results=[
C:   { id="spotify:track:1yvMUkIOTeUNtNWlWRgANS"^^org.thingpedia.media-source:song("Unstoppable"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")], album="spotify:album:2eV6DIPDnGl1idcjww6xyX"^^org.thingpedia.media-source:album("This Is Acting (Deluxe Version)"), genres=["australian dance", "australian pop", "pop"], release_date=new Date("2016-10-21T00:00:00.000Z"), popularity=78, energy=77.9, danceability=46.800000000000004, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:7uoFMmxln0GPXQ0AcCBXRq"^^org.thingpedia.media-source:song("Snowman"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")], album="spotify:album:2vcGYJcPfXUmCdcXXqqukg"^^org.thingpedia.media-source:album("Everyday Is Christmas (Deluxe Edition)"), genres=["australian dance", "australian pop", "pop"], release_date=new Date("2018-11-01T00:00:00.000Z"), popularity=78, energy=51.2, danceability=71.6, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4xigPf2sigSPmuFH3qCelB"^^org.thingpedia.media-source:song("Genius (feat. Sia, Diplo, and Labrinth)"), artists=["spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia"), "spotify:artist:5fMUXHkw8R8eOP2RNVYEZX"^^org.thingpedia.media-source:artist("Diplo"), "spotify:artist:2feDdbD5araYcm6JhFHHw7"^^org.thingpedia.media-source:artist("Labrinth"), "spotify:artist:6IZ4ctovY9dl7bgHClAvKJ"^^org.thingpedia.media-source:artist("LSD")], album="spotify:album:0ujHQ5WCLuKJQXOqXpGtpf"^^org.thingpedia.media-source:album("LABRINTH, SIA & DIPLO PRESENT... LSD"), genres=["australian dance", "australian pop", "pop", "dance pop", "edm", "electro house", "house", "moombahton", "ninja", "pop dance", "tropical house", "indie poptimism"], release_date=new Date("2019-04-12T00:00:00.000Z"), popularity=75, energy=61.5, danceability=60.3, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I see Unstoppable, Snowman, and Genius (feat. Sia, Diplo, and Labrinth). They're australian dance songs which Sia wrote.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: play them.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter contains(artists, "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN"^^org.thingpedia.media-source:artist("Sia")))[1 : 3] => @org.thingpedia.media-player.play(playable=id);
====
# recording/c8f88f4c81d444f2c546e2821db240fa
U: Play my favorites.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:20OjFkqDnJKYnZe2HTh4oK"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HPf7WR1L4D6drk6DqaIqm"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4FzbIGcOW9Ob3zEyEmLpet"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6NyWT02RGO5OgT55JDjI08"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played your favorites on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: turn on shuffle.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:20OjFkqDnJKYnZe2HTh4oK"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HPf7WR1L4D6drk6DqaIqm"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4FzbIGcOW9Ob3zEyEmLpet"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6NyWT02RGO5OgT55JDjI08"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on)
C: #[results=[
C:   { shuffle=enum on, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I set the shuffle state to on.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:20OjFkqDnJKYnZe2HTh4oK"^^org.thingpedia.media-source:playable("Spear of Justice"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DBTrH6kBbF8CzNVcu5MQR"^^org.thingpedia.media-source:playable("Pong Dance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HPf7WR1L4D6drk6DqaIqm"^^org.thingpedia.media-source:playable("sans."), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4FzbIGcOW9Ob3zEyEmLpet"^^org.thingpedia.media-source:playable("Determination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LELFaNglE9B5xlcmd4qtQ"^^org.thingpedia.media-source:playable("Ding Dong Song - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6EJiVf7U0p1BBfs0qqeb1f"^^org.thingpedia.media-source:playable("Cut To The Feeling"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kPpge9JDLpcj15qgrPbYX"^^org.thingpedia.media-source:playable("Good Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DamFFqW32WihKkTVlwTYQ"^^org.thingpedia.media-source:playable("Fireflies"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6NyWT02RGO5OgT55JDjI08"^^org.thingpedia.media-source:playable("All Good Things (Come To An End)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_shuffle(shuffle=enum on)
C: #[results=[
C:   { shuffle=enum on, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/648c0c68b51e58fa3f3b9d39dafd2901
U: what will be the weather at 12:00 PM?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.")
C: #[results=[
C:   { message_output="Best reminder.", message="Best reminder." }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy today at 12:00 PM in Palo Alto, California and the temperature will be 20.3 degrees Celsius.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what will be the weather tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.")
C: #[results=[
C:   { message_output="Best reminder.", message="Best reminder." }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be sunny tomorrow in Palo Alto, California and the temperature will be 21 degrees Celsius.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what will be the weather on Saturday?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum saturday));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.")
C: #[results=[
C:   { message_output="Best reminder.", message="Best reminder." }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy on Saturday in Palo Alto, California and the temperature will be 16.2 degrees Celsius.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what will be the weather on 9:00 PM?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.")
C: #[results=[
C:   { message_output="Best reminder.", message="Best reminder." }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=0.5mps, humidity=95, cloudiness=42.2, fog=19.5, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T04:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy today at 9:00 PM in Palo Alto, California and the temperature will be 15.1 degrees Celsius.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what will be the weather tomorrow at 9:00 AM?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=set_time($end_of(day), new Time(9, 0)));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 2min]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Best reminder.")
C: #[results=[
C:   { message_output="Best reminder.", message="Best reminder." }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=0.5mps, humidity=95, cloudiness=42.2, fog=19.5, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T04:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($end_of(day), new Time(9, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=0.7mps, humidity=97.6, cloudiness=100, fog=77.3, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T16:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be foggy tomorrow at 9:00 AM in Palo Alto, California and the temperature will be 14.4 degrees Celsius.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Set a reminder at 8:30 AM.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=0.5mps, humidity=95, cloudiness=42.2, fog=19.5, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T04:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($end_of(day), new Time(9, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=0.7mps, humidity=97.6, cloudiness=100, fog=77.3, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T16:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say();
A: What would you like me to say?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(message);
AT: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say();
U: Reminder.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Reminder.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(12, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=0.2mps, humidity=70.7, cloudiness=53.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T19:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=0.5mps, humidity=95, cloudiness=42.2, fog=19.5, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T04:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($end_of(day), new Time(9, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=0.7mps, humidity=97.6, cloudiness=100, fog=77.3, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T16:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Reminder.")
C: #[results=[]];
A: Alright, I will send you a message Reminder. At 8:30 AM today.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: play some samba.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "samba") => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21C, wind_speed=1.3mps, humidity=68.1, cloudiness=3.9, fog=0.8, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=0.5mps, humidity=95, cloudiness=42.2, fog=19.5, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T04:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($end_of(day), new Time(9, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=0.7mps, humidity=97.6, cloudiness=100, fog=77.3, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T16:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Reminder.")
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "samba") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3898C4AbdbptwYet6547e5"^^org.thingpedia.media-source:playable("The Girl From Ipanema"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1xaTXPoDk4VOU9XhYX4KJM"^^org.thingpedia.media-source:playable("A Nightingale Sang In Berkeley Square"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3QKJELWORZZ7rUZDWeMWSA"^^org.thingpedia.media-source:playable("Agua De Beber"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:36SJ7ZFx8J1f1RsewmUwMX"^^org.thingpedia.media-source:playable("Magalenha"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4SrJyRdyHYxxkcVMQ3QkGE"^^org.thingpedia.media-source:playable("Corcovado (Quiet Nights Of Quiet Stars)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played samba music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=1.4mps, humidity=80.6, cloudiness=100, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($now, new Time(21, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=0.5mps, humidity=95, cloudiness=42.2, fog=19.5, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T04:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=set_time($end_of(day), new Time(9, 0)), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=0.7mps, humidity=97.6, cloudiness=100, fog=77.3, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T16:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: ontimer(date=[set_time($now, new Time(8, 30))]) => @org.thingpedia.builtin.thingengine.builtin.say(message="Reminder.")
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "samba") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3898C4AbdbptwYet6547e5"^^org.thingpedia.media-source:playable("The Girl From Ipanema"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1xaTXPoDk4VOU9XhYX4KJM"^^org.thingpedia.media-source:playable("A Nightingale Sang In Berkeley Square"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3QKJELWORZZ7rUZDWeMWSA"^^org.thingpedia.media-source:playable("Agua De Beber"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:36SJ7ZFx8J1f1RsewmUwMX"^^org.thingpedia.media-source:playable("Magalenha"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4SrJyRdyHYxxkcVMQ3QkGE"^^org.thingpedia.media-source:playable("Corcovado (Quiet Nights Of Quiet Stars)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play my elevator playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "elevator" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/5a954fa32b800878e57f25861d38b9e0
U: play my classics playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "classics" => @org.thingpedia.media-player.play(playable=id);
====
# recording/8594db8458f1cc44baee19e35c9c2db5
U: play radio KQED in 10 minutes.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10min]) => @com.tunein.station() filter id =~ "kqed" => @com.tunein.radio_play(id=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 10min]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
A: Alright, I will play the kqed in 10 minutes.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: what's the phone number of a restaurant in Palo Alto?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [phone] of @com.yelp.restaurant() filter geo == new Location("palo alto");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: ontimer(date=[$now + 10min]) => (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[]];
C: [phone] of @com.yelp.restaurant() filter geo == new Location(37.4443293, -122.1598465, "Palo Alto, California")
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi") },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), phone="+16503260983"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), phone="+16507526492"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), phone="+16503299533"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), phone="+16503282722"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), phone="+16503258500"^^tt:phone_number },
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), phone="+16503212161"^^tt:phone_number },
C:   { id="pi9MMjHWtVxC9eTnMk7e_w"^^com.yelp:restaurant("Crepevine Restaurants"), phone="+16503233900"^^tt:phone_number },
C:   { id="-g_tUhyvUFbxOs0aB28j1w"^^com.yelp:restaurant("Palo Alto Creamery"), phone="+16503233131"^^tt:phone_number },
C:   { id="lj_i7YQw7MPgLkuseruWdQ"^^com.yelp:restaurant("Telefèric Barcelona"), phone="+16503210512"^^tt:phone_number }
C: ]]
C: #[count=19];
A: Sorry, I don't have that information at the moment.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the phone number of coconuts?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [phone] of @com.yelp.restaurant() filter id =~ "coconuts";
====
# recording/52d45f0ebb307fdf5f2d15beac54192c
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(14, 35, 21) }
C: ]];
A: Right now, it's 2:35 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play radio KQED.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.tunein.station() filter id =~ "kqed" => @com.tunein.radio_play(id=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(14, 35, 21) }
C: ]];
C: (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[
C:   { id="station:s34804"^^com.tunein:station("KQED-FM") }
C: ]];
A: I played KQED-FM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: What is currently broadcast?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.tunein.station() filter id =~ "kqed";
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(14, 35, 21) }
C: ]];
C: (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[
C:   { id="station:s34804"^^com.tunein:station("KQED-FM") }
C: ]];
C: @com.tunein.station() filter id =~ "kqed"
C: #[results=[
C:   { id="station:s34804"^^com.tunein:station("KQED-FM"), show="The World: Latest Edition", link="http://opml.radiotime.com/Tune.ashx?id=s34804"^^tt:url, image="http://cdn-profiles.tunein.com/s34804/images/logoq.png?t=158759"^^tt:picture }
C: ]];
A: KQED-FM is a radio currently streaming The World: Latest Edition. Would you like to play it?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
AT: @com.tunein.radio_play(id="station:s34804"^^com.tunein:station("KQED-FM"))
AT: #[confirm=enum proposed];
U: No.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/f40ce50a86db299677486aced2c02046
U: can you tell me the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto, California"))
C: #[results=[
C:   { temperature=15.2C, wind_speed=1.5mps, humidity=95.9, cloudiness=100, fog=39.1, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is foggy today in Stanford, Palo Alto, California and the temperature is 59.4 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is the phone number and address of the closest chinese restaurant?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [geo, phone] of sort(distance(geo, $location.current_location) asc of @com.yelp.restaurant() filter contains(cuisines, null^^com.yelp:restaurant_cuisine("chinese")))[1];
====
# recording/ec84bd114903a564911d45ae513914e1
U: find me a restaurant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant()
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2496, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1441, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/M_R1GHVgPC8rS-KnkaPALA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1172, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="pLqiFFz1JScp8wMMyXcx-w"^^com.yelp:restaurant("Terún"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQxqzOrphM_JId4sJuG6VA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ter%C3%BAn-palo-alto-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=1671, geo=new Location(37.425993, -122.145453, "448 S California Ave, Palo Alto, CA 94306"), phone="+16506008310"^^tt:phone_number },
C:   { id="gYZbQe-zYyMpd9z1ud0T0w"^^com.yelp:restaurant("La Bodeguita Del Medio"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/Zqz6wF_l9G_HrHG1i_eCng/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-bodeguita-del-medio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cuban"^^com.yelp:restaurant_cuisine("Cuban"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=1967, geo=new Location(37.42539, -122.1451, "463 S California Ave, Palo Alto, CA 94306"), phone="+16503267762"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2292, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number }
C: ]]
C: #[count=50];
A: I see Ramen Nagi, Evvia Estiatorio, and Zareen's. They're restaurants rated 4.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: what restaurants are good
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant()
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2496, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1441, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/M_R1GHVgPC8rS-KnkaPALA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1172, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="pLqiFFz1JScp8wMMyXcx-w"^^com.yelp:restaurant("Terún"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQxqzOrphM_JId4sJuG6VA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ter%C3%BAn-palo-alto-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=1671, geo=new Location(37.425993, -122.145453, "448 S California Ave, Palo Alto, CA 94306"), phone="+16506008310"^^tt:phone_number },
C:   { id="gYZbQe-zYyMpd9z1ud0T0w"^^com.yelp:restaurant("La Bodeguita Del Medio"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/Zqz6wF_l9G_HrHG1i_eCng/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-bodeguita-del-medio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cuban"^^com.yelp:restaurant_cuisine("Cuban"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=1967, geo=new Location(37.42539, -122.1451, "463 S California Ave, Palo Alto, CA 94306"), phone="+16503267762"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2292, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @com.yelp.restaurant()
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2496, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1441, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/M_R1GHVgPC8rS-KnkaPALA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1172, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="pLqiFFz1JScp8wMMyXcx-w"^^com.yelp:restaurant("Terún"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQxqzOrphM_JId4sJuG6VA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ter%C3%BAn-palo-alto-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=1671, geo=new Location(37.425993, -122.145453, "448 S California Ave, Palo Alto, CA 94306"), phone="+16506008310"^^tt:phone_number },
C:   { id="gYZbQe-zYyMpd9z1ud0T0w"^^com.yelp:restaurant("La Bodeguita Del Medio"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/Zqz6wF_l9G_HrHG1i_eCng/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-bodeguita-del-medio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cuban"^^com.yelp:restaurant_cuisine("Cuban"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=1967, geo=new Location(37.42539, -122.1451, "463 S California Ave, Palo Alto, CA 94306"), phone="+16503267762"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2292, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number }
C: ]]
C: #[count=50];
A: I see Ramen Nagi, Evvia Estiatorio, and Zareen's. They're restaurants rated 4.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant()
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2496, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1441, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/M_R1GHVgPC8rS-KnkaPALA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1172, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="pLqiFFz1JScp8wMMyXcx-w"^^com.yelp:restaurant("Terún"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQxqzOrphM_JId4sJuG6VA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ter%C3%BAn-palo-alto-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=1671, geo=new Location(37.425993, -122.145453, "448 S California Ave, Palo Alto, CA 94306"), phone="+16506008310"^^tt:phone_number },
C:   { id="gYZbQe-zYyMpd9z1ud0T0w"^^com.yelp:restaurant("La Bodeguita Del Medio"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/Zqz6wF_l9G_HrHG1i_eCng/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-bodeguita-del-medio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cuban"^^com.yelp:restaurant_cuisine("Cuban"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=1967, geo=new Location(37.42539, -122.1451, "463 S California Ave, Palo Alto, CA 94306"), phone="+16503267762"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2292, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @com.yelp.restaurant()
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2045, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301"), phone=""^^tt:phone_number },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2496, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1441, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/M_R1GHVgPC8rS-KnkaPALA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1172, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2377, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="pLqiFFz1JScp8wMMyXcx-w"^^com.yelp:restaurant("Terún"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQxqzOrphM_JId4sJuG6VA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ter%C3%BAn-palo-alto-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=1671, geo=new Location(37.425993, -122.145453, "448 S California Ave, Palo Alto, CA 94306"), phone="+16506008310"^^tt:phone_number },
C:   { id="gYZbQe-zYyMpd9z1ud0T0w"^^com.yelp:restaurant("La Bodeguita Del Medio"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/Zqz6wF_l9G_HrHG1i_eCng/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-bodeguita-del-medio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cuban"^^com.yelp:restaurant_cuisine("Cuban"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=1967, geo=new Location(37.42539, -122.1451, "463 S California Ave, Palo Alto, CA 94306"), phone="+16503267762"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2292, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1885, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2912, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number }
C: ]]
C: #[count=50];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4341531042323104000"^^com.smartnews:article, title="Newton golfer claims medal at state", author="Mark Schnabel, The Kansan", source="The Newton Kansan", summary=" Newton High School junior golfer Lindsey Warsnak finished in a tie for 17th Tuesday at the Class 5A state championships . Warsnak shaved 10 strokes off her opening-round score Monday to finished with a 95-85—180 . Warsnak missed out on state as a sophomore.", link="https://www.thekansan.com/story/sports/2021/10/20/newton-high-school-golf-state/8535106002/"^^tt:url, category=["us"^^com.smartnews:category("us"), "golf"^^com.smartnews:category("golf"), "sports"^^com.smartnews:category("sports")], date=new Date("2021-10-20T08:11:16.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341531042323103856.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341531042323103856.mp3"^^tt:url },
C:   { id="4341530513299740000"^^com.smartnews:article, title="Air strike hits capital of Ethiopia’s Tigray for second time this week", author="Reuters", source="Reuters", summary=" Mekelle, the capital of Tigray region in northern Ethiopia, was hit by an air strike on Wednesday morning . It was the second time this week the city has been attacked . The two sides have been fighting a war for almost a year that has killed thousands of people and displaced more than 2 million .", link="https://www.reuters.com/world/africa/capital-ethiopias-tigray-hit-by-air-strike-second-time-this-week-tv-2021-10-20/"^^tt:url, category=["africa"^^com.smartnews:category("africa"), "world"^^com.smartnews:category("world"), "us"^^com.smartnews:category("us")], date=new Date("2021-10-20T08:09:46.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341530513299740299.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341530513299740299.mp3"^^tt:url },
C:   { id="4341530992645773300"^^com.smartnews:article, title="Margaret Qualley-Starrer ‘Maid’ Is Set To Overtake ‘The Queen’s Gambit’ As Netflix’s Most-Watched Limited Series Ever", author="Madhukumar Warrier", source="Benzinga", summary=" Netflix expects \"Maid\" to beat \"The Queen's Gambit\" as its most-watched limited series . The 10-episode Netflix series is adapted from Stephanie Land's bestselling memoir \"Maid: Hard Work, Low Pay and a Mother's Will to Survive\" The Queen's Gambit currently holds the record for most-watched limited series on Netflix .", link="https://www.benzinga.com/news/21/10/23456209/margaret-qualley-starrer-maid-is-set-to-overtake-the-queens-gambit-as-netflixs-most-watched-limited?utm_campaign=partner_feed&utm_source=SmartNews&utm_medium=partner_feed&utm_content=site"^^tt:url, category=["entertainment"^^com.smartnews:category("entertainment"), "tv"^^com.smartnews:category("tv"), "us"^^com.smartnews:category("us")], date=new Date("2021-10-20T08:07:29.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341530992645773104.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341530992645773104.mp3"^^tt:url },
C:   { id="4341530409490714600"^^com.smartnews:article, title="Killer viper found in Essex thought to have traveled in container of rocks", author="Eleanor Sly", source="The Independent", summary=" The saw-scaled viper is thought to have arrived in the UK from India . It was found stowed away in a shipping container . A wildlife hospital is understood to have identified the snake .", link="https://www.independent.co.uk/news/uk/home-news/saw-scaled-viper-snake-essex-b1941657.html"^^tt:url, category=["uk ireland"^^com.smartnews:category("uk ireland"), "uk"^^com.smartnews:category("uk"), "northern ireland"^^com.smartnews:category("northern ireland"), "world"^^com.smartnews:category("world"), "us"^^com.smartnews:category("us")], date=new Date("2021-10-20T08:07:07.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341530409490714523.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341530409490714523.mp3"^^tt:url },
C:   { id="4341530541552572000"^^com.smartnews:article, title="What’s happening: Stem cell donor drive planned for Park Ridge father; senior center hosts rummage sale", author="Jennifer Johnson, Pioneer Press Newspapers, Suburban Chicago", source="Chicago Tribune", summary=" The Niles Senior Center will host a rummage sale on Saturday, Oct. 24 . A stem cell drive will take place Saturday in Park Ridge .", link="https://www.chicagotribune.com/suburbs/park-ridge/ct-prh-news-briefs-tl-1021-20211019-b5ih3hn7tfb47ghf355kcs7pme-story.html"^^tt:url, category=["us"^^com.smartnews:category("us"), "community event"^^com.smartnews:category("community event"), "community"^^com.smartnews:category("community"), "event"^^com.smartnews:category("event")], date=new Date("2021-10-20T08:06:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341530541552572054.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341530541552572054.mp3"^^tt:url },
C:   { id="4341527479328969000"^^com.smartnews:article, title="KYW Medical Report: Air filters help reduce COVID-19 spread", author="Dr Brian Mc Donough", source="Audacy", summary=" The goal is to dramatically reduce COVID-19 in the overall environment . HEPA filters, relatively inexpensive devices, can effectively remove particles of COVID-19 from the air .", link="https://www.audacy.com/kywnewsradio/news/local/kyw-medical-report-air-filters-reduce-covid-19-spread"^^tt:url, category=["health"^^com.smartnews:category("health"), "us"^^com.smartnews:category("us")], date=new Date("2021-10-20T08:00:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341527479328969436.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341527479328969436.mp3"^^tt:url },
C:   { id="4341524087093332000"^^com.smartnews:article, title="Exhausted Stacey Solomon jokes about her ‘wonky boobs’ in honest new mum post", author="Emma Wilson", source="Mirror Online", summary=" The TV star welcomed her fourth child on 4 October . She documented the home birth on Instagram Stories .", link="https://www.mirror.co.uk/3am/celebrity-news/exhausted-stacey-solomon-laughs-over-25255240"^^tt:url, category=["celeb"^^com.smartnews:category("celeb"), "us"^^com.smartnews:category("us"), "entertainment"^^com.smartnews:category("entertainment")], date=new Date("2021-10-20T07:46:17.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341524087093332083.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341524087093332083.mp3"^^tt:url },
C:   { id="4341527356049984500"^^com.smartnews:article, title="Russia Urges Major Foreign Aid for Taliban-Ruled Afghanistan", author="Henry Meyer", source="Bloomberg", summary=" Russia is hosting a delegation from the Taliban along with regional powers in the first such meeting since the chaotic U.S. withdrawal from Afghanistan in August . A deputy prime minister of the interim Afghan government, Abdul Salam Hanafi, is the most senior figure attending the Moscow talks . While Russia like China kept its embassy open in Kabul as Western governments scrambled to evacuate their diplomats, it hasn't recognized the Taliban's rule .", link="https://www.bloomberg.com/news/articles/2021-10-20/russia-hosts-taliban-for-first-talks-since-u-s-afghan-pull-out"^^tt:url, category=["world"^^com.smartnews:category("world"), "uncertain"^^com.smartnews:category("uncertain")], date=new Date("2021-10-20T07:43:53.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341527356049984495.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341527356049984495.mp3"^^tt:url },
C:   { id="4341515009117918700"^^com.smartnews:article, title="Covid live: UK government resists calls to bring in ‘plan B’; steep rise in Poland cases as Russia sets new deaths record", source="The Guardian", summary=" Prime minister Mikhail Mishustin has backed plans for a nationwide non-working week starting 30 October . The proposal was put forward by deputy prime minister Tatiana Golikova during a televised government meeting .", link="https://www.theguardian.com/world/live/2021/oct/20/coronavirus-news-live-singapore-reports-highest-ever-covid-cases-uk-urged-to-enact-plan-b-or-risk-nhs-crisis"^^tt:url, category=["uk ireland"^^com.smartnews:category("uk ireland"), "uk"^^com.smartnews:category("uk"), "northern ireland"^^com.smartnews:category("northern ireland"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-20T07:09:43.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341515009117918719.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341515009117918719.mp3"^^tt:url },
C:   { id="4341530515141044700"^^com.smartnews:article, title="How To Get Rid Of Birds Near Your Home", source="Hunker", summary=" There are ways to get rid of birds without harming them . Most frequent culprits are pigeons, starlings and house sparrows . Birds can cause numerous home problems such as drilling holes into a house frame .", link="https://www.hunker.com/12580660/how-to-keep-birds-out-of-your-tree-over-the-driveway"^^tt:url, category=["animal"^^com.smartnews:category("animal"), "us"^^com.smartnews:category("us")], date=new Date("2021-10-20T07:08:01.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/headline_4341530515141044833.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211020/voice/summary_4341530515141044833.mp3"^^tt:url }
C: ]]
C: #[count=50];
A: Here is the news.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_many;
U: sports news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article() filter contains(category, null^^com.smartnews:category("sports"));
====
# recording/9a20b6f8ae567564b8e404268de6030e
U: hello
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/8675133dfa5fe91f68def0e161cad727
U: hello
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/968faa4b5c651aade2f92ed12403c2e0
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="BQnyImOCIBd"^^com.icanhazdadjoke:id, text="How do hens stay fit? They always egg-cercise!" }
C: ]];
A: How do hens stay fit? They always egg-cercise!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/9cb4f76500b3d76dd8f89302175f798e
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="cxXv4Elj3wc"^^com.icanhazdadjoke:id, text="Where do young cows eat lunch? In the calf-ateria." }
C: ]];
A: Where do young cows eat lunch? In the calf-ateria.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/45988fef6792867e3570aa17d40ba987
U: Hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/509e5dbaba21fe87f4843dcfbb457a50
U: Hi!
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/7d00305c622ca5b73c1450ac9e9e1c85
U: turn on the loft fan if the humidity is greater than 80%
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.humidity.humidity()) filter value >= 80 => @org.thingpedia.iot.fan(name="loft").set_power(power=enum on);
====
# recording/6db0a5059a279a4fe612bec23009c2b1
U: play some Bob.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("bob")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/c85acdbfd43a4a85d479e83bdcfb6b3e
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:25Eab1kIY1gh0Yo1oV04G4"^^org.thingpedia.media-source:artist("Bedřich Smetana")) && id =~ "boards of canada")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2VAvhf61GgLYmC6C8anyX1"^^org.thingpedia.media-source:artist("Boards of Canada")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2XQSgmtEY2titXhfY414dy"^^org.thingpedia.media-source:playable("Roygbiv"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0aPrTlWUf2nmDkC9gcP5kZ"^^org.thingpedia.media-source:playable("Olson"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Y2W4zKa3q72ztbkA0r8Va"^^org.thingpedia.media-source:playable("Dayvan Cowboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HHAxkrJbuWZ7JWdxYbsWO"^^org.thingpedia.media-source:playable("Peacock Tail"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4OO2lavE7yz5Ane6fEYXp3"^^org.thingpedia.media-source:playable("Everything You Do Is A Balloon"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vWnB0hYmluskQuzxwo25a"^^org.thingpedia.media-source:playable("Music Has The Right To Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0wBiN0fKhy0ywx732SpgUs"^^org.thingpedia.media-source:playable("The Campfire Headphase"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7Lou3RDk6NswmbzBMhro24"^^org.thingpedia.media-source:playable("Geogaddi"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:159ORixBSSemxiualv1Woj"^^org.thingpedia.media-source:playable("Tomorrow's Harvest"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3FabCzGQgFLqkCqzceB5ii"^^org.thingpedia.media-source:playable("Hi Scores"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "me and earl and the dying girl")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:4MDpVxfOlA7YhbWlENOzpb"^^org.thingpedia.media-source:playable("'Me and Earl and the Dying Girl' Mixtape: Selections by Director Alfonso Gomez-Rejon"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Demo")
C: #[results=[
C:   { name="Demo", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum disallowed_action];
A: Sorry, failed to play: you must first click play from inside the Spotify app, and then I will play songs for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/0f3f443d5d1915bdb55b172265d80f8c
U: how you doing?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: wake up.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/d6e4cf5681b4ace1036f18cdffd1a332
U: play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/f78c96e77de5b4696db34a222a524340
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/d4365a7db089a6cfa5ed388da2189d59
U: play music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/b308c0cc0b32bd5a8f4772eebe2af0b2
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/b286ee7b69a15d12528fb37f543c1643
U: Play playlist future.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "future" => @org.thingpedia.media-player.play(playable=id);
====
# recording/d8d5984619a07fb07dcf6a9bc2f121a0
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/dcb2dcca454b45ea06a56b8865291e41
U: what's up man?
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/62666283c8188c27c10f717979db642f
U: play some Bob.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("bob")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Bob Marley & The Wailers on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some buck Rogers.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("buck rogers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2FMZn5P3WATd7Il6FgPJNu"^^org.thingpedia.media-source:artist("Buck Owens")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3JWEMzwpcWCvu4Qw1BIbYi"^^org.thingpedia.media-source:playable("Act Naturally"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1jGa3ZVWNhqes22ZoVBfOJ"^^org.thingpedia.media-source:playable("My Heart Skips A Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1GDAvJth0ebssC2XkG7RYM"^^org.thingpedia.media-source:playable("I've Got A Tiger By The Tail - 2006 Remastered Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0svhKL5JfIxASjbmEkxXKV"^^org.thingpedia.media-source:playable("Love's Gonna Live Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6dYCiAzt1o9D1XeEVrID1B"^^org.thingpedia.media-source:playable("Streets Of Bakersfield"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6c31q0EiGPqzNVDKfQzyzt"^^org.thingpedia.media-source:playable("All-Time Greatest Hits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6YhrskvsUUnJtWmkCGeY6D"^^org.thingpedia.media-source:playable("21 #1 Hits: The Ultimate Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:55yyj7hvZHcuameAY8tajX"^^org.thingpedia.media-source:playable("Together Again / My Heart Skips a Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7wZ5iShOK0tEQLwrBFm8sf"^^org.thingpedia.media-source:playable("Honky Tonk Man: Buck Sings Country Classics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38YMI8jMA7RotlUBZJNtcs"^^org.thingpedia.media-source:playable("All-Time Greatest Hits, Vol. 1"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Buck Owens on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some Buddy Holly.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("buddy holly")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2FMZn5P3WATd7Il6FgPJNu"^^org.thingpedia.media-source:artist("Buck Owens")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3JWEMzwpcWCvu4Qw1BIbYi"^^org.thingpedia.media-source:playable("Act Naturally"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1jGa3ZVWNhqes22ZoVBfOJ"^^org.thingpedia.media-source:playable("My Heart Skips A Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1GDAvJth0ebssC2XkG7RYM"^^org.thingpedia.media-source:playable("I've Got A Tiger By The Tail - 2006 Remastered Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0svhKL5JfIxASjbmEkxXKV"^^org.thingpedia.media-source:playable("Love's Gonna Live Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6dYCiAzt1o9D1XeEVrID1B"^^org.thingpedia.media-source:playable("Streets Of Bakersfield"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6c31q0EiGPqzNVDKfQzyzt"^^org.thingpedia.media-source:playable("All-Time Greatest Hits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6YhrskvsUUnJtWmkCGeY6D"^^org.thingpedia.media-source:playable("21 #1 Hits: The Ultimate Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:55yyj7hvZHcuameAY8tajX"^^org.thingpedia.media-source:playable("Together Again / My Heart Skips a Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7wZ5iShOK0tEQLwrBFm8sf"^^org.thingpedia.media-source:playable("Honky Tonk Man: Buck Sings Country Classics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38YMI8jMA7RotlUBZJNtcs"^^org.thingpedia.media-source:playable("All-Time Greatest Hits, Vol. 1"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3wYyutjgII8LJVVOLrGI0D"^^org.thingpedia.media-source:artist("Buddy Holly")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:39lnzOIUCSNaQmgBHoz7rt"^^org.thingpedia.media-source:playable("Everyday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:50RwvvEKX5Q7AZt8FTAwIF"^^org.thingpedia.media-source:playable("That'll Be The Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OARIMw1hpehr86Iwmv04c"^^org.thingpedia.media-source:playable("Peggy Sue"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6NDg4EyQE5lalcCEEpytsM"^^org.thingpedia.media-source:playable("(Ummmm, Oh Yeah) Dearest"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:33aYzW5ToRjiFOzkubeJ8H"^^org.thingpedia.media-source:playable("Rave On"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4Qy0SOU9Jg7Td10K68SanP"^^org.thingpedia.media-source:playable("Buddy Holly"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KHc3cD7pAOAieo9lPWXkY"^^org.thingpedia.media-source:playable("That'll Be The Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1tTTDe47X0rTO4q7RidIan"^^org.thingpedia.media-source:playable("The Definitive Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2CqXO4zgYnv1KwiFiDAw1u"^^org.thingpedia.media-source:playable("Giant"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Buddy Holly on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some Elephone.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("elephone")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2FMZn5P3WATd7Il6FgPJNu"^^org.thingpedia.media-source:artist("Buck Owens")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3JWEMzwpcWCvu4Qw1BIbYi"^^org.thingpedia.media-source:playable("Act Naturally"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1jGa3ZVWNhqes22ZoVBfOJ"^^org.thingpedia.media-source:playable("My Heart Skips A Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1GDAvJth0ebssC2XkG7RYM"^^org.thingpedia.media-source:playable("I've Got A Tiger By The Tail - 2006 Remastered Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0svhKL5JfIxASjbmEkxXKV"^^org.thingpedia.media-source:playable("Love's Gonna Live Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6dYCiAzt1o9D1XeEVrID1B"^^org.thingpedia.media-source:playable("Streets Of Bakersfield"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6c31q0EiGPqzNVDKfQzyzt"^^org.thingpedia.media-source:playable("All-Time Greatest Hits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6YhrskvsUUnJtWmkCGeY6D"^^org.thingpedia.media-source:playable("21 #1 Hits: The Ultimate Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:55yyj7hvZHcuameAY8tajX"^^org.thingpedia.media-source:playable("Together Again / My Heart Skips a Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7wZ5iShOK0tEQLwrBFm8sf"^^org.thingpedia.media-source:playable("Honky Tonk Man: Buck Sings Country Classics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38YMI8jMA7RotlUBZJNtcs"^^org.thingpedia.media-source:playable("All-Time Greatest Hits, Vol. 1"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3wYyutjgII8LJVVOLrGI0D"^^org.thingpedia.media-source:artist("Buddy Holly")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:39lnzOIUCSNaQmgBHoz7rt"^^org.thingpedia.media-source:playable("Everyday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:50RwvvEKX5Q7AZt8FTAwIF"^^org.thingpedia.media-source:playable("That'll Be The Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OARIMw1hpehr86Iwmv04c"^^org.thingpedia.media-source:playable("Peggy Sue"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6NDg4EyQE5lalcCEEpytsM"^^org.thingpedia.media-source:playable("(Ummmm, Oh Yeah) Dearest"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:33aYzW5ToRjiFOzkubeJ8H"^^org.thingpedia.media-source:playable("Rave On"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4Qy0SOU9Jg7Td10K68SanP"^^org.thingpedia.media-source:playable("Buddy Holly"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KHc3cD7pAOAieo9lPWXkY"^^org.thingpedia.media-source:playable("That'll Be The Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1tTTDe47X0rTO4q7RidIan"^^org.thingpedia.media-source:playable("The Definitive Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2CqXO4zgYnv1KwiFiDAw1u"^^org.thingpedia.media-source:playable("Giant"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3fQq9bb2ZKNv24V1A4vwBK"^^org.thingpedia.media-source:artist("Téléphone")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3MzqZDQInpsxboLy33uMct"^^org.thingpedia.media-source:playable("New-York avec toi - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3uZyx7GfVWJh2Aum6xS6my"^^org.thingpedia.media-source:playable("Cendrillon - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3I4ecHrrMuD8FFfFCVy4g5"^^org.thingpedia.media-source:playable("Un autre monde - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7p5Na4GvFzP6M7i1ti2YRJ"^^org.thingpedia.media-source:playable("Ça (c'est vraiment toi) - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3yOaL1e5FtOjUU7FAJjKpG"^^org.thingpedia.media-source:playable("Ça c'est vraiment toi - Remasterisé en 2006"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5DiavRKmdRpqdzgBjoNEF3"^^org.thingpedia.media-source:playable("Un autre monde (Remasterisé en 2015)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1ePKFTIr8ZODp91iwt4kVf"^^org.thingpedia.media-source:playable("Dure limite (Remasterisé en 2015)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3Fep1OihcXjxJJIfAOhPob"^^org.thingpedia.media-source:playable("Telephone Illimité"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4BfWALRbZNfte6UL0gbALm"^^org.thingpedia.media-source:playable("Rappels 1 + 2"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Téléphone on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play The Stranglers.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("stranglers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2FMZn5P3WATd7Il6FgPJNu"^^org.thingpedia.media-source:artist("Buck Owens")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3JWEMzwpcWCvu4Qw1BIbYi"^^org.thingpedia.media-source:playable("Act Naturally"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1jGa3ZVWNhqes22ZoVBfOJ"^^org.thingpedia.media-source:playable("My Heart Skips A Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1GDAvJth0ebssC2XkG7RYM"^^org.thingpedia.media-source:playable("I've Got A Tiger By The Tail - 2006 Remastered Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0svhKL5JfIxASjbmEkxXKV"^^org.thingpedia.media-source:playable("Love's Gonna Live Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6dYCiAzt1o9D1XeEVrID1B"^^org.thingpedia.media-source:playable("Streets Of Bakersfield"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6c31q0EiGPqzNVDKfQzyzt"^^org.thingpedia.media-source:playable("All-Time Greatest Hits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6YhrskvsUUnJtWmkCGeY6D"^^org.thingpedia.media-source:playable("21 #1 Hits: The Ultimate Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:55yyj7hvZHcuameAY8tajX"^^org.thingpedia.media-source:playable("Together Again / My Heart Skips a Beat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7wZ5iShOK0tEQLwrBFm8sf"^^org.thingpedia.media-source:playable("Honky Tonk Man: Buck Sings Country Classics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38YMI8jMA7RotlUBZJNtcs"^^org.thingpedia.media-source:playable("All-Time Greatest Hits, Vol. 1"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3wYyutjgII8LJVVOLrGI0D"^^org.thingpedia.media-source:artist("Buddy Holly")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:39lnzOIUCSNaQmgBHoz7rt"^^org.thingpedia.media-source:playable("Everyday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:50RwvvEKX5Q7AZt8FTAwIF"^^org.thingpedia.media-source:playable("That'll Be The Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OARIMw1hpehr86Iwmv04c"^^org.thingpedia.media-source:playable("Peggy Sue"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6NDg4EyQE5lalcCEEpytsM"^^org.thingpedia.media-source:playable("(Ummmm, Oh Yeah) Dearest"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:33aYzW5ToRjiFOzkubeJ8H"^^org.thingpedia.media-source:playable("Rave On"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4Qy0SOU9Jg7Td10K68SanP"^^org.thingpedia.media-source:playable("Buddy Holly"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KHc3cD7pAOAieo9lPWXkY"^^org.thingpedia.media-source:playable("That'll Be The Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1tTTDe47X0rTO4q7RidIan"^^org.thingpedia.media-source:playable("The Definitive Collection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2CqXO4zgYnv1KwiFiDAw1u"^^org.thingpedia.media-source:playable("Giant"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3fQq9bb2ZKNv24V1A4vwBK"^^org.thingpedia.media-source:artist("Téléphone")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3MzqZDQInpsxboLy33uMct"^^org.thingpedia.media-source:playable("New-York avec toi - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3uZyx7GfVWJh2Aum6xS6my"^^org.thingpedia.media-source:playable("Cendrillon - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3I4ecHrrMuD8FFfFCVy4g5"^^org.thingpedia.media-source:playable("Un autre monde - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7p5Na4GvFzP6M7i1ti2YRJ"^^org.thingpedia.media-source:playable("Ça (c'est vraiment toi) - Remasterisé en 2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3yOaL1e5FtOjUU7FAJjKpG"^^org.thingpedia.media-source:playable("Ça c'est vraiment toi - Remasterisé en 2006"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5DiavRKmdRpqdzgBjoNEF3"^^org.thingpedia.media-source:playable("Un autre monde (Remasterisé en 2015)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1ePKFTIr8ZODp91iwt4kVf"^^org.thingpedia.media-source:playable("Dure limite (Remasterisé en 2015)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3Fep1OihcXjxJJIfAOhPob"^^org.thingpedia.media-source:playable("Telephone Illimité"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4BfWALRbZNfte6UL0gbALm"^^org.thingpedia.media-source:playable("Rappels 1 + 2"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:0RUEHcBiENFEqxgicqS2ig"^^org.thingpedia.media-source:artist("The Stranglers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2AX5E86cn9n2dgioZEjirI"^^org.thingpedia.media-source:playable("Golden Brown"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:71Y7sPJm0DpCix0fHaAlhI"^^org.thingpedia.media-source:playable("Peaches - 1996 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4QDDREfSu1DlhIShUhUQjE"^^org.thingpedia.media-source:playable("Walk On By - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:10BQIOZ8dhGwOOGBVA97qz"^^org.thingpedia.media-source:playable("Always The Sun - Sunny Side Up Mix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3A6Ty55vQ1NC06EiB1fi9z"^^org.thingpedia.media-source:playable("No More Heroes - 1996 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3bosyDPGOYmLnwMNhU06Rx"^^org.thingpedia.media-source:playable("La Folie"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38lyLeszq1p2sck1lB53dq"^^org.thingpedia.media-source:playable("Rattus Norvegicus"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1MruYes9jkQuAoX4NezhUt"^^org.thingpedia.media-source:playable("Aural Sculpture"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4WsDFcdDl3UU9ztRmyxQQ4"^^org.thingpedia.media-source:playable("No More Heroes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6vaA6gtaY9kZJT97F2v4zP"^^org.thingpedia.media-source:playable("10"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by The Stranglers on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play Simon and Garfunkel.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("simon and garfunkel")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/5982d8cda368e1537913999b15e0a248
U: Look up restaurant Royal Taj in Campbell and tell me how many reviews.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [review_count] of @com.yelp.restaurant() filter geo == new Location("campbell") && id =~ "royal taj";
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [review_count] of @com.yelp.restaurant() filter geo == new Location(37.2870626, -121.9448818, "Campbell, California") && id =~ "royal taj"
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), review_count=369 }
C: ]];
A: Royal Taj has 369 reviews.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: play.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [review_count] of @com.yelp.restaurant() filter geo == new Location(37.2870626, -121.9448818, "Campbell, California") && id =~ "royal taj"
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), review_count=369 }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what song is this?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [review_count] of @com.yelp.restaurant() filter geo == new Location(37.2870626, -121.9448818, "Campbell, California") && id =~ "royal taj"
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), review_count=369 }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:song("Save Your Tears"), artists=["spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")], album="spotify:album:4yP0hdKOZPNshxUOjY0cZj"^^org.thingpedia.media-source:album("After Hours"), genres=["canadian contemporary r&b", "canadian pop", "pop"], release_date=new Date("2020-03-20T00:00:00.000Z"), popularity=87, energy=82.6, danceability=68, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Currently playing Save Your Tears by The Weeknd.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: create a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [review_count] of @com.yelp.restaurant() filter geo == new Location(37.2870626, -121.9448818, "Campbell, California") && id =~ "royal taj"
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), review_count=369 }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:song("Save Your Tears"), artists=["spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")], album="spotify:album:4yP0hdKOZPNshxUOjY0cZj"^^org.thingpedia.media-source:album("After Hours"), genres=["canadian contemporary r&b", "canadian pop", "pop"], release_date=new Date("2020-03-20T00:00:00.000Z"), popularity=87, energy=82.6, danceability=68, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Good morning.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Good morning.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [review_count] of @com.yelp.restaurant() filter geo == new Location(37.2870626, -121.9448818, "Campbell, California") && id =~ "royal taj"
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), review_count=369 }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:song("Save Your Tears"), artists=["spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")], album="spotify:album:4yP0hdKOZPNshxUOjY0cZj"^^org.thingpedia.media-source:album("After Hours"), genres=["canadian contemporary r&b", "canadian pop", "pop"], release_date=new Date("2020-03-20T00:00:00.000Z"), popularity=87, energy=82.6, danceability=68, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Good morning.")
C: #[results=[
C:   { name="Good morning.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this song to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
====
# recording/b61f278505133177e37404caface5212
U: Play some Beethoven.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("beethoven")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classroom")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:33LhmLgKHsbDBKBYW7RaJw"^^org.thingpedia.media-source:playable("Classroom"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Ludwig van Beethoven on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Make a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classroom")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:33LhmLgKHsbDBKBYW7RaJw"^^org.thingpedia.media-source:playable("Classroom"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Fuchsia.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Fuchsia.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classroom")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:33LhmLgKHsbDBKBYW7RaJw"^^org.thingpedia.media-source:playable("Classroom"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Fuchsia.")
C: #[results=[
C:   { name="Fuchsia.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this to playlist fuchsia.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="fuchsia", song=id);
====
# recording/29e737d4a1bd286289d5fc60e8f15e05
U: what time does Philz coffee open?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [opening_hours] of @com.yelp.restaurant() filter id =~ "philz coffee";
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="82LBXSfaFlb"^^com.icanhazdadjoke:id, text="What kind of tree fits in your hand? A palm tree!" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="EYojGtPRusc"^^com.icanhazdadjoke:id, text="I gave my friend 10 puns hoping that one of them would make him laugh. Sadly, no pun in ten did." }
C: ]];
C: (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[
C:   { id="station:s34804"^^com.tunein:station("KQED-FM") }
C: ]];
C: @com.smartnews.article(keyword="thanksgiving")
C: #[results=[
C:   { id="4341271761040452600"^^com.smartnews:article, title="American Airlines flight attendants union tells employees they won’t be fired if they refuse to get vaccinated by the airline’s deadline", source="Business Insider", summary=" American Airlines flight attendants union says they won't be immediately fired if they remain unvaccinated past the airline's deadline . All American employees must be vaccinated against COVID-19 per a Biden administration mandate for federal contractors . American's deadline for vaccination is just days before the Thanksgiving holiday .", link="https://www.businessinsider.com/american-flight-attendant-union-says-unvaccinated-employees-wont-be-fired-2021-10"^^tt:url, category=["us"^^com.smartnews:category("us"), "health"^^com.smartnews:category("health")], date=new Date("2021-10-19T15:02:06.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211019/voice/headline_4341271761040452807.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211019/voice/summary_4341271761040452807.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4339833190207194600"^^com.smartnews:article, title="Back after a hiatus, Charlotte’s Thanksgiving parade will ‘light up the night sky’", author="Joe Marusak", source="Charlotte Observer", summary=" The annual Novant Health Thanksgiving Parade will transform into a night event in uptown Charlotte on Nov. 24 . Traditionally held Thanksgiving Day, the 75th version will instead “light up the night sky” at 6 p.m. Thanksgiving Eve . This year’s parade will feature 10 high school marching bands, four community marching bands, 28 specialty units, 13 floats, seven special performers and eight giant balloons .", link="https://www.charlotteobserver.com/news/local/article255026657.html"^^tt:url, category=["us"^^com.smartnews:category("us"), "human interest"^^com.smartnews:category("human interest")], date=new Date("2021-10-15T15:45:49.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211015/voice/headline_4339833190207194699.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211015/voice/summary_4339833190207194699.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4339486145717999600"^^com.smartnews:article, title="Dr. Fauci Just Gave This Essential Update on the Next COVID Variants", author="Kali Coleman", source="Best Life", summary=" The Delta variant of COVID virus has been wreaking havoc across the U.S. Experts say they expect the surge to be over by Thanksgiving . What are the chances we're faced with new COVID variants that are even worse?", link="https://bestlifeonline.com/fauci-new-covid-variants-news/"^^tt:url, category=["us"^^com.smartnews:category("us"), "health"^^com.smartnews:category("health")], date=new Date("2021-10-14T16:48:31.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211017/voice/headline_4339486145717999376.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211017/voice/summary_4339486145717999376.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4339361334580747300"^^com.smartnews:article, title="Fox News Mocked After Desperately Trying To Resurrect Its War On Christmas", author="Ed Mazza", source="HuffPost", summary=" The right-wing network moved its annual War on Christmas campaign ahead more than two weeks ahead of Thanksgiving . It claimed President Joe Biden was threatening to steal Christmas due to the global supply chain issues related to the coronavirus pandemic . They claimed Biden was threatening to steal Christmas due to the global supply chain issues related to the coronavirus pandemic .", link="https://www.huffpost.com/entry/fox-news-early-war-on-christmas-biden_n_6167c1f2e4b065a5496fda24"^^tt:url, category=["us"^^com.smartnews:category("us"), "politics policy"^^com.smartnews:category("politics policy"), "politic"^^com.smartnews:category("politic"), "political"^^com.smartnews:category("political"), "policy"^^com.smartnews:category("policy"), "commentary"^^com.smartnews:category("commentary")], date=new Date("2021-10-14T08:29:36.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211014/voice/headline_4339361334580747329.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211014/voice/summary_4339361334580747329.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4338773618231094300"^^com.smartnews:article, title="The Countdown to the Best Black Friday Beauty Deals Is *On*", author="Chloe Metzger", source="Cosmopolitan", summary=" Black Friday is always the day after Thanksgiving, fun fact, and this year, Black Friday falls on November 26, with Cyber Monday on November 29 . Usually, brands tend to extend their sales throughout the week before Black Friday and even after the weekend ends .", link="https://www.cosmopolitan.com/style-beauty/beauty/a37911345/black-friday-cyber-monday-beauty-deals-2021/"^^tt:url, category=["lifestyle"^^com.smartnews:category("lifestyle"), "us"^^com.smartnews:category("us"), "beauty"^^com.smartnews:category("beauty")], date=new Date("2021-10-12T17:21:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211019/voice/headline_4338773618231094132.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211019/voice/summary_4338773618231094132.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4338350227409875000"^^com.smartnews:article, title="Happy Thanksgiving", author="Tom Dakers", source="Bluebird Banter", summary=" Every year we go around the table saying what we are thankful for . It is always an argument about who gets to go first because they get the easy one . I’m thankful for my sister. She has taken the bulk of the work in taking care of our ageing parents .", link="https://www.bluebirdbanter.com/2021/10/11/22720271/happy-thanksgiving"^^tt:url, category=["baseball"^^com.smartnews:category("baseball"), "sports"^^com.smartnews:category("sports"), "us"^^com.smartnews:category("us")], date=new Date("2021-10-11T13:34:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211012/voice/headline_4338350227409874894.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211012/voice/summary_4338350227409874894.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4337664704940869000"^^com.smartnews:article, title="10 Things *Not* to Say at the Thanksgiving Table This Year (& 4 Things to Say Instead)", author="editor@purewow.com (PureWow)", source="Purewow", summary=" There are 10 things not to say at the Thanksgiving table this year if you want to keep the peace . From queries about children to food shaming here are four questions to ask instead .", link="https://www.purewow.com/family/what-not-to-say-at-thanksgiving"^^tt:url, category=["us"^^com.smartnews:category("us"), "lifestyle"^^com.smartnews:category("lifestyle"), "advice"^^com.smartnews:category("advice")], date=new Date("2021-10-09T16:00:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211010/voice/headline_4337664704940869145.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211010/voice/summary_4337664704940869145.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4337299725033150000"^^com.smartnews:article, title="10 Best Sales to Shop for the Long Weekend", author="Elaine Selna", source="Mental Floss", summary=" Retailers use long weekends as an opportunity to host major sales . With Labor Day behind us and Thanksgiving and Black Friday only a month away, this three-day weekend could be a way to get a jump-start on gifts for the family . We’ve outlined the 10 best sales on bedding, cookware, and tech products .", link="https://www.mentalfloss.com/article/651086/best-sales-long-weekend-2021"^^tt:url, category=["lifestyle"^^com.smartnews:category("lifestyle"), "us"^^com.smartnews:category("us"), "shopping"^^com.smartnews:category("shopping")], date=new Date("2021-10-08T12:00:01.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211009/voice/headline_4337299725033149838.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211009/voice/summary_4337299725033149838.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4336741590337853000"^^com.smartnews:article, title="Black Friday 65-inch TV deals — early sales and big bargains for 2021", author="Brian Westover", source="Tom's Guide", summary=" Retailers like Best Buy, Amazon and Walmart are already setting the stage for the November holidays . The best Black Friday deals are reserved for the day after Thanksgiving, with steeper discounts and bigger bargains than you'll see any other time of year . Keep an eye out for lowered prices, but also for bundle deals that package a TV with soundbar, a wall mount or other home theater gear .", link="https://www.tomsguide.com/deals/best-black-friday-65-inch-TV-deals"^^tt:url, category=["us"^^com.smartnews:category("us"), "ecommerce"^^com.smartnews:category("ecommerce"), "technology"^^com.smartnews:category("technology")], date=new Date("2021-10-07T00:54:55.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/headline_4336741590337852755.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/summary_4336741590337852755.mp3"^^tt:url, keyword="thanksgiving" },
C:   { id="4336573967063065600"^^com.smartnews:article, title="Ropes & Gray Requires Lawyers in Office Starting in November (1)", source="The Brief - Top News of Today From Bloomberg Law", summary=" Ropes & Gray is asking lawyers to work in-person for one or two days each week starting Nov. 8 . The new approach will last until 2022, though lawyers will likely work remotely the full weeks of Thanksgiving and before New Year's Day . Other major firms like Goodwin Proctor, Hogan Lovells, and Paul Hastings have also chosen early November for returning workers to the office .", link="https://news.bloomberglaw.com/business-and-practice/ropes-gray-requires-lawyers-in-office-starting-in-november"^^tt:url, category=["us"^^com.smartnews:category("us"), "politics policy"^^com.smartnews:category("politics policy"), "politic"^^com.smartnews:category("politic"), "political"^^com.smartnews:category("political"), "policy"^^com.smartnews:category("policy"), "supreme court"^^com.smartnews:category("supreme court")], date=new Date("2021-10-06T15:14:24.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/headline_4336573967063065590.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/summary_4336573967063065590.mp3"^^tt:url, keyword="thanksgiving" }
C: ]]
C: #[count=15];
C: [opening_hours] of @com.yelp.restaurant() filter id =~ "philz coffee"
C: #[results=[
C:   { id="TtYbsOqn7vLKhva0AuKQQQ"^^com.yelp:restaurant("Philz Coffee"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(5, 30), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(5, 30), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(5, 30), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(5, 30), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(5, 30), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(6, 0), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(6, 0), endTime=new Time(18, 0), interval=86400000ms, dayOfWeek=enum sunday }) },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(5, 30), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(6, 0), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(6, 0), endTime=new Time(19, 0), interval=86400000ms, dayOfWeek=enum sunday }) }
C: ]];
A: Philz Coffee opens from 5:30 AM to 6:00 PM Monday to Friday and from 6:00 AM to 6:00 PM on Saturday and Sunday.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: What are the hours of Cooper Cafe?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [opening_hours] of @com.yelp.restaurant() filter id =~ "cooper cafe";
====
# recording/69b47351b94bb4d79dc7d47439dbff76
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/5a8b63efb60e3a8ccb345cab34dadcee
U: stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play the latest Adele.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Easy On Me on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the weather in Palo Alto tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location("palo alto"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=1.5mps, humidity=67, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow in Palo Alto, California and the temperature will be 69.1 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: create a playlist called hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist(name="hello");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=1.5mps, humidity=67, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello")
C: #[results=[
C:   { name="hello", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist named hello.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Create a new playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=1.5mps, humidity=67, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello")
C: #[results=[
C:   { name="hello", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Hello 2.0 please.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello 2");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=1.5mps, humidity=67, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello")
C: #[results=[
C:   { name="hello", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello 2")
C: #[results=[
C:   { name="hello 2", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist for you named hello 2.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Create a new playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4dpARuHxo51G3z768sgnrY"^^org.thingpedia.media-source:artist("Adele")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gplL1WMoJ6iYaPgMCL0gX"^^org.thingpedia.media-source:playable("Easy On Me"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=1.5mps, humidity=67, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello")
C: #[results=[
C:   { name="hello", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="hello 2")
C: #[results=[
C:   { name="hello 2", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Name it, you know what I mean?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="you know what i mean?");
====
# recording/b31c786f3c9f087624ddeb9ae07aa976
U: what's a great restaurant?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant()
C: #[results=[
C:   { id="vhfPni9pci29SEHrN1OtRg"^^com.yelp:restaurant("Ramen Nagi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/gxSfnCdg13rWle8DcjmT6w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ramen-nagi-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["ramen"^^com.yelp:restaurant_cuisine("Ramen"), "noodles"^^com.yelp:restaurant_cuisine("Noodles")], price=enum moderate, rating=4.5, review_count=2054, geo=new Location(37.445523, -122.1607073261, "541 Bryant St, Palo Alto, CA 94301") },
C:   { id="1vMgajRAI3lYwuCeGX58oQ"^^com.yelp:restaurant("Evvia Estiatorio"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/GGqRQbLqoDMBktLA5iqZZQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/evvia-estiatorio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["greek"^^com.yelp:restaurant_cuisine("Greek")], price=enum expensive, rating=4.5, review_count=2498, geo=new Location(37.445077, -122.163778, "420 Emerson St, Palo Alto, CA 94301"), phone="+16503260983"^^tt:phone_number },
C:   { id="3b0yY-kCOG-1Eq9oamlSzw"^^com.yelp:restaurant("Zareen's"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/T7t7eyLiLIntkiH61HhI3Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/zareens-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "halal"^^com.yelp:restaurant_cuisine("Halal"), "pakistani"^^com.yelp:restaurant_cuisine("Pakistani")], price=enum moderate, rating=4.5, review_count=1445, geo=new Location(37.42675, -122.14404, "365 S California Ave, Palo Alto, CA 94306"), phone="+16505628700"^^tt:phone_number },
C:   { id="_YDK0w05YAO99aQudHGpkA"^^com.yelp:restaurant("Philz Coffee"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/wPisUIs3F-6r1RXhRKAjow/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/philz-coffee-palo-alto-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=1175, geo=new Location(37.429495, -122.12274, "3191 Middlefield Rd, Palo Alto, CA 94303"), phone="+16502519798"^^tt:phone_number },
C:   { id="KyU7XWDPclmZ3BpdIsd_0Q"^^com.yelp:restaurant("Oren's Hummus"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hZ9fx8ifFPt9Xj9utnd0TA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/orens-hummus-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean"), "mideastern"^^com.yelp:restaurant_cuisine("Middle Eastern")], price=enum moderate, rating=4, review_count=2379, geo=new Location(37.445717, -122.162173, "261 University Ave, Palo Alto, CA 94301"), phone="+16507526492"^^tt:phone_number },
C:   { id="pLqiFFz1JScp8wMMyXcx-w"^^com.yelp:restaurant("Terún"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQxqzOrphM_JId4sJuG6VA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/ter%C3%BAn-palo-alto-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=1673, geo=new Location(37.425993, -122.145453, "448 S California Ave, Palo Alto, CA 94306"), phone="+16506008310"^^tt:phone_number },
C:   { id="gYZbQe-zYyMpd9z1ud0T0w"^^com.yelp:restaurant("La Bodeguita Del Medio"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/Zqz6wF_l9G_HrHG1i_eCng/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-bodeguita-del-medio-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cuban"^^com.yelp:restaurant_cuisine("Cuban"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=1969, geo=new Location(37.42539, -122.1451, "463 S California Ave, Palo Alto, CA 94306"), phone="+16503267762"^^tt:phone_number },
C:   { id="0WDM3JlNBvk2MeOTlu03mg"^^com.yelp:restaurant("Coconuts Caribbean Restaurant & Bar"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/gVksndAr5BsNfHaO2ilaSQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/coconuts-caribbean-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["caribbean"^^com.yelp:restaurant_cuisine("Caribbean")], price=enum moderate, rating=4, review_count=2292, geo=new Location(37.44381, -122.16027, "642 Ramona St, Palo Alto, CA 94301"), phone="+16503299533"^^tt:phone_number },
C:   { id="_mkNOTiQ-kbc1kJHo9RoVA"^^com.yelp:restaurant("Tamarine Restaurant"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/u6KX5WLtw23IMcIJgOSSCw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tamarine-restaurant-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vietnamese"^^com.yelp:restaurant_cuisine("Vietnamese")], price=enum expensive, rating=4, review_count=1888, geo=new Location(37.44881, -122.15833, "546 University Ave, Palo Alto, CA 94301"), phone="+16503258500"^^tt:phone_number },
C:   { id="jwaXc3VVGDFQu1aCoiXwdw"^^com.yelp:restaurant("NOLA Restaurant & Bar"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/aFbcuzteoQ4yN5R9R5-XAg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/nola-restaurant-and-bar-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=3.5, review_count=2915, geo=new Location(37.4450225830078, -122.161323547363, "535 Ramona St, Palo Alto, CA 94301"), phone="+16503282722"^^tt:phone_number }
C: ]]
C: #[count=20];
A: I see Ramen Nagi, Evvia Estiatorio, and Zareen's. Ramen Nagi is rated 4.5 star, Evvia Estiatorio is rated 4.5 star, and Zareen's is rated 4.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
====
# recording/0ecdb3556c17d01b1cc38913f28038e3
U: stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: create a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: B.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="b.");
====
# recording/708ad38204cbb18aa6507e3ae6a873de
U: stop music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Create a playlist called Demo two and add a new song to it.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist(name="demo 2");
UT: @com.spotify.add_song_to_playlist(playlist="demo 2");
====
# recording/2f18b6a44ea3db62f3e2ebc1214ea0a5
U: stop Spotify.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]]
C: #[error=enum http_403];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: are you happy?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]]
C: #[error=enum http_403];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/9951b7f2dedbba4245172be4bde6d53b
U: Music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(20, 5, 14) }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4346728201297332000"^^com.smartnews:article, title="Friend testifies Rittenhouse was ‘freaking out’ after shooting", author="Monique Beals", source="The Hill", summary=" A friend of Kyle Rittenhouse, who fatally shot two people during Black Lives Matter protests last year, testified that the teenager was \"freaking out\" after the shooting . Dominick Black said in court Tuesday that then-17-year-old Rittenhouse was pale and \"really scared\" after he fired shots at an Aug. 2020 protest . Black is set to face charges himself for purchasing the AR-15-style rifle used by Rittenhouse, who at 17 years old was too young to legally buy or own the weapon .", link="https://thehill.com/regulation/court-battles/579845-friend-testifies-rittenhouse-was-freaking-out-after-shooting"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-03T16:24:09.000Z"), mention=["dominick black", "black lives matter", "gaige grosskreutz", "wisconsin"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/headline_4346728201297332287.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/summary_4346728201297332287.mp3"^^tt:url },
C:   { id="4346647694123478500"^^com.smartnews:article, title="Exclusive: More Americans understand LGBTQ people, but visibility has ‘double-edged sword’, GLAAD report says", author="David Oliver, USA TODAY", source="USA TODAY", summary=" GLAAD's annual Accelerating Acceptance Study was released Wednesday . Study: 43% of non-LGBTQ people think gender is not exclusively male and female . 81% of non-LGBTQ people anticipate nonbinary and transgender people will become familiar .", link="https://www.usatoday.com/story/life/health-wellness/2021/11/03/glaad-accelerating-acceptance-more-americans-accept-lgbtq-people/6198204001/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-03T11:00:49.000Z"), mention=["lgbt", "glaad", "sarah kate ellis", "united states"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/headline_4346647694123478760.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/summary_4346647694123478760.mp3"^^tt:url },
C:   { id="4346631730904436700"^^com.smartnews:article, title="How anti-vaxxers and ivermectin advocates have co-opted US local news", source="The Guardian", summary=" WEAR-TV in northern Florida aired a segment on Dr Benjamin Marble, a local doctor who created a free telehealth website offering consultations for Covid-19 . Marble is a member of America’s Frontline Doctors, a rightwing political group that gained notoriety in summer 2020 .", link="https://www.theguardian.com/media/2021/nov/03/how-anti-vaxxers-and-ivermectin-advocates-have-co-opted-local-news"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-03T10:00:41.000Z"), mention=["united states", "simone gold", "covid 19", "affordable care act"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/headline_4346631730904436528.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/summary_4346631730904436528.mp3"^^tt:url },
C:   { id="4346632444036786000"^^com.smartnews:article, title="Guys and guns: Why men are behind the vast majority of America’s gun violence", source="ABC News", summary=" A 19-year-old man opened fire at an Indianapolis FedEx facility in April, killing eight people . The gunman died by suicide, the FBI said this summer, months after the attack .", link="https://abcnews.go.com/US/guys-guns-men-vast-majority-americas-gun-violence/story?id=79125485"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-03T10:00:34.000Z"), mention=["getty images", "united states", "jon cherry"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/headline_4346632444036786387.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/summary_4346632444036786387.mp3"^^tt:url },
C:   { id="4346579686285910000"^^com.smartnews:article, title="Sacramento County Jail Offers To Pay Inmates To Get Vaccinated", author="Velena Jones", source="CBS Sacramento", summary=" Outbreaks at Sacramento County’s two jails are prompting demands of change . Since March 2020, there have been 2,018 positive tests among inmates . The vaccination rate within the jail is only 30%, compared to 70% countywide .", link="https://sacramento.cbslocal.com/2021/11/02/sacramento-jail-inmate-vaccine-incentives/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-03T06:23:26.000Z"), mention=["chevon kothari", "sacramento california", "sacramento county california", "kovr"], headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/headline_4346579686285910269.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211103/voice/summary_4346579686285910269.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable()
C: #[results=[
C:   { id="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), artists=["spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")], genres=["canadian contemporary r&b", "canadian pop", "pop"], release_date=new Date("2020-03-20T00:00:00.000Z"), popularity=87, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), artists=["spotify:artist:7tnIA4ww5dwoyENYz4GM5T"^^org.thingpedia.media-source:artist("The Brazen Youth")], genres=["connecticut indie"], release_date=new Date("2016-11-29T00:00:00.000Z"), popularity=48, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), artists=["spotify:artist:57vWImR43h4CaDao012Ofp"^^org.thingpedia.media-source:artist("Steve Lacy")], genres=["afrofuturism"], release_date=new Date("2017-02-20T00:00:00.000Z"), popularity=88, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), artists=["spotify:artist:4ClziihVpBeFXNyDH83Lde"^^org.thingpedia.media-source:artist("UMI")], genres=["alternative r&b", "bedroom soul", "chill r&b", "indie r&b", "pop", "r&b"], release_date=new Date("2019-10-30T00:00:00.000Z"), popularity=69, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), artists=["spotify:artist:6IE6z7DcZIT4Ml3Fh5Ivch"^^org.thingpedia.media-source:artist("Selena")], genres=["latin pop", "mexican pop", "tejano"], release_date=new Date("1995-01-01T00:00:00.000Z"), popularity=61, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), artists=["spotify:artist:55EarwWraRQY9diMo9Oeul"^^org.thingpedia.media-source:artist("Deb Never")], genres=["indie pop", "indie r&b", "modern indie pop"], release_date=new Date("2019-08-30T00:00:00.000Z"), popularity=46, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), artists=["spotify:artist:5K4W6rqBFWDnAN6FQUkS6x"^^org.thingpedia.media-source:artist("Kanye West"), "spotify:artist:2HPaUgqeutzr3jx5a9WyDV"^^org.thingpedia.media-source:artist("PARTYNEXTDOOR")], genres=["chicago rap", "rap", "pop", "pop rap", "r&b", "toronto rap", "trap", "urban contemporary"], release_date=new Date("2018-06-01T00:00:00.000Z"), popularity=77, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), artists=["spotify:artist:1McMsnEElThX1knmY4oliG"^^org.thingpedia.media-source:artist("Olivia Rodrigo")], genres=["pop"], release_date=new Date("2021-05-21T00:00:00.000Z"), popularity=93, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), artists=["spotify:artist:56OjNTX2bkrdGcB0staUOV"^^org.thingpedia.media-source:artist("A-Wall")], genres=["bedroom pop"], release_date=new Date("2019-08-04T00:00:00.000Z"), popularity=60, __device="XXXXXXXX"^^tt:device_id },
C:   { id="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), artists=["spotify:artist:6S2OmqARrzebs0tKUEyXyp"^^org.thingpedia.media-source:artist("Demi Lovato")], genres=["dance pop", "pop", "post-teen pop"], release_date=new Date("2013-01-01T00:00:00.000Z"), popularity=80, __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I see Save Your Tears, Center of Gravity, and Dark Red. Save Your Tears is by The Weeknd, Center of Gravity The Brazen Youth wrote, and Dark Red is by Steve Lacy.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: Play me some of my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/d5e8b1fc8a0190559dacd9f7b251e5e2
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/53683a35156c0cec1f1a157d7a0a0697
U: Cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c777a2c3a0fea3ea468f590746133a6a
U: Play playlist classroom.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "classroom" => @org.thingpedia.media-player.play(playable=id);
====
# recording/624d10a5d90aefde4d8397662df95378
U: play dub baby.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "dub baby" => @org.thingpedia.media-player.play(playable=id);
====
# recording/930c97d420374ec1347e5eaefa9eb963
U: Play some Bob.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("bob")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Bob Marley & The Wailers on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "demo" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/500113184c65b760c46d89269c6728dd
U: Play the problem with Jon Stewart.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "problem with jon stewart" => @org.thingpedia.media-player.play(playable=id);
====
# recording/03bf910aa2dcf48e32f9164b1bcc3e58
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/6949f892d1747c92c46926b61e68ce1d
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/7ef8ae66e430acbaa9b52fd375cf7a13
U: Play Beethoven.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("beethoven")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Ludwig van Beethoven on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Make a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Demo 2
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Demo 2");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Demo 2")
C: #[results=[
C:   { name="Demo 2", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song in my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
====
# recording/e26fa0ada50bd37dadbf8e8d0f77388d
U: Play Teddy Pendergrass TKO.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("teddy pendergrass tko")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/f638aa3283d72743a802486c9ec7aa19
U: What's the latest news on vaccines?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(date desc of @com.smartnews.article(keyword="vaccines"))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(date desc of @com.smartnews.article(keyword="vaccines"))[1]
C: #[results=[
C:   { id="4345806767553261000"^^com.smartnews:article, title="Australia to formally recognise more international vaccines from India, China", source="Australian Broadcasting Corporation", summary=" Only vaccines approved for use in Australia plus Covishield from India and Sinovac from China can be recognised . The Therapeutic Goods Administration has now added two more to the list .", link="https://www.abc.net.au/news/2021-11-01/tga-covid-vaccine-recognised-international-travel/100584912"^^tt:url, category=["world"^^com.smartnews:category("world"), "australia"^^com.smartnews:category("australia")], date=new Date("2021-11-01T03:17:35.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345806767553260875.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345806767553260875.mp3"^^tt:url, keyword="vaccines" }
C: ]];
A: Here is the news.
A: Australia to formally recognise more international vaccines from India, China.  Only vaccines approved for use in Australia plus Covishield from India and Sinovac from China can be recognised . The Therapeutic Goods Administration has now added two more to the list ..
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: get me the news and the weather.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.current();
====
# recording/0c8b2b07701a00c118cc7fcac0aec4bd
U: Play playlist, good morning.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "good morning" => @org.thingpedia.media-player.play(playable=id);
====
# recording/e50bcd04e4133e9598b0c65788350751
U: stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Tell me about the news about COVID KQED.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article(keyword="covid") filter source =~ "kqed";
====
# recording/f7e5646525afc2e92a94f7d9e7f81a70
U: play blink 182.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("blink 182")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6FBDaR13swtiWwGhX1WQsP"^^org.thingpedia.media-source:artist("blink-182")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m1hi0nfMR9vdGC8UcrnwU"^^org.thingpedia.media-source:playable("All The Small Things"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1oTo3ijRbaDAtrjJrGAPSw"^^org.thingpedia.media-source:playable("I Miss You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1fJFuvU2ldmeAm5nFIHcPP"^^org.thingpedia.media-source:playable("First Date"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6WkSUgo1VdpzgtiXKlFPcY"^^org.thingpedia.media-source:playable("Dammit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:652N05EcNH1a4bIlUixQE2"^^org.thingpedia.media-source:playable("Enema Of The State"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3nHpBmW5wJXGeC3ojBkpey"^^org.thingpedia.media-source:playable("Take Off Your Pants And Jacket"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6DMUAqxiFfLdqXv0vqcrQA"^^org.thingpedia.media-source:playable("blink-182"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4hBTxv4QRPePXCFcEI7Vjp"^^org.thingpedia.media-source:playable("blink-182"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2CoVyQi2zIifUNBcVR0gEH"^^org.thingpedia.media-source:playable("Dude Ranch"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by blink-182 on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play pop punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "pop punk") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6FBDaR13swtiWwGhX1WQsP"^^org.thingpedia.media-source:artist("blink-182")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m1hi0nfMR9vdGC8UcrnwU"^^org.thingpedia.media-source:playable("All The Small Things"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1oTo3ijRbaDAtrjJrGAPSw"^^org.thingpedia.media-source:playable("I Miss You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1fJFuvU2ldmeAm5nFIHcPP"^^org.thingpedia.media-source:playable("First Date"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6WkSUgo1VdpzgtiXKlFPcY"^^org.thingpedia.media-source:playable("Dammit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:652N05EcNH1a4bIlUixQE2"^^org.thingpedia.media-source:playable("Enema Of The State"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3nHpBmW5wJXGeC3ojBkpey"^^org.thingpedia.media-source:playable("Take Off Your Pants And Jacket"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6DMUAqxiFfLdqXv0vqcrQA"^^org.thingpedia.media-source:playable("blink-182"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4hBTxv4QRPePXCFcEI7Vjp"^^org.thingpedia.media-source:playable("blink-182"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2CoVyQi2zIifUNBcVR0gEH"^^org.thingpedia.media-source:playable("Dude Ranch"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "pop punk") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7j31rVgGX9Q2blT92VBEA0"^^org.thingpedia.media-source:playable("Teenagers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6SpLc7EXZIPpy0sVko0aoU"^^org.thingpedia.media-source:playable("Misery Business"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjY7rpaAQvKwpdUliHx0d"^^org.thingpedia.media-source:playable("Still into You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0JJP0IS4w0fJx01EcrfkDe"^^org.thingpedia.media-source:playable("Dear Maria, Count Me In"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m1hi0nfMR9vdGC8UcrnwU"^^org.thingpedia.media-source:playable("All The Small Things"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played pop punk music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play My Chemical Romance.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("my chemical romance")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/3e0c33c1ac73f3b8a1f88dc1d3873649
U: What is the weather at Stanford?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("stanford"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto, California"))
C: #[results=[
C:   { temperature=21.4C, wind_speed=1.4mps, humidity=65.4, cloudiness=0.8, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto, California") }
C: ]];
A: It is sunny today in Stanford, Palo Alto, California and the temperature is 70.5 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Play.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/7174d1d6f968f30dc1ed9aa2bec51116
U: Play playlist nighttime.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "nighttime" => @org.thingpedia.media-player.play(playable=id);
====
# recording/73a6ef81eedf49e8c5669b47ea1505f3
U: What time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(17, 12, 54) }
C: ]];
A: Right now, it's 5:12 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: is it cold outside?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [temperature] of @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(17, 12, 54) }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), temperature=20.4C, status=enum sunny }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 68.7 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Play hey Jude.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hey jude" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(17, 12, 54) }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), temperature=20.4C, status=enum sunny }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hey jude")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2015"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Hey Jude - Remastered 2015 on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Stop playing.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.stop();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(17, 12, 54) }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), temperature=20.4C, status=enum sunny }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hey jude")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2015"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.stop()
C: #[results=[
C:   {}
C: ]];
A: Your request was completed successfully.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: can you talk louder?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.volume-control.raise_volume();
====
# recording/c90e5f8281c46dfd7c599b5b46af38de
U: Play moonlight Sonata. First movement by Beethoven.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("beethoven")) && id =~ "moonlight sonata first movement" => @org.thingpedia.media-player.play(playable=id);
====
# recording/48179df1fde32d7d5edd0e2ba8688e10
U: How are you doing?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: How are you doing?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Can you tell me the weather in San Francisco?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("san francisco"));
====
# recording/68b8d7a6051508261cb9d511f8e6437b
U: Play Elvis.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("elvis")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:43ZHCT0cAZBISjO8DG9PnE"^^org.thingpedia.media-source:artist("Elvis Presley")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:44AyOl4qVkzS48vBsbNXaC"^^org.thingpedia.media-source:playable("Can't Help Falling in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1H5IfYyIIAlgDX8zguUzns"^^org.thingpedia.media-source:playable("Suspicious Minds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7zMUCLm1TN9o9JlLISztxO"^^org.thingpedia.media-source:playable("Burning Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:64Ny7djQ6rNJspquof2KoX"^^org.thingpedia.media-source:playable("Hound Dog"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0D1pEisM3QkiacGXJe5dmd"^^org.thingpedia.media-source:playable("(You're The) Devil in Disguise"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0QVoYzGd1p8Z3ohEaM0lsc"^^org.thingpedia.media-source:playable("Elvis 30 #1 Hits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7xe8VI48TxUpU1IIo0RfGi"^^org.thingpedia.media-source:playable("Blue Hawaii"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0C3t1htEDTFKcg7F2rNbek"^^org.thingpedia.media-source:playable("Elvis' Golden Records"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3ekkFrfotMsEAKc5g71GHk"^^org.thingpedia.media-source:playable("From Elvis in Memphis"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6zk4RKl6JFlgLCV4Z7DQ7N"^^org.thingpedia.media-source:playable("Elvis' Christmas Album"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Elvis Presley on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play Elvis.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("elvis")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/4705114bfa8243c8730495dee9a76842
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/83ced1f927d7b90d80efe6e3f668e463
U: hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/383a7f3e5ed46043dc7a37141503f7ba
U: Oh, you know what? Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/5cd584693a1811711493a9949aaf5f62
U: Play.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/fd28d455b98014cc8b9775cddf1fb9ba
U: play Mozart.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7FpzE0zW8buNvjFaQKvplU"^^org.thingpedia.media-source:playable("Requiem in D Minor, K. 626: 3. Sequentia: Dies irae - Live"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7K0BgWO9wDd6DUguAcWUTm"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620, Act II: Der Hölle Rache kocht in meinem Herzen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3UWUIQSH5GeUTU4SBr2ZXy"^^org.thingpedia.media-source:playable("String Quartet No. 22 in B-Flat Major, K. 589: III. Menuetto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5vQvZuaLwPTfWLCtOIHAYe"^^org.thingpedia.media-source:playable("Don Giovanni, K. 527, Act II: \"Don Giovanni, a cenar teco\""), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2TFdIo4TlxWgJYWlhvekmw"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620: Overture"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2mAjEaQ3xqkNCd1EnSyauL"^^org.thingpedia.media-source:playable("Landscapes: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0RtvwBIdJDVGEYSAdn8FFG"^^org.thingpedia.media-source:playable("Mozart - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6dB3FlrZkT3O68SsFQMIkf"^^org.thingpedia.media-source:playable("Classical Moods: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6EHU9DvRrehDwomuvyGzCa"^^org.thingpedia.media-source:playable("Mozart: Horn Concerto No. 2"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Ot9Ap5rO9ojNwW7CuZSXW"^^org.thingpedia.media-source:playable("Mozart: Die Entführung aus dem Serail, K. 384: Martern aller Arten (Arr. Spindler for Oboe and Piano)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Create a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7FpzE0zW8buNvjFaQKvplU"^^org.thingpedia.media-source:playable("Requiem in D Minor, K. 626: 3. Sequentia: Dies irae - Live"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7K0BgWO9wDd6DUguAcWUTm"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620, Act II: Der Hölle Rache kocht in meinem Herzen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3UWUIQSH5GeUTU4SBr2ZXy"^^org.thingpedia.media-source:playable("String Quartet No. 22 in B-Flat Major, K. 589: III. Menuetto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5vQvZuaLwPTfWLCtOIHAYe"^^org.thingpedia.media-source:playable("Don Giovanni, K. 527, Act II: \"Don Giovanni, a cenar teco\""), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2TFdIo4TlxWgJYWlhvekmw"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620: Overture"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2mAjEaQ3xqkNCd1EnSyauL"^^org.thingpedia.media-source:playable("Landscapes: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0RtvwBIdJDVGEYSAdn8FFG"^^org.thingpedia.media-source:playable("Mozart - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6dB3FlrZkT3O68SsFQMIkf"^^org.thingpedia.media-source:playable("Classical Moods: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6EHU9DvRrehDwomuvyGzCa"^^org.thingpedia.media-source:playable("Mozart: Horn Concerto No. 2"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Ot9Ap5rO9ojNwW7CuZSXW"^^org.thingpedia.media-source:playable("Mozart: Die Entführung aus dem Serail, K. 384: Martern aller Arten (Arr. Spindler for Oboe and Piano)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Classic.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Classic.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7FpzE0zW8buNvjFaQKvplU"^^org.thingpedia.media-source:playable("Requiem in D Minor, K. 626: 3. Sequentia: Dies irae - Live"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7K0BgWO9wDd6DUguAcWUTm"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620, Act II: Der Hölle Rache kocht in meinem Herzen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3UWUIQSH5GeUTU4SBr2ZXy"^^org.thingpedia.media-source:playable("String Quartet No. 22 in B-Flat Major, K. 589: III. Menuetto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5vQvZuaLwPTfWLCtOIHAYe"^^org.thingpedia.media-source:playable("Don Giovanni, K. 527, Act II: \"Don Giovanni, a cenar teco\""), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2TFdIo4TlxWgJYWlhvekmw"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620: Overture"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2mAjEaQ3xqkNCd1EnSyauL"^^org.thingpedia.media-source:playable("Landscapes: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0RtvwBIdJDVGEYSAdn8FFG"^^org.thingpedia.media-source:playable("Mozart - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6dB3FlrZkT3O68SsFQMIkf"^^org.thingpedia.media-source:playable("Classical Moods: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6EHU9DvRrehDwomuvyGzCa"^^org.thingpedia.media-source:playable("Mozart: Horn Concerto No. 2"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Ot9Ap5rO9ojNwW7CuZSXW"^^org.thingpedia.media-source:playable("Mozart: Die Entführung aus dem Serail, K. 384: Martern aller Arten (Arr. Spindler for Oboe and Piano)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Classic.")
C: #[results=[
C:   { name="Classic.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this song to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7FpzE0zW8buNvjFaQKvplU"^^org.thingpedia.media-source:playable("Requiem in D Minor, K. 626: 3. Sequentia: Dies irae - Live"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7K0BgWO9wDd6DUguAcWUTm"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620, Act II: Der Hölle Rache kocht in meinem Herzen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3UWUIQSH5GeUTU4SBr2ZXy"^^org.thingpedia.media-source:playable("String Quartet No. 22 in B-Flat Major, K. 589: III. Menuetto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5vQvZuaLwPTfWLCtOIHAYe"^^org.thingpedia.media-source:playable("Don Giovanni, K. 527, Act II: \"Don Giovanni, a cenar teco\""), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2TFdIo4TlxWgJYWlhvekmw"^^org.thingpedia.media-source:playable("Die Zauberflöte, K. 620: Overture"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2mAjEaQ3xqkNCd1EnSyauL"^^org.thingpedia.media-source:playable("Landscapes: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0RtvwBIdJDVGEYSAdn8FFG"^^org.thingpedia.media-source:playable("Mozart - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6dB3FlrZkT3O68SsFQMIkf"^^org.thingpedia.media-source:playable("Classical Moods: Mozart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6EHU9DvRrehDwomuvyGzCa"^^org.thingpedia.media-source:playable("Mozart: Horn Concerto No. 2"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Ot9Ap5rO9ojNwW7CuZSXW"^^org.thingpedia.media-source:playable("Mozart: Die Entführung aus dem Serail, K. 384: Martern aller Arten (Arr. Spindler for Oboe and Piano)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Classic.")
C: #[results=[
C:   { name="Classic.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Classic.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="Classic.", song=id);
====
# recording/281a6134111a819f49a358f0904cd289
U: Play levitating by Dua Lipa.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("dua lipa")) && id =~ "levitating" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6M2wZ9GZgrQXHCFfjv46we"^^org.thingpedia.media-source:artist("Dua Lipa")) && id =~ "levitating")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:463CkQjx2Zk1yXoBuierM9"^^org.thingpedia.media-source:playable("Levitating (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Levitating (feat. DaBaby) on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Chloe.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("chloe")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6M2wZ9GZgrQXHCFfjv46we"^^org.thingpedia.media-source:artist("Dua Lipa")) && id =~ "levitating")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:463CkQjx2Zk1yXoBuierM9"^^org.thingpedia.media-source:playable("Levitating (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1FtBEIWAwvw5ymBen5GICR"^^org.thingpedia.media-source:artist("Chlöe")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SixeLvPsYpk7qq9lo5xYg"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4N8qhDeqx8AHoEhMnYEC2Y"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Chlöe on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Megan the stallion.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("megan the stallion")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6M2wZ9GZgrQXHCFfjv46we"^^org.thingpedia.media-source:artist("Dua Lipa")) && id =~ "levitating")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:463CkQjx2Zk1yXoBuierM9"^^org.thingpedia.media-source:playable("Levitating (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1FtBEIWAwvw5ymBen5GICR"^^org.thingpedia.media-source:artist("Chlöe")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SixeLvPsYpk7qq9lo5xYg"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4N8qhDeqx8AHoEhMnYEC2Y"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:181bsRPaVXVlUKXrxwZfHK"^^org.thingpedia.media-source:artist("Megan Thee Stallion")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5zNW5ARjYhJQJz1AChP33n"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0A1hoCfMLkiAgvhWkkucJa"^^org.thingpedia.media-source:playable("Body"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4aarlAfLKVCTxUDNgbwhjH"^^org.thingpedia.media-source:playable("Cry Baby (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2GbS8QZToLioxL8XMEwX3P"^^org.thingpedia.media-source:playable("Cognac Queen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jRHehB5ulTMKfK5WaqDqc"^^org.thingpedia.media-source:playable("What’s New"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KjckH1EE6HRRurMIXSc0r"^^org.thingpedia.media-source:playable("Good News"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6B26OzQRObxAp1tbf8jeTq"^^org.thingpedia.media-source:playable("Something for Thee Hotties"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7gEGuvkVs79hY4tG7OYnzx"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:26jEIrN7WSAnVQXXUmLRSN"^^org.thingpedia.media-source:playable("Tina Snow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6Lo6ylJg4qbFfxicPEOzMI"^^org.thingpedia.media-source:playable("Suga"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Megan Thee Stallion on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Oliver tree.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("oliver tree")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6M2wZ9GZgrQXHCFfjv46we"^^org.thingpedia.media-source:artist("Dua Lipa")) && id =~ "levitating")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:463CkQjx2Zk1yXoBuierM9"^^org.thingpedia.media-source:playable("Levitating (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1FtBEIWAwvw5ymBen5GICR"^^org.thingpedia.media-source:artist("Chlöe")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SixeLvPsYpk7qq9lo5xYg"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4N8qhDeqx8AHoEhMnYEC2Y"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:181bsRPaVXVlUKXrxwZfHK"^^org.thingpedia.media-source:artist("Megan Thee Stallion")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5zNW5ARjYhJQJz1AChP33n"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0A1hoCfMLkiAgvhWkkucJa"^^org.thingpedia.media-source:playable("Body"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4aarlAfLKVCTxUDNgbwhjH"^^org.thingpedia.media-source:playable("Cry Baby (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2GbS8QZToLioxL8XMEwX3P"^^org.thingpedia.media-source:playable("Cognac Queen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jRHehB5ulTMKfK5WaqDqc"^^org.thingpedia.media-source:playable("What’s New"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KjckH1EE6HRRurMIXSc0r"^^org.thingpedia.media-source:playable("Good News"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6B26OzQRObxAp1tbf8jeTq"^^org.thingpedia.media-source:playable("Something for Thee Hotties"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7gEGuvkVs79hY4tG7OYnzx"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:26jEIrN7WSAnVQXXUmLRSN"^^org.thingpedia.media-source:playable("Tina Snow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6Lo6ylJg4qbFfxicPEOzMI"^^org.thingpedia.media-source:playable("Suga"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6TLwD7HPWuiOzvXEa3oCNe"^^org.thingpedia.media-source:artist("Oliver Tree")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eu4C55hL6x29mmeAjytzC"^^org.thingpedia.media-source:playable("Life Goes On"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BIIJgBJJ7NhhCv4MI6n7w"^^org.thingpedia.media-source:playable("Alien Boy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Ph8QwsRfZunN5e1GGBIqa"^^org.thingpedia.media-source:playable("Hurt"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0jk6J6B9ivegJc7dTg10Mp"^^org.thingpedia.media-source:playable("Let Me Down"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2PFnwW05Wh0MYkfZxSwfuf"^^org.thingpedia.media-source:playable("Miracle Man"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5vP0fNictdWyU48o83Q7ob"^^org.thingpedia.media-source:playable("Ugly is Beautiful: Shorter, Thicker & Uglier (Deluxe)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1HmWQo43Gt8BR2dylfv3o4"^^org.thingpedia.media-source:playable("Ugly is Beautiful"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4M9U7jAHw79yg244MFUhyt"^^org.thingpedia.media-source:playable("Life Goes On (Clean Bandit Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3D0rnUlJQi2H8ebk4iKVue"^^org.thingpedia.media-source:playable("Welcome To The Internet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6QtloaQlP1TQEDBMJsTtG8"^^org.thingpedia.media-source:playable("Turn It Up (feat. Tommy Cash)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Oliver Tree on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Sleepy Hollow.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("sleepy hollow")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6M2wZ9GZgrQXHCFfjv46we"^^org.thingpedia.media-source:artist("Dua Lipa")) && id =~ "levitating")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:463CkQjx2Zk1yXoBuierM9"^^org.thingpedia.media-source:playable("Levitating (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1FtBEIWAwvw5ymBen5GICR"^^org.thingpedia.media-source:artist("Chlöe")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SixeLvPsYpk7qq9lo5xYg"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4N8qhDeqx8AHoEhMnYEC2Y"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:181bsRPaVXVlUKXrxwZfHK"^^org.thingpedia.media-source:artist("Megan Thee Stallion")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5zNW5ARjYhJQJz1AChP33n"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0A1hoCfMLkiAgvhWkkucJa"^^org.thingpedia.media-source:playable("Body"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4aarlAfLKVCTxUDNgbwhjH"^^org.thingpedia.media-source:playable("Cry Baby (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2GbS8QZToLioxL8XMEwX3P"^^org.thingpedia.media-source:playable("Cognac Queen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jRHehB5ulTMKfK5WaqDqc"^^org.thingpedia.media-source:playable("What’s New"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KjckH1EE6HRRurMIXSc0r"^^org.thingpedia.media-source:playable("Good News"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6B26OzQRObxAp1tbf8jeTq"^^org.thingpedia.media-source:playable("Something for Thee Hotties"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7gEGuvkVs79hY4tG7OYnzx"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:26jEIrN7WSAnVQXXUmLRSN"^^org.thingpedia.media-source:playable("Tina Snow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6Lo6ylJg4qbFfxicPEOzMI"^^org.thingpedia.media-source:playable("Suga"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6TLwD7HPWuiOzvXEa3oCNe"^^org.thingpedia.media-source:artist("Oliver Tree")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eu4C55hL6x29mmeAjytzC"^^org.thingpedia.media-source:playable("Life Goes On"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BIIJgBJJ7NhhCv4MI6n7w"^^org.thingpedia.media-source:playable("Alien Boy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Ph8QwsRfZunN5e1GGBIqa"^^org.thingpedia.media-source:playable("Hurt"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0jk6J6B9ivegJc7dTg10Mp"^^org.thingpedia.media-source:playable("Let Me Down"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2PFnwW05Wh0MYkfZxSwfuf"^^org.thingpedia.media-source:playable("Miracle Man"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5vP0fNictdWyU48o83Q7ob"^^org.thingpedia.media-source:playable("Ugly is Beautiful: Shorter, Thicker & Uglier (Deluxe)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1HmWQo43Gt8BR2dylfv3o4"^^org.thingpedia.media-source:playable("Ugly is Beautiful"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4M9U7jAHw79yg244MFUhyt"^^org.thingpedia.media-source:playable("Life Goes On (Clean Bandit Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3D0rnUlJQi2H8ebk4iKVue"^^org.thingpedia.media-source:playable("Welcome To The Internet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6QtloaQlP1TQEDBMJsTtG8"^^org.thingpedia.media-source:playable("Turn It Up (feat. Tommy Cash)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6EPlBSH2RSiettczlz7ihV"^^org.thingpedia.media-source:artist("Sleepy Hallow")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4XvcHTUfIlWfyJTRG0aqlo"^^org.thingpedia.media-source:playable("2055"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0mG6igzxbH55XRyq3ygEh8"^^org.thingpedia.media-source:playable("2055"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3m49rgJQUz5GU07RWjf5SH"^^org.thingpedia.media-source:playable("Molly"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TYq1cxJXPGGjO0bYHDH2L"^^org.thingpedia.media-source:playable("Basketball Dreams (Intro)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SnQILxl7lE7J8bRgM3NSb"^^org.thingpedia.media-source:playable("1999"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38nZLvJx8A9p4YYpTG5iFP"^^org.thingpedia.media-source:playable("Still Sleep?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0ZjOFfItjIA9YbzhERRIBr"^^org.thingpedia.media-source:playable("Still Sleep? (Deluxe)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3P7EIeXmzJQNT1xs4Q6Xzd"^^org.thingpedia.media-source:playable("Sleepy Hallow Presents: Sleepy For President"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DiZ7mmFppDNbEtoRPvSGf"^^org.thingpedia.media-source:playable("2055"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0giyK2LuJ6wcfVN2QXDIlB"^^org.thingpedia.media-source:playable("DON'T SLEEP"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Sleepy Hallow on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play the weekend.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("weekend")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6M2wZ9GZgrQXHCFfjv46we"^^org.thingpedia.media-source:artist("Dua Lipa")) && id =~ "levitating")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:463CkQjx2Zk1yXoBuierM9"^^org.thingpedia.media-source:playable("Levitating (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1FtBEIWAwvw5ymBen5GICR"^^org.thingpedia.media-source:artist("Chlöe")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SixeLvPsYpk7qq9lo5xYg"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4N8qhDeqx8AHoEhMnYEC2Y"^^org.thingpedia.media-source:playable("Have Mercy"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:181bsRPaVXVlUKXrxwZfHK"^^org.thingpedia.media-source:artist("Megan Thee Stallion")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5zNW5ARjYhJQJz1AChP33n"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0A1hoCfMLkiAgvhWkkucJa"^^org.thingpedia.media-source:playable("Body"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4aarlAfLKVCTxUDNgbwhjH"^^org.thingpedia.media-source:playable("Cry Baby (feat. DaBaby)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2GbS8QZToLioxL8XMEwX3P"^^org.thingpedia.media-source:playable("Cognac Queen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jRHehB5ulTMKfK5WaqDqc"^^org.thingpedia.media-source:playable("What’s New"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0KjckH1EE6HRRurMIXSc0r"^^org.thingpedia.media-source:playable("Good News"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6B26OzQRObxAp1tbf8jeTq"^^org.thingpedia.media-source:playable("Something for Thee Hotties"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7gEGuvkVs79hY4tG7OYnzx"^^org.thingpedia.media-source:playable("Thot Shit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:26jEIrN7WSAnVQXXUmLRSN"^^org.thingpedia.media-source:playable("Tina Snow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6Lo6ylJg4qbFfxicPEOzMI"^^org.thingpedia.media-source:playable("Suga"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6TLwD7HPWuiOzvXEa3oCNe"^^org.thingpedia.media-source:artist("Oliver Tree")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eu4C55hL6x29mmeAjytzC"^^org.thingpedia.media-source:playable("Life Goes On"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BIIJgBJJ7NhhCv4MI6n7w"^^org.thingpedia.media-source:playable("Alien Boy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Ph8QwsRfZunN5e1GGBIqa"^^org.thingpedia.media-source:playable("Hurt"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0jk6J6B9ivegJc7dTg10Mp"^^org.thingpedia.media-source:playable("Let Me Down"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2PFnwW05Wh0MYkfZxSwfuf"^^org.thingpedia.media-source:playable("Miracle Man"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5vP0fNictdWyU48o83Q7ob"^^org.thingpedia.media-source:playable("Ugly is Beautiful: Shorter, Thicker & Uglier (Deluxe)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1HmWQo43Gt8BR2dylfv3o4"^^org.thingpedia.media-source:playable("Ugly is Beautiful"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4M9U7jAHw79yg244MFUhyt"^^org.thingpedia.media-source:playable("Life Goes On (Clean Bandit Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3D0rnUlJQi2H8ebk4iKVue"^^org.thingpedia.media-source:playable("Welcome To The Internet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6QtloaQlP1TQEDBMJsTtG8"^^org.thingpedia.media-source:playable("Turn It Up (feat. Tommy Cash)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6EPlBSH2RSiettczlz7ihV"^^org.thingpedia.media-source:artist("Sleepy Hallow")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4XvcHTUfIlWfyJTRG0aqlo"^^org.thingpedia.media-source:playable("2055"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0mG6igzxbH55XRyq3ygEh8"^^org.thingpedia.media-source:playable("2055"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3m49rgJQUz5GU07RWjf5SH"^^org.thingpedia.media-source:playable("Molly"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TYq1cxJXPGGjO0bYHDH2L"^^org.thingpedia.media-source:playable("Basketball Dreams (Intro)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5SnQILxl7lE7J8bRgM3NSb"^^org.thingpedia.media-source:playable("1999"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:38nZLvJx8A9p4YYpTG5iFP"^^org.thingpedia.media-source:playable("Still Sleep?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0ZjOFfItjIA9YbzhERRIBr"^^org.thingpedia.media-source:playable("Still Sleep? (Deluxe)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3P7EIeXmzJQNT1xs4Q6Xzd"^^org.thingpedia.media-source:playable("Sleepy Hallow Presents: Sleepy For President"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DiZ7mmFppDNbEtoRPvSGf"^^org.thingpedia.media-source:playable("2055"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0giyK2LuJ6wcfVN2QXDIlB"^^org.thingpedia.media-source:playable("DON'T SLEEP"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0VjIjW4GlUZAMYd2vXMi3b"^^org.thingpedia.media-source:playable("Blinding Lights"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37BZB0z9T8Xu7U3e65qxFy"^^org.thingpedia.media-source:playable("Save Your Tears (with Ariana Grande) (Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6OGogr19zPTM4BALXuMQpF"^^org.thingpedia.media-source:playable("Take My Breath"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fBv7CLKzipRk6EC6TWHOB"^^org.thingpedia.media-source:playable("The Hills"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4yP0hdKOZPNshxUOjY0cZj"^^org.thingpedia.media-source:playable("After Hours"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2ODvWsOgouMbaA5xf0RkJe"^^org.thingpedia.media-source:playable("Starboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0P3oVJBFOv3TDXlYRhGL7s"^^org.thingpedia.media-source:playable("Beauty Behind The Madness"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2fyOpT5c9kxR8zbDh6UtXh"^^org.thingpedia.media-source:playable("Save Your Tears (Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5EbpxRwbbpCJUepbqVTZ1U"^^org.thingpedia.media-source:playable("Trilogy"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by The Weeknd on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play the weekend with Ariana Grande.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("weekend")) && contains(artists, null^^org.thingpedia.media-source:artist("ariana grande")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/f6b51d527c2e2b1351d3110c0c3f153b
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/783a534e34cfb4955dedc8df10d2acdf
U: hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: Play spot.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "spot" => @org.thingpedia.media-player.play(playable=id);
====
# recording/42a2148f30f2f67ef2147f5c5c45032d
U: Create a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="afternoon")
C: #[results=[
C:   { name="afternoon", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Never mind.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Never mind.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="afternoon")
C: #[results=[
C:   { name="afternoon", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Never mind.")
C: #[results=[
C:   { name="Never mind.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist for you named Never mind.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Nirvana.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("nirvana")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="afternoon")
C: #[results=[
C:   { name="afternoon", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Never mind.")
C: #[results=[
C:   { name="Never mind.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6olE6TJLqED3rqDCT0FyPh"^^org.thingpedia.media-source:artist("Nirvana")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5ghIJDpPoe3CfHMGu71E6T"^^org.thingpedia.media-source:playable("Smells Like Teen Spirit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4P5KoWXOxwuobLmHXLMobV"^^org.thingpedia.media-source:playable("Come As You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:11LmqTE2naFULdEP94AUBa"^^org.thingpedia.media-source:playable("Heart-Shaped Box"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2YodwKJnbPyNKe8XXSE9V7"^^org.thingpedia.media-source:playable("Lithium"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:30HCB1FoE77IfGRyNv4eFq"^^org.thingpedia.media-source:playable("In Bloom"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2guirTSEqLizK7j9i1MTTZ"^^org.thingpedia.media-source:playable("Nevermind (Remastered)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1To7kv722A8SpZF789MZy7"^^org.thingpedia.media-source:playable("MTV Unplugged In New York"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6ohX7moZZnF1FwYrli1OJ6"^^org.thingpedia.media-source:playable("In Utero - 20th Anniversary - Deluxe Edition"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7wOOA7l306K8HfBKfPoafr"^^org.thingpedia.media-source:playable("In Utero - 20th Anniversary Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6ymAdkpotvyqpc52PH8rHZ"^^org.thingpedia.media-source:playable("On A Plain / Lithium / Breed (Live)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Nirvana on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="afternoon")
C: #[results=[
C:   { name="afternoon", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Never mind.")
C: #[results=[
C:   { name="Never mind.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6olE6TJLqED3rqDCT0FyPh"^^org.thingpedia.media-source:artist("Nirvana")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5ghIJDpPoe3CfHMGu71E6T"^^org.thingpedia.media-source:playable("Smells Like Teen Spirit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4P5KoWXOxwuobLmHXLMobV"^^org.thingpedia.media-source:playable("Come As You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:11LmqTE2naFULdEP94AUBa"^^org.thingpedia.media-source:playable("Heart-Shaped Box"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2YodwKJnbPyNKe8XXSE9V7"^^org.thingpedia.media-source:playable("Lithium"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:30HCB1FoE77IfGRyNv4eFq"^^org.thingpedia.media-source:playable("In Bloom"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2guirTSEqLizK7j9i1MTTZ"^^org.thingpedia.media-source:playable("Nevermind (Remastered)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1To7kv722A8SpZF789MZy7"^^org.thingpedia.media-source:playable("MTV Unplugged In New York"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6ohX7moZZnF1FwYrli1OJ6"^^org.thingpedia.media-source:playable("In Utero - 20th Anniversary - Deluxe Edition"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:7wOOA7l306K8HfBKfPoafr"^^org.thingpedia.media-source:playable("In Utero - 20th Anniversary Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6ymAdkpotvyqpc52PH8rHZ"^^org.thingpedia.media-source:playable("On A Plain / Lithium / Breed (Live)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Never mind.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="Never mind.", song=id);
====
# recording/3c33ec74fa935402115f221a64c865b2
U: Play my.Play list.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() => @org.thingpedia.media-player.play(playable=id);
====
# recording/d9a45d47582c9308ea2436eb58d1ccc4
U: stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]]
C: #[error=enum http_403];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]]
C: #[error=enum http_403];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: To say hey Jeannie.Play this podcast from your momma.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "your momma" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/5a2e544d6bef434c2677118b0ba168aa
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/4afe9affe48ee8d7125bd1745045b202
U: Never mind.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5674f01ba26e55acdd6e873d09367b15
U: Play some Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/3afdd3e88e347442096f122e42de5fd0
U: Get me the news and the weather in San Francisco.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.current(location=new Location("san francisco"));
====
# recording/693155f9cef3ce08e8aa582a0f589daf
U: play Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4tZwfgrHOc3mvqYlEYSvVi"^^org.thingpedia.media-source:artist("Daft Punk")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Foc5Q5nqNiosCNqttzHof"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers) - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DiWol3AO6WpXZgp0goxAV"^^org.thingpedia.media-source:playable("One More Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:69kOkLUCkxIZYexIgSG8rq"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1pKYYY0dkg23sQQXi0Q5zN"^^org.thingpedia.media-source:playable("Around the World"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5W3cjX2J3tjhG8zb6u0qHn"^^org.thingpedia.media-source:playable("Harder, Better, Faster, Stronger"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2noRn2Aes5aoNVsU6iWThc"^^org.thingpedia.media-source:playable("Discovery"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4m2880jivSbbyEGAKfITCa"^^org.thingpedia.media-source:playable("Random Access Memories"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5uRdvUR7xCnHmUW8n64n9y"^^org.thingpedia.media-source:playable("Homework"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2ePFIvZKMe8zefATp9ofFA"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers) [Radio Edit]"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3AMXFnwHWXCvNr5NCCpLZI"^^org.thingpedia.media-source:playable("TRON: Legacy - The Complete Edition (Original Motion Picture Soundtrack)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Daft Punk on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/fb0c9a9b5b0ac7995a1147f09a71cfdd
U: Play.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=5s) => @com.smartnews.article()
C: #[results=[
C:   { id="4345945369637559000"^^com.smartnews:article, title="Domestic violence: Teaching kids skills to stay safe in relationships, prevent abuse", author="Terry DeMio, Cincinnati Enquirer", source="The Enquirer", summary=" Beyond the Bruises is a three-part Enquirer report on the reality and legacy of domestic violence . An analysis of Hamilton County court dockets in April 2020 shows about one in four perpetrators and survivors had at least one relative arrested for domestic violence . Across the Cincinnati region and Northern Kentucky, students get lessons that can end domestic violence .", link="https://www.cincinnati.com/in-depth/news/2021/10/28/cincinnati-children-violence-prevention-education-relationship-violence-abuse-students-school-teens/5783780001/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-01T12:30:18.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345945369637558810.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345945369637558810.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Create a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=5s) => @com.smartnews.article()
C: #[results=[
C:   { id="4345945369637559000"^^com.smartnews:article, title="Domestic violence: Teaching kids skills to stay safe in relationships, prevent abuse", author="Terry DeMio, Cincinnati Enquirer", source="The Enquirer", summary=" Beyond the Bruises is a three-part Enquirer report on the reality and legacy of domestic violence . An analysis of Hamilton County court dockets in April 2020 shows about one in four perpetrators and survivors had at least one relative arrested for domestic violence . Across the Cincinnati region and Northern Kentucky, students get lessons that can end domestic violence .", link="https://www.cincinnati.com/in-depth/news/2021/10/28/cincinnati-children-violence-prevention-education-relationship-violence-abuse-students-school-teens/5783780001/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-01T12:30:18.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345945369637558810.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345945369637558810.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Green
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Green");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=5s) => @com.smartnews.article()
C: #[results=[
C:   { id="4345945369637559000"^^com.smartnews:article, title="Domestic violence: Teaching kids skills to stay safe in relationships, prevent abuse", author="Terry DeMio, Cincinnati Enquirer", source="The Enquirer", summary=" Beyond the Bruises is a three-part Enquirer report on the reality and legacy of domestic violence . An analysis of Hamilton County court dockets in April 2020 shows about one in four perpetrators and survivors had at least one relative arrested for domestic violence . Across the Cincinnati region and Northern Kentucky, students get lessons that can end domestic violence .", link="https://www.cincinnati.com/in-depth/news/2021/10/28/cincinnati-children-violence-prevention-education-relationship-violence-abuse-students-school-teens/5783780001/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-01T12:30:18.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345945369637558810.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345945369637558810.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Green")
C: #[results=[
C:   { name="Green", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this song to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: timer(interval=5s) => @com.smartnews.article()
C: #[results=[
C:   { id="4345945369637559000"^^com.smartnews:article, title="Domestic violence: Teaching kids skills to stay safe in relationships, prevent abuse", author="Terry DeMio, Cincinnati Enquirer", source="The Enquirer", summary=" Beyond the Bruises is a three-part Enquirer report on the reality and legacy of domestic violence . An analysis of Hamilton County court dockets in April 2020 shows about one in four perpetrators and survivors had at least one relative arrested for domestic violence . Across the Cincinnati region and Northern Kentucky, students get lessons that can end domestic violence .", link="https://www.cincinnati.com/in-depth/news/2021/10/28/cincinnati-children-violence-prevention-education-relationship-violence-abuse-students-school-teens/5783780001/"^^tt:url, category=["national"^^com.smartnews:category("national")], date=new Date("2021-11-01T12:30:18.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345945369637558810.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345945369637558810.mp3"^^tt:url }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Green")
C: #[results=[
C:   { name="Green", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Green
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="Green", song=id);
====
# recording/f36aa9e59096ee6967166619cf6d46ad
U: How you doing?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "party")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXa2PvUpywmrr"^^org.thingpedia.media-source:playable("Party Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWZd79rJ6a7lp"^^org.thingpedia.media-source:playable("Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX4bSrsRWE9cd"^^org.thingpedia.media-source:playable("Bliss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXbcPC6Vvqudd"^^org.thingpedia.media-source:playable("Night Rain"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX6xOPeSOGone"^^org.thingpedia.media-source:playable("Soft Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY"^^org.thingpedia.media-source:playable("Deep Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX7qK8ma5wgG1"^^org.thingpedia.media-source:playable("Sad Songs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX8Sz1gsYZdwj"^^org.thingpedia.media-source:playable("Classical Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX5xiztvBdlUf"^^org.thingpedia.media-source:playable("Truly Deeply House"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWUAeTOoyNaqm"^^org.thingpedia.media-source:playable("ASMR Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0Aaer4Jzfgm"^^org.thingpedia.media-source:playable("Easy Classical"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:163tK9Wjr9P9DmM0AVK7lm"^^org.thingpedia.media-source:artist("Lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TEekvXTomKt3hdXDZxxeW"^^org.thingpedia.media-source:playable("Ribs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dLLR6qlu5UJ5gk0dKz0h3"^^org.thingpedia.media-source:playable("Royals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Kkt27YmFyIFrcX3QXFi2o"^^org.thingpedia.media-source:playable("Liability"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5VmpLtRycwbA54XsTffKq4"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE9EXi8TYg09hR4xv5PWJ"^^org.thingpedia.media-source:playable("Mood Ring"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rnzvZhe3PA57xKcKLRtJ6"^^org.thingpedia.media-source:playable("Pure Heroine (Extended)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1lDMJQcBCttCroFPkNHtN7"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2B87zXm9bOWvAJdkJBTpzF"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0rmhjUgoVa17LZuS8xWQ3v"^^org.thingpedia.media-source:playable("Pure Heroine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4oCGmYsAQOWt2ACWTpNUU6"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:42Np3r8zXnaKcjLQsQSjyG"^^org.thingpedia.media-source:artist("Blackalicious")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4z5L0qDduw3w1apQ4Qa6KV"^^org.thingpedia.media-source:playable("Alphabet Aerobics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4TlYG3mKosVWfGbb9VfDh3"^^org.thingpedia.media-source:playable("Make You Feel That Way"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2R0MySb9tgrWIv2mttYAYR"^^org.thingpedia.media-source:playable("Deception"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3modItPxv7WPVIuSMLW496"^^org.thingpedia.media-source:playable("Swan Lake"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:68AWTL55AsT0vKUdqM2pIY"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DyXkWHnFMIJSuHfLgNfcc"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1CcWqYQy7DjrPlLvgDnH3k"^^org.thingpedia.media-source:playable("A2G EP"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3p6jhqOzFLzlC50KKv629I"^^org.thingpedia.media-source:playable("Nia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2FtC0jhGk9Bn4O46kbQ5d0"^^org.thingpedia.media-source:playable("Melodica"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2Yj68gAz1cESYUeznaWJfg"^^org.thingpedia.media-source:playable("The Craft"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the weather tomorrow in Palo Alto?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location("palo alto"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "party")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXa2PvUpywmrr"^^org.thingpedia.media-source:playable("Party Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWZd79rJ6a7lp"^^org.thingpedia.media-source:playable("Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX4bSrsRWE9cd"^^org.thingpedia.media-source:playable("Bliss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXbcPC6Vvqudd"^^org.thingpedia.media-source:playable("Night Rain"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX6xOPeSOGone"^^org.thingpedia.media-source:playable("Soft Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY"^^org.thingpedia.media-source:playable("Deep Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX7qK8ma5wgG1"^^org.thingpedia.media-source:playable("Sad Songs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX8Sz1gsYZdwj"^^org.thingpedia.media-source:playable("Classical Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX5xiztvBdlUf"^^org.thingpedia.media-source:playable("Truly Deeply House"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWUAeTOoyNaqm"^^org.thingpedia.media-source:playable("ASMR Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0Aaer4Jzfgm"^^org.thingpedia.media-source:playable("Easy Classical"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:163tK9Wjr9P9DmM0AVK7lm"^^org.thingpedia.media-source:artist("Lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TEekvXTomKt3hdXDZxxeW"^^org.thingpedia.media-source:playable("Ribs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dLLR6qlu5UJ5gk0dKz0h3"^^org.thingpedia.media-source:playable("Royals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Kkt27YmFyIFrcX3QXFi2o"^^org.thingpedia.media-source:playable("Liability"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5VmpLtRycwbA54XsTffKq4"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE9EXi8TYg09hR4xv5PWJ"^^org.thingpedia.media-source:playable("Mood Ring"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rnzvZhe3PA57xKcKLRtJ6"^^org.thingpedia.media-source:playable("Pure Heroine (Extended)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1lDMJQcBCttCroFPkNHtN7"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2B87zXm9bOWvAJdkJBTpzF"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0rmhjUgoVa17LZuS8xWQ3v"^^org.thingpedia.media-source:playable("Pure Heroine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4oCGmYsAQOWt2ACWTpNUU6"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:42Np3r8zXnaKcjLQsQSjyG"^^org.thingpedia.media-source:artist("Blackalicious")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4z5L0qDduw3w1apQ4Qa6KV"^^org.thingpedia.media-source:playable("Alphabet Aerobics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4TlYG3mKosVWfGbb9VfDh3"^^org.thingpedia.media-source:playable("Make You Feel That Way"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2R0MySb9tgrWIv2mttYAYR"^^org.thingpedia.media-source:playable("Deception"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3modItPxv7WPVIuSMLW496"^^org.thingpedia.media-source:playable("Swan Lake"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:68AWTL55AsT0vKUdqM2pIY"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DyXkWHnFMIJSuHfLgNfcc"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1CcWqYQy7DjrPlLvgDnH3k"^^org.thingpedia.media-source:playable("A2G EP"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3p6jhqOzFLzlC50KKv629I"^^org.thingpedia.media-source:playable("Nia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2FtC0jhGk9Bn4O46kbQ5d0"^^org.thingpedia.media-source:playable("Melodica"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2Yj68gAz1cESYUeznaWJfg"^^org.thingpedia.media-source:playable("The Craft"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=1.6mps, humidity=71.8, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow in Palo Alto, California and the temperature will be 68.5 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Play some Beethoven.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("beethoven")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWZd79rJ6a7lp"^^org.thingpedia.media-source:playable("Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX4bSrsRWE9cd"^^org.thingpedia.media-source:playable("Bliss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXbcPC6Vvqudd"^^org.thingpedia.media-source:playable("Night Rain"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX6xOPeSOGone"^^org.thingpedia.media-source:playable("Soft Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY"^^org.thingpedia.media-source:playable("Deep Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX7qK8ma5wgG1"^^org.thingpedia.media-source:playable("Sad Songs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX8Sz1gsYZdwj"^^org.thingpedia.media-source:playable("Classical Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX5xiztvBdlUf"^^org.thingpedia.media-source:playable("Truly Deeply House"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWUAeTOoyNaqm"^^org.thingpedia.media-source:playable("ASMR Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0Aaer4Jzfgm"^^org.thingpedia.media-source:playable("Easy Classical"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:163tK9Wjr9P9DmM0AVK7lm"^^org.thingpedia.media-source:artist("Lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TEekvXTomKt3hdXDZxxeW"^^org.thingpedia.media-source:playable("Ribs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dLLR6qlu5UJ5gk0dKz0h3"^^org.thingpedia.media-source:playable("Royals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Kkt27YmFyIFrcX3QXFi2o"^^org.thingpedia.media-source:playable("Liability"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5VmpLtRycwbA54XsTffKq4"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE9EXi8TYg09hR4xv5PWJ"^^org.thingpedia.media-source:playable("Mood Ring"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rnzvZhe3PA57xKcKLRtJ6"^^org.thingpedia.media-source:playable("Pure Heroine (Extended)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1lDMJQcBCttCroFPkNHtN7"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2B87zXm9bOWvAJdkJBTpzF"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0rmhjUgoVa17LZuS8xWQ3v"^^org.thingpedia.media-source:playable("Pure Heroine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4oCGmYsAQOWt2ACWTpNUU6"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:42Np3r8zXnaKcjLQsQSjyG"^^org.thingpedia.media-source:artist("Blackalicious")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4z5L0qDduw3w1apQ4Qa6KV"^^org.thingpedia.media-source:playable("Alphabet Aerobics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4TlYG3mKosVWfGbb9VfDh3"^^org.thingpedia.media-source:playable("Make You Feel That Way"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2R0MySb9tgrWIv2mttYAYR"^^org.thingpedia.media-source:playable("Deception"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3modItPxv7WPVIuSMLW496"^^org.thingpedia.media-source:playable("Swan Lake"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:68AWTL55AsT0vKUdqM2pIY"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DyXkWHnFMIJSuHfLgNfcc"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1CcWqYQy7DjrPlLvgDnH3k"^^org.thingpedia.media-source:playable("A2G EP"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3p6jhqOzFLzlC50KKv629I"^^org.thingpedia.media-source:playable("Nia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2FtC0jhGk9Bn4O46kbQ5d0"^^org.thingpedia.media-source:playable("Melodica"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2Yj68gAz1cESYUeznaWJfg"^^org.thingpedia.media-source:playable("The Craft"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=1.6mps, humidity=71.8, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Ludwig van Beethoven on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Create a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:163tK9Wjr9P9DmM0AVK7lm"^^org.thingpedia.media-source:artist("Lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TEekvXTomKt3hdXDZxxeW"^^org.thingpedia.media-source:playable("Ribs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dLLR6qlu5UJ5gk0dKz0h3"^^org.thingpedia.media-source:playable("Royals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Kkt27YmFyIFrcX3QXFi2o"^^org.thingpedia.media-source:playable("Liability"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5VmpLtRycwbA54XsTffKq4"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE9EXi8TYg09hR4xv5PWJ"^^org.thingpedia.media-source:playable("Mood Ring"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rnzvZhe3PA57xKcKLRtJ6"^^org.thingpedia.media-source:playable("Pure Heroine (Extended)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1lDMJQcBCttCroFPkNHtN7"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2B87zXm9bOWvAJdkJBTpzF"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0rmhjUgoVa17LZuS8xWQ3v"^^org.thingpedia.media-source:playable("Pure Heroine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4oCGmYsAQOWt2ACWTpNUU6"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:42Np3r8zXnaKcjLQsQSjyG"^^org.thingpedia.media-source:artist("Blackalicious")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4z5L0qDduw3w1apQ4Qa6KV"^^org.thingpedia.media-source:playable("Alphabet Aerobics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4TlYG3mKosVWfGbb9VfDh3"^^org.thingpedia.media-source:playable("Make You Feel That Way"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2R0MySb9tgrWIv2mttYAYR"^^org.thingpedia.media-source:playable("Deception"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3modItPxv7WPVIuSMLW496"^^org.thingpedia.media-source:playable("Swan Lake"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:68AWTL55AsT0vKUdqM2pIY"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DyXkWHnFMIJSuHfLgNfcc"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1CcWqYQy7DjrPlLvgDnH3k"^^org.thingpedia.media-source:playable("A2G EP"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3p6jhqOzFLzlC50KKv629I"^^org.thingpedia.media-source:playable("Nia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2FtC0jhGk9Bn4O46kbQ5d0"^^org.thingpedia.media-source:playable("Melodica"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2Yj68gAz1cESYUeznaWJfg"^^org.thingpedia.media-source:playable("The Craft"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=1.6mps, humidity=71.8, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Night time.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Night time.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:163tK9Wjr9P9DmM0AVK7lm"^^org.thingpedia.media-source:artist("Lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TEekvXTomKt3hdXDZxxeW"^^org.thingpedia.media-source:playable("Ribs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dLLR6qlu5UJ5gk0dKz0h3"^^org.thingpedia.media-source:playable("Royals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Kkt27YmFyIFrcX3QXFi2o"^^org.thingpedia.media-source:playable("Liability"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5VmpLtRycwbA54XsTffKq4"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE9EXi8TYg09hR4xv5PWJ"^^org.thingpedia.media-source:playable("Mood Ring"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rnzvZhe3PA57xKcKLRtJ6"^^org.thingpedia.media-source:playable("Pure Heroine (Extended)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1lDMJQcBCttCroFPkNHtN7"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2B87zXm9bOWvAJdkJBTpzF"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0rmhjUgoVa17LZuS8xWQ3v"^^org.thingpedia.media-source:playable("Pure Heroine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4oCGmYsAQOWt2ACWTpNUU6"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:42Np3r8zXnaKcjLQsQSjyG"^^org.thingpedia.media-source:artist("Blackalicious")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4z5L0qDduw3w1apQ4Qa6KV"^^org.thingpedia.media-source:playable("Alphabet Aerobics"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4TlYG3mKosVWfGbb9VfDh3"^^org.thingpedia.media-source:playable("Make You Feel That Way"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2R0MySb9tgrWIv2mttYAYR"^^org.thingpedia.media-source:playable("Deception"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3modItPxv7WPVIuSMLW496"^^org.thingpedia.media-source:playable("Swan Lake"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:68AWTL55AsT0vKUdqM2pIY"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0DyXkWHnFMIJSuHfLgNfcc"^^org.thingpedia.media-source:playable("Blazing Arrow"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1CcWqYQy7DjrPlLvgDnH3k"^^org.thingpedia.media-source:playable("A2G EP"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3p6jhqOzFLzlC50KKv629I"^^org.thingpedia.media-source:playable("Nia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2FtC0jhGk9Bn4O46kbQ5d0"^^org.thingpedia.media-source:playable("Melodica"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2Yj68gAz1cESYUeznaWJfg"^^org.thingpedia.media-source:playable("The Craft"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=20.3C, wind_speed=1.6mps, humidity=71.8, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-02T07:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2wOqMjp9TyABvtHdOSOTUS"^^org.thingpedia.media-source:artist("Ludwig van Beethoven")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3DNRdudZ2SstnDCVKFdXxG"^^org.thingpedia.media-source:playable("Sonata No. 14 \"Moonlight\" in C-Sharp Minor\", Op. 27 No. 2: I. Adagio sostenuto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0H2VhGUC3P3hvwz8rdGIpC"^^org.thingpedia.media-source:playable("Bagatelle No. 25 in A Minor, \"Für Elise\", WoO 59"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cUCckpdlqHJ5Ascf2uH2A"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67: I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7xfSCgVOkQJhVxnqzepATH"^^org.thingpedia.media-source:playable("Moonlight Sonata (First Movement from Piano Sonata No. 14, Op. 27 No. 2)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2KkURGZ4L6KZBorlRKZXbt"^^org.thingpedia.media-source:playable("Symphony No. 5 in C Minor, Op. 67 \"Fate\": I. Allegro con brio"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:70eXtgZvAMTitGL5DYTC2u"^^org.thingpedia.media-source:playable("Beethoven - Dim Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6eS6EGRtwrsMjZTMGOXyAv"^^org.thingpedia.media-source:playable("The Imagination of Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:485wpwF6BiJNTIXHug7zdG"^^org.thingpedia.media-source:playable("Landscapes: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:58s9bXoLVzcG50kSOL5SYD"^^org.thingpedia.media-source:playable("Classical Moods: Beethoven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6U4RcrudZ6dSAgBsEQDOnP"^^org.thingpedia.media-source:playable("Beethoven: Symphonies Nos. 3 & 7, Opp. 55 & 92"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Night time.")
C: #[results=[
C:   { name="Night time.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this song to playlist night time.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="night time", song=id);
====
# recording/e591bc094fc83be681cd48274a4da9a3
U: Play.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play radio station KQED.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.tunein.station() filter id =~ "kqed" => @com.tunein.radio_play(id=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5QO79kh1waicV47BqGRL3g"^^org.thingpedia.media-source:playable("Save Your Tears"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6kqsNp22xUmUyfsaUt7VpB"^^org.thingpedia.media-source:playable("Center of Gravity"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37y7iDayfwm3WXn5BiAoRk"^^org.thingpedia.media-source:playable("Dark Red"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZaRg5Sf4TKr0YcFRLh7QJ"^^org.thingpedia.media-source:playable("Love Affair"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ACQkIMv6nGYHRpPGyS4BK"^^org.thingpedia.media-source:playable("I Could Fall In Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5lpDAHGne3yWphLa5pio5J"^^org.thingpedia.media-source:playable("Out of Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7vgTNTaEz3CsBZ1N4YQalM"^^org.thingpedia.media-source:playable("Ghost Town"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1FWoak0OgTq1jrYfRKfXsj"^^org.thingpedia.media-source:playable("Loverboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1V6gIisPpYqgFeWbMLI0bA"^^org.thingpedia.media-source:playable("Heart Attack"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: (@com.tunein.station() filter id =~ "kqed")[1] => @com.tunein.radio_play(id=id)
C: #[results=[
C:   { id="station:s34804"^^com.tunein:station("KQED-FM") }
C: ]];
A: I played KQED-FM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: On Saturday morning, send me the news and the weather about San Francisco Dolores Park.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: attimer(time=[new Date(enum saturday)]) => @com.smartnews.article();
UT: attimer(time=[new Date(enum saturday)]) => @org.thingpedia.weather.current(location=new Location("san francisco dolores park"));
====
# recording/83308ccb99a100367c92a70d9667c9f4
U: Play Wiz kid.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wiz kid")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/abaeba8365099a920a8f9666468d4477
U: tell me the news and the weather.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
UT: @org.thingpedia.weather.current();
====
# recording/3ff1c4ba85bdb3ea677980ae6825db38
U: Play the Suzuki piano on Spotify.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "suzuki piano" => @org.thingpedia.media-player.play(playable=id);
====
# recording/78420b1a2a99fd2d49e61ce3efd1b0eb
U: Play my demo playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "demo" => @org.thingpedia.media-player.play(playable=id);
====
# recording/9288263676dc4dab7f6c18f8a373a4fb
U: what's up?
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/bd889901b153c69f80c3686131be90d4
U: Thank you Jeannie.Thank you Jeannie.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/d1f6794763b219c9120cf3f21e194e1f
U: play the song hyperballad
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter id =~ "hyperballad" => @org.thingpedia.media-player.play(playable=id);
====
# recording/055841cc236515f97cbc69768646ff26
U: play Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/c9724ea8bc5617a013e7e59d9f964923
U: Stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hello" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hello")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:62PaSfnXSMyLshYJrlTuL3"^^org.thingpedia.media-source:playable("Hello"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Hello on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this song to my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hello")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:62PaSfnXSMyLshYJrlTuL3"^^org.thingpedia.media-source:playable("Hello"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: 2.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="2.", song=id);
====
# recording/7bc11476afe5614d5c7c47e05a53095c
U: How are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/78a6e724d88350bd75f17274cbac0ac8
U: tell me the news about G20.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article(keyword="g20");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article(keyword="g20")
C: #[results=[
C:   { id="4345846020362475000"^^com.smartnews:article, title="World leaders in Glasgow for ‘last, best hope’ climate summit", source="AFP", summary=" More than 120 world leaders meet in Glasgow on Monday in a \"last, best hope\" to tackle the climate crisis . G20 major economies committed on Sunday to the key goal of limiting global warming to 1.5 degrees Celsius above pre-industrial levels .", link="https://nordot.app/en/827784029833904128"^^tt:url, category=["uncertain"^^com.smartnews:category("uncertain")], date=new Date("2021-11-01T05:58:12.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345846020362474972.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345846020362474972.mp3"^^tt:url, keyword="g20" },
C:   { id="4345753933533159400"^^com.smartnews:article, title="Bolsonaro’s security in press altercation as Brazil leader isolated at G20", author="Gabriel Stargardter", source="Reuters", summary=" Brazilian President Jair Bolsonaro's security detail allegedly used violence against Brazilian reporters . The alleged attacks against Brazilian reporters capped a grim weekend for the far-right president . Videos from G20 events showed him as an isolated figure, who was not part of the photo taken at the Trevi fountain with world leaders .", link="https://www.reuters.com/world/americas/bolsonaros-security-press-altercation-brazil-leader-isolated-g20-2021-10-31/"^^tt:url, category=["south america"^^com.smartnews:category("south america"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-31T23:35:39.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345753933533159595.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345753933533159595.mp3"^^tt:url, keyword="g20" },
C:   { id="4345652972827447300"^^com.smartnews:article, title="Prince Charles warns world leaders to heed ‘despairing voices of young people’ on climate at G20", author="Sally Guyoncourt", source="inews.co.uk", summary=" Prince Charles addressed G20 leaders in Rome by invitation of Italian PM Mario Draghi . He said there was no 'more pressing issue' than the future health of the planet . He added there was an 'overwhelming responsibility to generations yet unborn' to seize the moment and act .", link="https://inews.co.uk/news/prince-charles-warns-world-leaders-heed-despairing-voices-young-people-climate-g20-1277398?ito=smart-news"^^tt:url, category=["uncertain"^^com.smartnews:category("uncertain")], date=new Date("2021-10-31T17:02:29.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345652972827447546.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345652972827447546.mp3"^^tt:url, keyword="g20" },
C:   { id="4345301626639089700"^^com.smartnews:article, title="Democrats plan to pass infrastructure and social spending bills on Tuesday, report says", author="Bevan Hurley", source="The Independent", summary=" The infrastructure bill and the revised $1.75 trillion social spending and climate bill would go to a vote early next week . The bills would provide President Joe Biden with a welcome legislative victory as he meets with world leaders from the G20 in Rome .", link="https://www.independent.co.uk/news/world/americas/us-politics/democrats-infrastructure-bill-tuesday-b1948419.html"^^tt:url, category=["politics policy"^^com.smartnews:category("politics policy"), "politic"^^com.smartnews:category("politic"), "political"^^com.smartnews:category("political"), "policy"^^com.smartnews:category("policy"), "congress"^^com.smartnews:category("congress")], date=new Date("2021-10-30T17:49:50.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345301626639089730.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345301626639089730.mp3"^^tt:url, keyword="g20" },
C:   { id="4345168310258633700"^^com.smartnews:article, title="G20: World leaders agree to historic corporate tax deal", source="BBC News", summary=" G20 leaders agree to tax profits of large businesses at least 15% . Pact was agreed by all the leaders attending the G20 summit in Rome . Climate change and Covid are also on the agenda of the summit .", link="https://www.bbc.co.uk/news/world-59101218"^^tt:url, category=["regulation"^^com.smartnews:category("regulation"), "business"^^com.smartnews:category("business")], date=new Date("2021-10-30T08:30:54.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345168310258633896.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345168310258633896.mp3"^^tt:url, keyword="g20" },
C:   { id="4339837070248775000"^^com.smartnews:article, title="Diplomats in last-ditch effort to bring world leaders to Cop26 table", source="The Guardian", summary=" Alok Sharma, the UK cabinet minister who will preside over the talks, has meetings planned with representatives of China . G20 countries are responsible for about 80% of global emissions .", link="https://www.theguardian.com/environment/2021/oct/15/diplomats-in-last-ditch-effort-to-bring-world-leaders-to-cop26-table"^^tt:url, category=["environment"^^com.smartnews:category("environment")], date=new Date("2021-10-15T16:01:25.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211016/voice/headline_4339837070248774927.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211016/voice/summary_4339837070248774927.mp3"^^tt:url, keyword="g20" },
C:   { id="4339450762951143000"^^com.smartnews:article, title="Biden to meet with pope, push for global minimum tax at G20 in Rome", author="Jeff Mason", source="Reuters", summary=" President Joe Biden will meet with Pope Francis on Oct. 29 before attending a two-day summit of G20 leaders in Rome . On the second foreign trip of his presidency, Biden will then attend the U.N. climate conference known as COP26 in Glasgow, Scotland . Biden's visit with the pope comes as some Roman Catholic bishops in the United States have sought to admonish Biden for his support of abortion rights .", link="https://www.reuters.com/world/us/biden-meet-with-pope-push-global-minimum-tax-g20-rome-official-2021-10-14/"^^tt:url, category=["world"^^com.smartnews:category("world"), "mediterranean"^^com.smartnews:category("mediterranean")], date=new Date("2021-10-14T14:08:09.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211015/voice/headline_4339450762951143055.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211015/voice/summary_4339450762951143055.mp3"^^tt:url, keyword="g20" },
C:   { id="4338971078098422300"^^com.smartnews:article, title="Rishi Sunak US visit: Brexit Britain is BACK! UK leads G7 on major trip to states", author="Francesca Edwards", source="Express Online", summary=" The Chancellor will urge G20 Finance Ministers to work together to solve the issues . The UK continues to struggle with a shortage of HGV drivers which impacts supermarket and fuel deliveries .", link="https://www.express.co.uk/news/uk/1505098/rishi-sunak-us-visit-live-brexit-britain-back-UK-leads-G7-trip-to-united-states-updates-1505098"^^tt:url, category=["world"^^com.smartnews:category("world"), "uk ireland"^^com.smartnews:category("uk ireland"), "uk"^^com.smartnews:category("uk"), "northern ireland"^^com.smartnews:category("northern ireland")], date=new Date("2021-10-13T06:31:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211013/voice/headline_4338971078098422174.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211013/voice/summary_4338971078098422174.mp3"^^tt:url, keyword="g20" },
C:   { id="4338298606978078000"^^com.smartnews:article, title="COP26, G20 prospects dimmer without China’s Xi Jinping in the room", author="Finbarr Bermingham and Mark Magnier", source="South China Morning Post", summary=" Chinese President Xi Jinping is not expected to attend the G20 Summit in Rome in person . Chinese diplomats have reportedly informed G20 nations that Xi will not attend the Rome summit in person, citing China's tough Covid-19 quarantine rules . That means Xi will also probably miss the Glasgow talks .", link="https://www.scmp.com/news/china/diplomacy/article/3151854/cop26-g20-prospects-dimmer-without-chinas-xi-jinping-room"^^tt:url, category=["east asia"^^com.smartnews:category("east asia"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-11T10:00:12.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211011/voice/headline_4338298606978078094.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211011/voice/summary_4338298606978078094.mp3"^^tt:url, keyword="g20" },
C:   { id="4336660844755557400"^^com.smartnews:article, title="Turkey ratifies Paris climate agreement; last G20 country to do so", author="Ali Kucukgocmen", source="Reuters", summary=" Turkey's parliament ratified the Paris climate agreement on Wednesday . It is the last G20 country to do so, after holding off for years due to injustices in its responsibilities as part of the agreement . Turkey has been a signatory to the agreement since April 2016 .", link="https://www.reuters.com/business/environment/turkey-ratifies-paris-climate-agreement-last-g20-country-do-so-2021-10-06/"^^tt:url, category=["middle east"^^com.smartnews:category("middle east"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-06T20:44:16.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/headline_4336660844755557457.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/summary_4336660844755557457.mp3"^^tt:url, keyword="g20" }
C: ]];
A: Here is the news.
A: World leaders in Glasgow for ‘last, best hope’ climate summit.  More than 120 world leaders meet in Glasgow on Monday in a "last, best hope" to tackle the climate crisis . G20 major economies committed on Sunday to the key goal of limiting global warming to 1.5 degrees Celsius above pre-industrial levels ..
A: Bolsonaro’s security in press altercation as Brazil leader isolated at G20.  Brazilian President Jair Bolsonaro's security detail allegedly used violence against Brazilian reporters . The alleged attacks against Brazilian reporters capped a grim weekend for the far-right president . Videos from G20 events showed him as an isolated figure, who was not part of the photo taken at the Trevi fountain with world leaders ..
A: Prince Charles warns world leaders to heed ‘despairing voices of young people’ on climate at G20.  Prince Charles addressed G20 leaders in Rome by invitation of Italian PM Mario Draghi . He said there was no 'more pressing issue' than the future health of the planet . He added there was an 'overwhelming responsibility to generations yet unborn' to seize the moment and act ..
A: Democrats plan to pass infrastructure and social spending bills on Tuesday, report says.  The infrastructure bill and the revised $1.75 trillion social spending and climate bill would go to a vote early next week . The bills would provide President Joe Biden with a welcome legislative victory as he meets with world leaders from the G20 in Rome ..
A: G20: World leaders agree to historic corporate tax deal.  G20 leaders agree to tax profits of large businesses at least 15% . Pact was agreed by all the leaders attending the G20 summit in Rome . Climate change and Covid are also on the agenda of the summit ..
A: Diplomats in last-ditch effort to bring world leaders to Cop26 table.  Alok Sharma, the UK cabinet minister who will preside over the talks, has meetings planned with representatives of China . G20 countries are responsible for about 80% of global emissions ..
A: Biden to meet with pope, push for global minimum tax at G20 in Rome.  President Joe Biden will meet with Pope Francis on Oct. 29 before attending a two-day summit of G20 leaders in Rome . On the second foreign trip of his presidency, Biden will then attend the U.N. climate conference known as COP26 in Glasgow, Scotland . Biden's visit with the pope comes as some Roman Catholic bishops in the United States have sought to admonish Biden for his support of abortion rights ..
A: Rishi Sunak US visit: Brexit Britain is BACK! UK leads G7 on major trip to states.  The Chancellor will urge G20 Finance Ministers to work together to solve the issues . The UK continues to struggle with a shortage of HGV drivers which impacts supermarket and fuel deliveries ..
A: COP26, G20 prospects dimmer without China’s Xi Jinping in the room.  Chinese President Xi Jinping is not expected to attend the G20 Summit in Rome in person . Chinese diplomats have reportedly informed G20 nations that Xi will not attend the Rome summit in person, citing China's tough Covid-19 quarantine rules . That means Xi will also probably miss the Glasgow talks ..
A: Turkey ratifies Paris climate agreement; last G20 country to do so.  Turkey's parliament ratified the Paris climate agreement on Wednesday . It is the last G20 country to do so, after holding off for years due to injustices in its responsibilities as part of the agreement . Turkey has been a signatory to the agreement since April 2016 ..
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_many;
U: Find a restaurant in Glasgow.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("glasgow");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article(keyword="g20")
C: #[results=[
C:   { id="4345846020362475000"^^com.smartnews:article, title="World leaders in Glasgow for ‘last, best hope’ climate summit", source="AFP", summary=" More than 120 world leaders meet in Glasgow on Monday in a \"last, best hope\" to tackle the climate crisis . G20 major economies committed on Sunday to the key goal of limiting global warming to 1.5 degrees Celsius above pre-industrial levels .", link="https://nordot.app/en/827784029833904128"^^tt:url, category=["uncertain"^^com.smartnews:category("uncertain")], date=new Date("2021-11-01T05:58:12.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345846020362474972.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345846020362474972.mp3"^^tt:url, keyword="g20" },
C:   { id="4345753933533159400"^^com.smartnews:article, title="Bolsonaro’s security in press altercation as Brazil leader isolated at G20", author="Gabriel Stargardter", source="Reuters", summary=" Brazilian President Jair Bolsonaro's security detail allegedly used violence against Brazilian reporters . The alleged attacks against Brazilian reporters capped a grim weekend for the far-right president . Videos from G20 events showed him as an isolated figure, who was not part of the photo taken at the Trevi fountain with world leaders .", link="https://www.reuters.com/world/americas/bolsonaros-security-press-altercation-brazil-leader-isolated-g20-2021-10-31/"^^tt:url, category=["south america"^^com.smartnews:category("south america"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-31T23:35:39.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345753933533159595.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345753933533159595.mp3"^^tt:url, keyword="g20" },
C:   { id="4345652972827447300"^^com.smartnews:article, title="Prince Charles warns world leaders to heed ‘despairing voices of young people’ on climate at G20", author="Sally Guyoncourt", source="inews.co.uk", summary=" Prince Charles addressed G20 leaders in Rome by invitation of Italian PM Mario Draghi . He said there was no 'more pressing issue' than the future health of the planet . He added there was an 'overwhelming responsibility to generations yet unborn' to seize the moment and act .", link="https://inews.co.uk/news/prince-charles-warns-world-leaders-heed-despairing-voices-young-people-climate-g20-1277398?ito=smart-news"^^tt:url, category=["uncertain"^^com.smartnews:category("uncertain")], date=new Date("2021-10-31T17:02:29.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345652972827447546.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345652972827447546.mp3"^^tt:url, keyword="g20" },
C:   { id="4345301626639089700"^^com.smartnews:article, title="Democrats plan to pass infrastructure and social spending bills on Tuesday, report says", author="Bevan Hurley", source="The Independent", summary=" The infrastructure bill and the revised $1.75 trillion social spending and climate bill would go to a vote early next week . The bills would provide President Joe Biden with a welcome legislative victory as he meets with world leaders from the G20 in Rome .", link="https://www.independent.co.uk/news/world/americas/us-politics/democrats-infrastructure-bill-tuesday-b1948419.html"^^tt:url, category=["politics policy"^^com.smartnews:category("politics policy"), "politic"^^com.smartnews:category("politic"), "political"^^com.smartnews:category("political"), "policy"^^com.smartnews:category("policy"), "congress"^^com.smartnews:category("congress")], date=new Date("2021-10-30T17:49:50.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345301626639089730.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345301626639089730.mp3"^^tt:url, keyword="g20" },
C:   { id="4345168310258633700"^^com.smartnews:article, title="G20: World leaders agree to historic corporate tax deal", source="BBC News", summary=" G20 leaders agree to tax profits of large businesses at least 15% . Pact was agreed by all the leaders attending the G20 summit in Rome . Climate change and Covid are also on the agenda of the summit .", link="https://www.bbc.co.uk/news/world-59101218"^^tt:url, category=["regulation"^^com.smartnews:category("regulation"), "business"^^com.smartnews:category("business")], date=new Date("2021-10-30T08:30:54.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345168310258633896.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345168310258633896.mp3"^^tt:url, keyword="g20" },
C:   { id="4339837070248775000"^^com.smartnews:article, title="Diplomats in last-ditch effort to bring world leaders to Cop26 table", source="The Guardian", summary=" Alok Sharma, the UK cabinet minister who will preside over the talks, has meetings planned with representatives of China . G20 countries are responsible for about 80% of global emissions .", link="https://www.theguardian.com/environment/2021/oct/15/diplomats-in-last-ditch-effort-to-bring-world-leaders-to-cop26-table"^^tt:url, category=["environment"^^com.smartnews:category("environment")], date=new Date("2021-10-15T16:01:25.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211016/voice/headline_4339837070248774927.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211016/voice/summary_4339837070248774927.mp3"^^tt:url, keyword="g20" },
C:   { id="4339450762951143000"^^com.smartnews:article, title="Biden to meet with pope, push for global minimum tax at G20 in Rome", author="Jeff Mason", source="Reuters", summary=" President Joe Biden will meet with Pope Francis on Oct. 29 before attending a two-day summit of G20 leaders in Rome . On the second foreign trip of his presidency, Biden will then attend the U.N. climate conference known as COP26 in Glasgow, Scotland . Biden's visit with the pope comes as some Roman Catholic bishops in the United States have sought to admonish Biden for his support of abortion rights .", link="https://www.reuters.com/world/us/biden-meet-with-pope-push-global-minimum-tax-g20-rome-official-2021-10-14/"^^tt:url, category=["world"^^com.smartnews:category("world"), "mediterranean"^^com.smartnews:category("mediterranean")], date=new Date("2021-10-14T14:08:09.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211015/voice/headline_4339450762951143055.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211015/voice/summary_4339450762951143055.mp3"^^tt:url, keyword="g20" },
C:   { id="4338971078098422300"^^com.smartnews:article, title="Rishi Sunak US visit: Brexit Britain is BACK! UK leads G7 on major trip to states", author="Francesca Edwards", source="Express Online", summary=" The Chancellor will urge G20 Finance Ministers to work together to solve the issues . The UK continues to struggle with a shortage of HGV drivers which impacts supermarket and fuel deliveries .", link="https://www.express.co.uk/news/uk/1505098/rishi-sunak-us-visit-live-brexit-britain-back-UK-leads-G7-trip-to-united-states-updates-1505098"^^tt:url, category=["world"^^com.smartnews:category("world"), "uk ireland"^^com.smartnews:category("uk ireland"), "uk"^^com.smartnews:category("uk"), "northern ireland"^^com.smartnews:category("northern ireland")], date=new Date("2021-10-13T06:31:00.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211013/voice/headline_4338971078098422174.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211013/voice/summary_4338971078098422174.mp3"^^tt:url, keyword="g20" },
C:   { id="4338298606978078000"^^com.smartnews:article, title="COP26, G20 prospects dimmer without China’s Xi Jinping in the room", author="Finbarr Bermingham and Mark Magnier", source="South China Morning Post", summary=" Chinese President Xi Jinping is not expected to attend the G20 Summit in Rome in person . Chinese diplomats have reportedly informed G20 nations that Xi will not attend the Rome summit in person, citing China's tough Covid-19 quarantine rules . That means Xi will also probably miss the Glasgow talks .", link="https://www.scmp.com/news/china/diplomacy/article/3151854/cop26-g20-prospects-dimmer-without-chinas-xi-jinping-room"^^tt:url, category=["east asia"^^com.smartnews:category("east asia"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-11T10:00:12.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211011/voice/headline_4338298606978078094.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211011/voice/summary_4338298606978078094.mp3"^^tt:url, keyword="g20" },
C:   { id="4336660844755557400"^^com.smartnews:article, title="Turkey ratifies Paris climate agreement; last G20 country to do so", author="Ali Kucukgocmen", source="Reuters", summary=" Turkey's parliament ratified the Paris climate agreement on Wednesday . It is the last G20 country to do so, after holding off for years due to injustices in its responsibilities as part of the agreement . Turkey has been a signatory to the agreement since April 2016 .", link="https://www.reuters.com/business/environment/turkey-ratifies-paris-climate-agreement-last-g20-country-do-so-2021-10-06/"^^tt:url, category=["middle east"^^com.smartnews:category("middle east"), "world"^^com.smartnews:category("world")], date=new Date("2021-10-06T20:44:16.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/headline_4336660844755557457.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211007/voice/summary_4336660844755557457.mp3"^^tt:url, keyword="g20" }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(55.8609825, -4.2488787, "Glasgow")
C: #[results=[
C:   { id="pnSROB18JmOIOi3Nmaih5w"^^com.yelp:restaurant("The Butterfly and the Pig"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/zUbM23Kn8WTaO4etwtF1eg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/the-butterfly-and-the-pig-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["scottish"^^com.yelp:restaurant_cuisine("Scottish")], price=enum moderate, rating=4.5, review_count=216, geo=new Location(55.8641959729238, -4.26093339920044, "153 Bath Street, Glasgow G2 4SQ, United Kingdom"), phone="+441412217711"^^tt:phone_number },
C:   { id="UrnzTa6T3sLSVbbXLiYvQA"^^com.yelp:restaurant("Paesano Pizza"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/zqpGw7a4haGfUTLZ3E0UaQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/paesano-pizza-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4.5, review_count=135, geo=new Location(55.8596504377382, -4.25060488821112, "94 Miller Street, Glasgow G1 1DT, United Kingdom"), phone="+441412585565"^^tt:phone_number },
C:   { id="9I0QM3wBHiMzX2AvL3OQeg"^^com.yelp:restaurant("The Wilson Street Pantry"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/uvPOukZ4OLAybNHEh2slTA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/the-wilson-street-pantry-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cafes"^^com.yelp:restaurant_cuisine("Cafes"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum cheap, rating=4.5, review_count=79, geo=new Location(55.8585085104567, -4.24597920711201, "6 Wilson Street, Glasgow G1 1SS, United Kingdom"), phone="+441415520606"^^tt:phone_number },
C:   { id="3iUvNCibzS22lKUsGcalWA"^^com.yelp:restaurant("Bread Meats Bread"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/EpaNQc1B8zbQGEDqE2ThXQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/bread-meats-bread-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["burgers"^^com.yelp:restaurant_cuisine("Burgers"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches"), "tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)")], price=enum moderate, rating=4, review_count=162, geo=new Location(55.8615643555828, -4.25636139361086, "104 St Vincent Street, Glasgow G2 5UB, United Kingdom"), phone="+441412499898"^^tt:phone_number },
C:   { id="JNpi062fXUtd3lmGUSu-ww"^^com.yelp:restaurant("Café Gandolfi"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/72pubIn2_iLrDyZ4dZ_ytQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/caf%C3%A9-gandolfi-glasgow-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["seafood"^^com.yelp:restaurant_cuisine("Seafood"), "british"^^com.yelp:restaurant_cuisine("British")], price=enum moderate, rating=4.5, review_count=65, geo=new Location(55.8580469, -4.2442038, "64 Albion Street, Glasgow G1 1NY, United Kingdom"), phone="+441415526813"^^tt:phone_number },
C:   { id="GTT-5qfEfyHWpCvUoj4MJw"^^com.yelp:restaurant("Stereo"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/KgFN59rNV383JhWOZQRZWA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/stereo-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cafes"^^com.yelp:restaurant_cuisine("Cafes")], price=enum cheap, rating=4.5, review_count=99, geo=new Location(55.8611071817399, -4.25799909979105, "20 Renfield Lane, City Centre, Glasgow G2 6PH, United Kingdom"), phone="+441412222254"^^tt:phone_number },
C:   { id="v9dLhoA7jCzLiAcZpeLOmA"^^com.yelp:restaurant("Bloc+"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/hV_99Y34NUc1LmBeXOgdeQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/bloc-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["burgers"^^com.yelp:restaurant_cuisine("Burgers"), "pizza"^^com.yelp:restaurant_cuisine("Pizza")], price=enum moderate, rating=4, review_count=90, geo=new Location(55.863971, -4.259456, "117 Bath Street, Glasgow G2 2SZ, United Kingdom"), phone="+441415746066"^^tt:phone_number },
C:   { id="mPrBfiT2cf3jgnKVzoGj-g"^^com.yelp:restaurant("Where The Monkey Sleeps"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/3hK5zg0r2xvnZ9voRmsjgA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/where-the-monkey-sleeps-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum cheap, rating=4.5, review_count=66, geo=new Location(55.863862, -4.2617649, "182 West Regent Street, Glasgow G2 4RU, United Kingdom"), phone="+441412263406"^^tt:phone_number },
C:   { id="ykFuZwPzHrXih4-Y4NAe4Q"^^com.yelp:restaurant("BrewDog DogHouse"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/PD7nfmC5QvlowT5nwbmHFg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/brewdog-doghouse-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["bbq"^^com.yelp:restaurant_cuisine("Barbeque")], price=enum moderate, rating=4.5, review_count=47, geo=new Location(55.8593557, -4.2480296, "99 Hutcheson Street, Glasgow G1 1SN, United Kingdom"), phone="+441415526363"^^tt:phone_number },
C:   { id="4B7sGFSBSDjiZMBrYG6AYg"^^com.yelp:restaurant("Alston Bar & Beef"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/ihFXhbooGHzw8TONzXJBZA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/alston-bar-and-beef-glasgow?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["steak"^^com.yelp:restaurant_cuisine("Steakhouses")], price=enum expensive, rating=4.5, review_count=51, geo=new Location(55.860346113084, -4.25765299458158, "Glasgow Central Station, 79 Gordon Street, Glasgow G1 3PE, United Kingdom"), phone="+441412217627"^^tt:phone_number }
C: ]]
C: #[count=20];
A: I see The Butterfly and the Pig, Paesano Pizza, and The Wilson Street Pantry. The Butterfly and the Pig is rated 4.5 star, Paesano Pizza is rated 4.5 star, and The Wilson Street Pantry is rated 4.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: which restaurant has the most reviews?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(review_count desc of @com.yelp.restaurant() filter geo == new Location(55.8609825, -4.2488787, "Glasgow"))[1];
====
# recording/3a7330d963969ce8abd5592e160d4a20
U: play some party music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "party") => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played party music recordings on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some party music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played party music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Make a new playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: Party.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.")
C: #[results=[
C:   { name="Party.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Add this song to playlist party.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="party", song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.")
C: #[results=[
C:   { name="Party.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="party", song=id)
C: #[results=[
C:   { playlist="party", song="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:song("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added a song to a playlist.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.")
C: #[results=[
C:   { name="Party.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="party", song=id)
C: #[results=[
C:   { playlist="party", song="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:song("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play playlist party.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "party" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.")
C: #[results=[
C:   { name="Party.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="party", song=id)
C: #[results=[
C:   { playlist="party", song="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:song("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "party")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXa2PvUpywmrr"^^org.thingpedia.media-source:playable("Party Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Party Hits on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play my playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "party") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:playable("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7toIqSTfa9Phsmu2hKwTyx"^^org.thingpedia.media-source:playable("Slippery Fish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5p5R0lCAfSQ8dXIHiCJxfF"^^org.thingpedia.media-source:playable("Light"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5LSwDFDfLqpUgJtQPITfr3"^^org.thingpedia.media-source:playable("Add a Little Fancy (Fancy Nancy Main Title)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6MDIYpxszXLSjzXSttR83O"^^org.thingpedia.media-source:playable("Cleanup Song"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.")
C: #[results=[
C:   { name="Party.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="party", song=id)
C: #[results=[
C:   { playlist="party", song="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:song("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "party")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXa2PvUpywmrr"^^org.thingpedia.media-source:playable("Party Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWZd79rJ6a7lp"^^org.thingpedia.media-source:playable("Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX4bSrsRWE9cd"^^org.thingpedia.media-source:playable("Bliss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXbcPC6Vvqudd"^^org.thingpedia.media-source:playable("Night Rain"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX6xOPeSOGone"^^org.thingpedia.media-source:playable("Soft Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY"^^org.thingpedia.media-source:playable("Deep Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX7qK8ma5wgG1"^^org.thingpedia.media-source:playable("Sad Songs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX8Sz1gsYZdwj"^^org.thingpedia.media-source:playable("Classical Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX5xiztvBdlUf"^^org.thingpedia.media-source:playable("Truly Deeply House"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWUAeTOoyNaqm"^^org.thingpedia.media-source:playable("ASMR Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0Aaer4Jzfgm"^^org.thingpedia.media-source:playable("Easy Classical"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played playlist on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Lorde.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="Party.")
C: #[results=[
C:   { name="Party.", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="party", song=id)
C: #[results=[
C:   { playlist="party", song="spotify:track:07Tx168RSsUS1HqkDIOZbH"^^org.thingpedia.media-source:song("Cupid Shuffle"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "party")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXa2PvUpywmrr"^^org.thingpedia.media-source:playable("Party Hits"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWZd79rJ6a7lp"^^org.thingpedia.media-source:playable("Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX4bSrsRWE9cd"^^org.thingpedia.media-source:playable("Bliss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DXbcPC6Vvqudd"^^org.thingpedia.media-source:playable("Night Rain"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX6xOPeSOGone"^^org.thingpedia.media-source:playable("Soft Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY"^^org.thingpedia.media-source:playable("Deep Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX7qK8ma5wgG1"^^org.thingpedia.media-source:playable("Sad Songs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX8Sz1gsYZdwj"^^org.thingpedia.media-source:playable("Classical Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX5xiztvBdlUf"^^org.thingpedia.media-source:playable("Truly Deeply House"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DWUAeTOoyNaqm"^^org.thingpedia.media-source:playable("ASMR Sleep"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:37i9dQZF1DX0Aaer4Jzfgm"^^org.thingpedia.media-source:playable("Easy Classical"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:163tK9Wjr9P9DmM0AVK7lm"^^org.thingpedia.media-source:artist("Lorde")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0TEekvXTomKt3hdXDZxxeW"^^org.thingpedia.media-source:playable("Ribs"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dLLR6qlu5UJ5gk0dKz0h3"^^org.thingpedia.media-source:playable("Royals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6Kkt27YmFyIFrcX3QXFi2o"^^org.thingpedia.media-source:playable("Liability"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5VmpLtRycwbA54XsTffKq4"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE9EXi8TYg09hR4xv5PWJ"^^org.thingpedia.media-source:playable("Mood Ring"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rnzvZhe3PA57xKcKLRtJ6"^^org.thingpedia.media-source:playable("Pure Heroine (Extended)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1lDMJQcBCttCroFPkNHtN7"^^org.thingpedia.media-source:playable("Solar Power"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2B87zXm9bOWvAJdkJBTpzF"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0rmhjUgoVa17LZuS8xWQ3v"^^org.thingpedia.media-source:playable("Pure Heroine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4oCGmYsAQOWt2ACWTpNUU6"^^org.thingpedia.media-source:playable("Melodrama"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Lorde on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play Blackalicious.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("blackalicious")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/ca1827e9f8c1b134c62a7a96711f1d2d
U: what's a good Indian restaurant in Campbell, CA?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter contains(cuisines, null^^com.yelp:restaurant_cuisine("indian")) && geo == new Location("campbell , ca");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251")
C: #[results=[
C:   { id="599W_uz1sWXjj13AP-4zGA"^^com.yelp:restaurant("desi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/l8rZpMh0rp2VWcNwFrRYcA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/desi-campbell-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "vegetarian"^^com.yelp:restaurant_cuisine("Vegetarian")], price=enum moderate, rating=3.5, review_count=405, geo=new Location(37.2871364128, -121.941122593, "501 E Campbell Ave, Campbell, CA 95008"), phone="+14084298098"^^tt:phone_number },
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/d3sV55QK_EdEvqPENPGKSg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/royal-taj-campbell?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian")], price=enum moderate, rating=3.5, review_count=369, geo=new Location(37.26957, -121.94486, "1350 Camden Ave, Campbell, CA 95008"), phone="+14085596801"^^tt:phone_number }
C: ]];
A: I see desi and Royal Taj. Both are Indian restaurants rated 3.5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_two;
U: When is royal Taj open today?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [opening_hours] of @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251") && id == null^^com.yelp:restaurant("royal taj");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251")
C: #[results=[
C:   { id="599W_uz1sWXjj13AP-4zGA"^^com.yelp:restaurant("desi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/l8rZpMh0rp2VWcNwFrRYcA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/desi-campbell-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "vegetarian"^^com.yelp:restaurant_cuisine("Vegetarian")], price=enum moderate, rating=3.5, review_count=405, geo=new Location(37.2871364128, -121.941122593, "501 E Campbell Ave, Campbell, CA 95008"), phone="+14084298098"^^tt:phone_number },
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/d3sV55QK_EdEvqPENPGKSg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/royal-taj-campbell?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian")], price=enum moderate, rating=3.5, review_count=369, geo=new Location(37.26957, -121.94486, "1350 Camden Ave, Campbell, CA 95008"), phone="+14085596801"^^tt:phone_number }
C: ]];
C: [opening_hours] of @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251") && id == "mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj")
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum sunday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum sunday }) }
C: ]];
A: Royal Taj opens from 11:30 AM to 3:00 PM Monday to Sunday and from 5:30 PM to 10:00 PM Monday to Sunday.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the phone number?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [phone] of @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251") && id == "mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251")
C: #[results=[
C:   { id="599W_uz1sWXjj13AP-4zGA"^^com.yelp:restaurant("desi"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/l8rZpMh0rp2VWcNwFrRYcA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/desi-campbell-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian"), "vegetarian"^^com.yelp:restaurant_cuisine("Vegetarian")], price=enum moderate, rating=3.5, review_count=405, geo=new Location(37.2871364128, -121.941122593, "501 E Campbell Ave, Campbell, CA 95008"), phone="+14084298098"^^tt:phone_number },
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/d3sV55QK_EdEvqPENPGKSg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/royal-taj-campbell?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["indpak"^^com.yelp:restaurant_cuisine("Indian")], price=enum moderate, rating=3.5, review_count=369, geo=new Location(37.26957, -121.94486, "1350 Camden Ave, Campbell, CA 95008"), phone="+14085596801"^^tt:phone_number }
C: ]];
C: [opening_hours] of @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251") && id == "mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj")
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), opening_hours=new RecurrentTimeSpecification({ beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum monday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum tuesday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum wednesday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum thursday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum friday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum saturday }, { beginTime=new Time(11, 30), endTime=new Time(15, 0), interval=86400000ms, dayOfWeek=enum sunday }, { beginTime=new Time(17, 30), endTime=new Time(22, 0), interval=86400000ms, dayOfWeek=enum sunday }) }
C: ]];
C: [phone] of @com.yelp.restaurant() filter contains(cuisines, "indpak"^^com.yelp:restaurant_cuisine("Indian")) && geo == new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251") && id == "mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj")
C: #[results=[
C:   { id="mqNAABqv9YTavc5LPCOYoQ"^^com.yelp:restaurant("Royal Taj"), phone="+14085596801"^^tt:phone_number }
C: ]];
A: Royal Taj has phone number (408) 5596801.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: What's the weather there this weekend?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.2904597, -121.9364605, "CA 17, Campbell, CA 951251"));
====
# recording/b30ff2570c2440da534ef4d4132b2a87
U: Play Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4tZwfgrHOc3mvqYlEYSvVi"^^org.thingpedia.media-source:artist("Daft Punk")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Foc5Q5nqNiosCNqttzHof"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers) - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DiWol3AO6WpXZgp0goxAV"^^org.thingpedia.media-source:playable("One More Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:69kOkLUCkxIZYexIgSG8rq"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1pKYYY0dkg23sQQXi0Q5zN"^^org.thingpedia.media-source:playable("Around the World"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5W3cjX2J3tjhG8zb6u0qHn"^^org.thingpedia.media-source:playable("Harder, Better, Faster, Stronger"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2noRn2Aes5aoNVsU6iWThc"^^org.thingpedia.media-source:playable("Discovery"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4m2880jivSbbyEGAKfITCa"^^org.thingpedia.media-source:playable("Random Access Memories"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5uRdvUR7xCnHmUW8n64n9y"^^org.thingpedia.media-source:playable("Homework"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2ePFIvZKMe8zefATp9ofFA"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers) [Radio Edit]"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3AMXFnwHWXCvNr5NCCpLZI"^^org.thingpedia.media-source:playable("TRON: Legacy - The Complete Edition (Original Motion Picture Soundtrack)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Daft Punk on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: How are you doing?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
====
# recording/f61f47466e6258530f12e1b38e76715e
U: Add this to a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(date desc of @com.smartnews.article(keyword="g20"))[1]
C: #[results=[
C:   { id="4345846020362475000"^^com.smartnews:article, title="World leaders in Glasgow for ‘last, best hope’ climate summit", source="AFP", summary=" More than 120 world leaders meet in Glasgow on Monday in a \"last, best hope\" to tackle the climate crisis . G20 major economies committed on Sunday to the key goal of limiting global warming to 1.5 degrees Celsius above pre-industrial levels .", link="https://nordot.app/en/827784029833904128"^^tt:url, category=["uncertain"^^com.smartnews:category("uncertain")], date=new Date("2021-11-01T05:58:12.000Z"), headline_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/headline_4345846020362474972.mp3"^^tt:url, summary_audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/211101/voice/summary_4345846020362474972.mp3"^^tt:url, keyword="g20" }
C: ]];
C: sort(date desc of @com.smartnews.article(keyword="gut biome"))[1]
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2elBjNSdBE2Y3f0j1mjrql"^^org.thingpedia.media-source:artist("Jay Chou")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1ivCIgrYZyE0BvItL4Z8lk"^^org.thingpedia.media-source:playable("告白氣球"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0F02KChKwbcQ3tk4q1YxLH"^^org.thingpedia.media-source:playable("晴天"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:56wVfJKtnwlSZtC4NVgIrf"^^org.thingpedia.media-source:playable("說好不哭"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:31RIphTQ9y4zStkH5xRWgW"^^org.thingpedia.media-source:playable("一路向北"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4FOydQ5IdqmdeBgG9vFbPg"^^org.thingpedia.media-source:playable("安靜"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6rRydp9XlVoLfTtA3qpWcn"^^org.thingpedia.media-source:playable("11月的蕭邦"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0xWySBAzp6b37EARWzycQJ"^^org.thingpedia.media-source:playable("范特西"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3CFQKBIkZKTRxU3EvZ1oHY"^^org.thingpedia.media-source:playable("我很忙"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:27I7fCoQRSdL9PT1nFWEPC"^^org.thingpedia.media-source:playable("七里香"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6pmapc89HjY4f16ARzrmBB"^^org.thingpedia.media-source:playable("魔杰座"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="delay")
C: #[results=[
C:   { name="delay", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Silay
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="silay", song=id);
====
# recording/040c5f1c864bb472d7332b17376c2d28
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/48ee8b945555bae1e7546fcc82bd0394
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(20, 5, 14) }
C: ]];
A: Right now, it's 8:05 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me the news.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/502b1ed961924c370db5c398ba94d215
U: Play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this to a playlist.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: Classic.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="Classic.", song=id);
====
# recording/c4f34be67d06ff9a41561cb12ff015e1
U: play Daft Punk.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("daft punk")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4tZwfgrHOc3mvqYlEYSvVi"^^org.thingpedia.media-source:artist("Daft Punk")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Foc5Q5nqNiosCNqttzHof"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers) - Radio Edit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0DiWol3AO6WpXZgp0goxAV"^^org.thingpedia.media-source:playable("One More Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:69kOkLUCkxIZYexIgSG8rq"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1pKYYY0dkg23sQQXi0Q5zN"^^org.thingpedia.media-source:playable("Around the World"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5W3cjX2J3tjhG8zb6u0qHn"^^org.thingpedia.media-source:playable("Harder, Better, Faster, Stronger"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2noRn2Aes5aoNVsU6iWThc"^^org.thingpedia.media-source:playable("Discovery"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4m2880jivSbbyEGAKfITCa"^^org.thingpedia.media-source:playable("Random Access Memories"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5uRdvUR7xCnHmUW8n64n9y"^^org.thingpedia.media-source:playable("Homework"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:2ePFIvZKMe8zefATp9ofFA"^^org.thingpedia.media-source:playable("Get Lucky (feat. Pharrell Williams & Nile Rodgers) [Radio Edit]"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3AMXFnwHWXCvNr5NCCpLZI"^^org.thingpedia.media-source:playable("TRON: Legacy - The Complete Edition (Original Motion Picture Soundtrack)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Daft Punk on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the news?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/8c5cde3338c7e8f41e482c312be48d74
U: play some music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/bdd8435cd0144204bd2a05c8f0af9cf0
U: Set a reminder.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=$?) => @org.thingpedia.builtin.thingengine.builtin.say();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, CA 94114"))
C: #[results=[
C:   { temperature=16.3C, wind_speed=1.6mps, humidity=90.9, cloudiness=53.1, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, CA 94114") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.say(message="neil is awesome")
C: #[results=[
C:   { message_output="neil is awesome", message="neil is awesome" }
C: ]];
C: @com.yelp.restaurant() filter geo == new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, CA 94114")
C: #[results=[
C:   { id="ri7UUYmx21AgSpRsf4-9QA"^^com.yelp:restaurant("Tartine Bakery"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/nPUUXYVVa3CHJh5yzH8Xnw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/tartine-bakery-san-francisco-3?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cafes"^^com.yelp:restaurant_cuisine("Cafes")], price=enum moderate, rating=4, review_count=8181, geo=new Location(37.76131, -122.42431, "600 Guerrero St, San Francisco, CA 94110"), phone="+14154872600"^^tt:phone_number },
C:   { id="KkAVX3Wb7E3lP5F_f_8pXg"^^com.yelp:restaurant("Liholiho Yacht Club"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/DluAA2YbM8k6qRM_mwbiNw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/liholiho-yacht-club-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum expensive, rating=4.5, review_count=2487, geo=new Location(37.7618143, -122.42296790220479, "3560 18th St, San Francisco, CA 94110"), phone="+14155897266"^^tt:phone_number },
C:   { id="SGRmnarrNuVEsAjYdEoA0w"^^com.yelp:restaurant("El Farolito"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/kYemXiMcYje-Da7AjPtWcg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/el-farolito-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican")], price=enum cheap, rating=4, review_count=5065, geo=new Location(37.75265, -122.41812, "2779 Mission St, San Francisco, CA 94110"), phone="+14158247877"^^tt:phone_number },
C:   { id="n6L5VIGunR51-D55C-eYeQ"^^com.yelp:restaurant("Foreign Cinema"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/cw5y2LSOIE-EVNjKK_d7SQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/foreign-cinema-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum expensive, rating=4, review_count=5018, geo=new Location(37.75637, -122.41925, "2534 Mission St, San Francisco, CA 94110"), phone="+14156487600"^^tt:phone_number },
C:   { id="XQLmEdXoMzOpffwoFaBtaQ"^^com.yelp:restaurant("Kitchen Story"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/XIhdtd0fB2P_v_qhh1hWbg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/kitchen-story-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "asianfusion"^^com.yelp:restaurant_cuisine("Asian Fusion"), "newamerican"^^com.yelp:restaurant_cuisine("American (New)")], price=enum moderate, rating=4, review_count=3588, geo=new Location(37.7642352, -122.4306936, "3499 16th St, San Francisco, CA 94114"), phone="+14155254905"^^tt:phone_number },
C:   { id="4KfQnlcSu4bbTqnvGdGptw"^^com.yelp:restaurant("Beretta"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/HKxMJ8q8fzOY76hy7ACIag/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/beretta-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["italian"^^com.yelp:restaurant_cuisine("Italian"), "pizza"^^com.yelp:restaurant_cuisine("Pizza"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=3828, geo=new Location(37.753869, -122.420611, "1199 Valencia St, San Francisco, CA 94110"), phone="+14156951199"^^tt:phone_number },
C:   { id="1hMD7RQogPDWpE-p3LKjXA"^^com.yelp:restaurant("Loló"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/QimJjz8ECFnevPcssJYfTw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/lol%C3%B3-san-francisco-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican"), "tapasmallplates"^^com.yelp:restaurant_cuisine("Tapas/Small Plates")], price=enum moderate, rating=4, review_count=2281, geo=new Location(37.7573462, -122.4214034, "974 Valencia St, San Francisco, CA 94110"), phone="+14156435656"^^tt:phone_number },
C:   { id="ZDvIMjJ-7I0561ckM4pAeA"^^com.yelp:restaurant("Anchor Oyster Bar"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/oKLPo1042ojJJC9OcCzAMw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/anchor-oyster-bar-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4.5, review_count=1552, geo=new Location(37.759689, -122.434609, "579 Castro St, San Francisco, CA 94114"), phone="+14154313990"^^tt:phone_number },
C:   { id="JARsJVKLPgs_yC3cwDnp7g"^^com.yelp:restaurant("La Taqueria"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/7LqVKYVg2GdEFKI2CFL4cA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-taqueria-san-francisco-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["mexican"^^com.yelp:restaurant_cuisine("Mexican")], price=enum moderate, rating=4, review_count=4250, geo=new Location(37.75088, -122.41805, "2889 Mission St, San Francisco, CA 94110"), phone="+14152857117"^^tt:phone_number },
C:   { id="CYttYTEiQuhSfo3SEh79fA"^^com.yelp:restaurant("Shizen Vegan Sushi Bar & Izakaya"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/-1BWnyjrsDmTmXH_3wZl_w/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shizen-vegan-sushi-bar-and-izakaya-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["sushi"^^com.yelp:restaurant_cuisine("Sushi Bars"), "vegan"^^com.yelp:restaurant_cuisine("Vegan"), "izakaya"^^com.yelp:restaurant_cuisine("Izakaya")], price=enum moderate, rating=4.5, review_count=1801, geo=new Location(37.768326, -122.421682, "370 14th St, San Francisco, CA 94103"), phone="+14156785767"^^tt:phone_number }
C: ]]
C: #[count=19];
C: [geo] of @com.yelp.restaurant() filter geo == new Location(37.7597203, -122.4271322952394, "Mission Dolores Park, San Francisco, CA 94114") && id == "ri7UUYmx21AgSpRsf4-9QA"^^com.yelp:restaurant("Tartine Bakery")
C: #[results=[
C:   { id="ri7UUYmx21AgSpRsf4-9QA"^^com.yelp:restaurant("Tartine Bakery"), geo=new Location(37.76131, -122.42431, "600 Guerrero St, San Francisco, CA 94110") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.76131, -122.42431, "600 Guerrero St, San Francisco, CA 94110"))
C: #[results=[
C:   { temperature=15.8C, wind_speed=1.6mps, humidity=92.9, cloudiness=40.6, fog=1.6, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-11-03T07:00:00.000Z"), location=new Location(37.76131, -122.42431, "600 Guerrero St, San Francisco, CA 94110") }
C: ]];
C: ontimer(date=$?) => @org.thingpedia.builtin.thingengine.builtin.say();
A: What would you like me to say?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(message);
AT: ontimer(date=$?) => @org.thingpedia.builtin.thingengine.builtin.say();
U: Hello.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=$?) => @org.thingpedia.builtin.thingengine.builtin.say(message="Hello.");
====
# recording/7088d90694e33b16e415b54db5b86773
U: Cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5f5588b7bf39ea4fe27e94e63b2c5a7a
U: stop the music.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped the music.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: how are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great, thanks for asking! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: What's the weather like right now?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great, thanks for asking! How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.2C, wind_speed=3.1mps, humidity=92.5, cloudiness=100, fog=27.3, status=enum foggy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=15;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is foggy today in Palo Alto, California and the temperature is 61.2 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: in one minute play do you want to build a snowman?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 1min]) => @org.thingpedia.media-source.playable() filter id =~ "do you want to build a snowman?" => @org.thingpedia.media-player.play(playable=id);
====
# recording/6eaadd3e7a5177777da66246b2fb7ef8
U: What's the best place to eat in Bernal Heights?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(rating desc of @com.yelp.restaurant() filter geo == new Location("bernal heights"))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/jkIohD30Tl_qn0H-KHkjjg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shish-ke-baba-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["kebab"^^com.yelp:restaurant_cuisine("Kebab"), "turkish"^^com.yelp:restaurant_cuisine("Turkish"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=5, review_count=308, geo=new Location(37.742213, -122.423143, "59 30th St, San Francisco, CA 94110"), phone="+14159268955"^^tt:phone_number }
C: ]];
A: The top rated restaurant is Shish Ke Baba. It is a restaurant near 59 30th St, San Francisco, CA 94110 rated 5 star.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: How many reviews does that have?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/jkIohD30Tl_qn0H-KHkjjg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shish-ke-baba-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["kebab"^^com.yelp:restaurant_cuisine("Kebab"), "turkish"^^com.yelp:restaurant_cuisine("Turkish"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=5, review_count=308, geo=new Location(37.742213, -122.423143, "59 30th St, San Francisco, CA 94110"), phone="+14159268955"^^tt:phone_number }
C: ]];
C: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), review_count=308 }
C: ]];
A: Shish Ke Baba is a restaurant with 308 reviews.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the weather there next weekend?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.7429861, -122.4158042, "Bernal Heights"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/jkIohD30Tl_qn0H-KHkjjg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shish-ke-baba-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["kebab"^^com.yelp:restaurant_cuisine("Kebab"), "turkish"^^com.yelp:restaurant_cuisine("Turkish"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=5, review_count=308, geo=new Location(37.742213, -122.423143, "59 30th St, San Francisco, CA 94110"), phone="+14159268955"^^tt:phone_number }
C: ]];
C: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), review_count=308 }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=0.5mps, humidity=69.9, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T06:00:00.000Z"), location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
A: It will be sunny on Friday at 11:00 PM in Bernal Heights and the temperature will be 56.1 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Set a reminder to wake up the kids on Friday morning.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[new Date(enum friday)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="wake up the kids");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/jkIohD30Tl_qn0H-KHkjjg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shish-ke-baba-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["kebab"^^com.yelp:restaurant_cuisine("Kebab"), "turkish"^^com.yelp:restaurant_cuisine("Turkish"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=5, review_count=308, geo=new Location(37.742213, -122.423143, "59 30th St, San Francisco, CA 94110"), phone="+14159268955"^^tt:phone_number }
C: ]];
C: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), review_count=308 }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=0.5mps, humidity=69.9, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T06:00:00.000Z"), location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
C: ontimer(date=[new Date(enum friday)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="wake up the kids")
C: #[results=[]];
A: Alright, I will send you a message wake up the kids at start of day on Friday.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: Play some Bob.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("bob")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/jkIohD30Tl_qn0H-KHkjjg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shish-ke-baba-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["kebab"^^com.yelp:restaurant_cuisine("Kebab"), "turkish"^^com.yelp:restaurant_cuisine("Turkish"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=5, review_count=308, geo=new Location(37.742213, -122.423143, "59 30th St, San Francisco, CA 94110"), phone="+14159268955"^^tt:phone_number }
C: ]];
C: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), review_count=308 }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=0.5mps, humidity=69.9, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T06:00:00.000Z"), location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
C: ontimer(date=[new Date(enum friday)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="wake up the kids")
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Bob Marley & The Wailers on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some Trent Reznor.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("trent reznor")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/jkIohD30Tl_qn0H-KHkjjg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/shish-ke-baba-san-francisco?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["kebab"^^com.yelp:restaurant_cuisine("Kebab"), "turkish"^^com.yelp:restaurant_cuisine("Turkish"), "mediterranean"^^com.yelp:restaurant_cuisine("Mediterranean")], price=enum moderate, rating=5, review_count=308, geo=new Location(37.742213, -122.423143, "59 30th St, San Francisco, CA 94110"), phone="+14159268955"^^tt:phone_number }
C: ]];
C: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), review_count=308 }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=0.5mps, humidity=69.9, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T06:00:00.000Z"), location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
C: ontimer(date=[new Date(enum friday)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="wake up the kids")
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6cadOIa5DTh6a5mGo5r4bh"^^org.thingpedia.media-source:artist("Trent Reznor and Atticus Ross")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1v0uVPU6BWcbog5BiWLWVa"^^org.thingpedia.media-source:playable("Hand Covers Bruise"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1q1T0TbFO2fWkDmgCKwTB0"^^org.thingpedia.media-source:playable("Epiphany"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2vghSgfOlBz3AZSlkLhLVX"^^org.thingpedia.media-source:playable("Just Us"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:50CgC2wKmbWm4WLQKY87oP"^^org.thingpedia.media-source:playable("In Motion"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3g5kQgKEllNBUklsmARGg8"^^org.thingpedia.media-source:playable("Immigrant Song"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1ijkFiMeHopKkHyvQCWxUa"^^org.thingpedia.media-source:playable("The Social Network"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0mAK8JyX2On5kLC3VMMgm7"^^org.thingpedia.media-source:playable("The Girl With the Dragon Tattoo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3TB6SKSLA7zUN1jIKwO31e"^^org.thingpedia.media-source:playable("Watchmen: Volume 1 (Music from the HBO Series)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3vY7azmIs5SG8O47L97VXM"^^org.thingpedia.media-source:playable("Watchmen: Volume 3 (Music from the HBO Series)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6nFtsE7rZHInooqb9QYGrn"^^org.thingpedia.media-source:playable("Before the Flood (Music from the Motion Picture)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Trent Reznor and Atticus Ross on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some 9 inch nails.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("9 inch nails")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: [review_count] of sort(rating desc of @com.yelp.restaurant() filter geo == new Location(37.7429861, -122.4158042, "Bernal Heights") && id == "RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"))[1]
C: #[results=[
C:   { id="RGeS1J38e5PmDOiGS-7bOA"^^com.yelp:restaurant("Shish Ke Baba"), review_count=308 }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=0.5mps, humidity=69.9, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-11-06T06:00:00.000Z"), location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
C: ontimer(date=[new Date(enum friday)]) => @org.thingpedia.builtin.thingengine.builtin.say(message="wake up the kids")
C: #[results=[]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2QsynagSdAqZj3U9HgDzjD"^^org.thingpedia.media-source:artist("Bob Marley & The Wailers")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6A9mKXlFRPMPem6ygQSt7z"^^org.thingpedia.media-source:playable("Three Little Birds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5O4erNlJ74PIF6kGol1ZrC"^^org.thingpedia.media-source:playable("Could You Be Loved"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JRLFiX9NJSoRRKxowlBYr"^^org.thingpedia.media-source:playable("Is This Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4zn0kScuV9Oj28d4g9CQQs"^^org.thingpedia.media-source:playable("Jamming"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2HcyIzVsX45jLIxK7SH2aI"^^org.thingpedia.media-source:playable("One Love / People Get Ready - Medley"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1vHvJVBK0WnpbYFw4f4UTD"^^org.thingpedia.media-source:playable("Exodus (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4jKeipwuUTjlx9USNYdhZn"^^org.thingpedia.media-source:playable("Legend - The Best Of Bob Marley And The Wailers"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:321q9p7PELvzcFAWxml7VX"^^org.thingpedia.media-source:playable("Uprising"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:13dXX35pYjr8FqRla40K2a"^^org.thingpedia.media-source:playable("Kaya"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5Rg4ZSwf1LPCuAMr0msdun"^^org.thingpedia.media-source:playable("Confrontation"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6cadOIa5DTh6a5mGo5r4bh"^^org.thingpedia.media-source:artist("Trent Reznor and Atticus Ross")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1v0uVPU6BWcbog5BiWLWVa"^^org.thingpedia.media-source:playable("Hand Covers Bruise"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1q1T0TbFO2fWkDmgCKwTB0"^^org.thingpedia.media-source:playable("Epiphany"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2vghSgfOlBz3AZSlkLhLVX"^^org.thingpedia.media-source:playable("Just Us"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:50CgC2wKmbWm4WLQKY87oP"^^org.thingpedia.media-source:playable("In Motion"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3g5kQgKEllNBUklsmARGg8"^^org.thingpedia.media-source:playable("Immigrant Song"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:1ijkFiMeHopKkHyvQCWxUa"^^org.thingpedia.media-source:playable("The Social Network"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:0mAK8JyX2On5kLC3VMMgm7"^^org.thingpedia.media-source:playable("The Girl With the Dragon Tattoo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3TB6SKSLA7zUN1jIKwO31e"^^org.thingpedia.media-source:playable("Watchmen: Volume 1 (Music from the HBO Series)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3vY7azmIs5SG8O47L97VXM"^^org.thingpedia.media-source:playable("Watchmen: Volume 3 (Music from the HBO Series)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6nFtsE7rZHInooqb9QYGrn"^^org.thingpedia.media-source:playable("Before the Flood (Music from the Motion Picture)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:0X380XXQSNBYuleKzav5UO"^^org.thingpedia.media-source:artist("Nine Inch Nails")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2oDqmfa2g8W893LlwJG1qu"^^org.thingpedia.media-source:playable("Closer"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5ugzDiilhy6ILKmKfhEzd7"^^org.thingpedia.media-source:playable("The Hand That Feeds"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ckd4YA4LcD3j50rfIVwUe"^^org.thingpedia.media-source:playable("Head Like A Hole"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lo9k4PrxFd5Np4cAxXoKo"^^org.thingpedia.media-source:playable("Hurt"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0m1DJ5Jkv3kdnGrcZsJFmC"^^org.thingpedia.media-source:playable("Only"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3nJnyDV8fwFpffo0EyHQto"^^org.thingpedia.media-source:playable("The Downward Spiral"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:56Us3Q6UIM4jKJZlWhqddL"^^org.thingpedia.media-source:playable("With Teeth"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:3umFHeEpc4yLXtrRcv9gLN"^^org.thingpedia.media-source:playable("Pretty Hate Machine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4uiVwLbTzE6VMkXpaDAwB8"^^org.thingpedia.media-source:playable("The Fragile"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:5I7lLu8xXJfGRdFUqHaLQU"^^org.thingpedia.media-source:playable("The Downward Spiral (Deluxe Edition)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music recordings by Nine Inch Nails on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some Bjork.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("bjork")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/522a273d1c5e0c6630c51c4b8595304d
U: what's the weather in Bernal Heights?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("bernal heights"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=2.6mps, humidity=84.6, cloudiness=96.9, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
A: It is cloudy today in Bernal Heights and the temperature is 56.1 degrees Fahrenheit.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: Hey Jeannie.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: @org.thingpedia.weather.current(location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=2.6mps, humidity=84.6, cloudiness=96.9, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: say yo yo yo.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.say(message="yo yo yo");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.7429861, -122.4158042, "Bernal Heights"))
C: #[results=[
C:   { temperature=13.4C, wind_speed=2.6mps, humidity=84.6, cloudiness=96.9, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(37.7429861, -122.4158042, "Bernal Heights") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.say(message="yo yo yo")
C: #[results=[
C:   { message_output="yo yo yo", message="yo yo yo" }
C: ]];
A: Yo yo yo.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Hey Jeannie.
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/c287e59971b3896402340dfbc8cbf152
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/271cbf8bb5a6f99b997a6fa9bfefbca3
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2yi7HZrBOC4bMUSTcs4VK6"^^org.thingpedia.media-source:playable("Do You Want to Build a Snowman? - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3xDVJcvcKedshWlT3qGSHk"^^org.thingpedia.media-source:playable("Frozen Heart - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FHUBs8P5qcjpj7C2QHdEq"^^org.thingpedia.media-source:playable("Tulou Tagaloa"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:70b5Sq3ePOu3Gqg0hjlOtR"^^org.thingpedia.media-source:playable("For the First Time in Forever - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0qcr5FMsEO85NAQjrlDRKo"^^org.thingpedia.media-source:playable("Let It Go - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2bwSCIuNtVrQPVddCi8sOW"^^org.thingpedia.media-source:playable("Where You Are"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3IPnBzGRMg6BfViFxxa0Gq"^^org.thingpedia.media-source:playable("Love Is an Open Door - From \"Frozen\"/Soundtrack Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6mb6lVLNrcUgLnEN8QnDJd"^^org.thingpedia.media-source:playable("How Far I'll Go"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6U4VqEHy4n5VeiH4pQPL24"^^org.thingpedia.media-source:playable("You're Welcome"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3ZJnc1eGicPxRitBoC7eWZ"^^org.thingpedia.media-source:playable("An Innocent Warrior"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played music recordings on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/794cb4d007b75625da98236649cd9a85
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/55c00d432e9d0139128606b997225c30
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
