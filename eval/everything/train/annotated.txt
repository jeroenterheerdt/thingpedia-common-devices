====
# log/116890
U: thanks almond
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/69494
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/111416
U: hi there
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/123243
U: thanks
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/120370
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/18761
U: good afternoon
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/110691
U: hey ada
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/20872
U: thank you!
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/2253
U: never mind
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/825
U: goodbye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/8465
U: good night
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/18480
U: good evening
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# log/58552
U: goodnight
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/9708
U: reset
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5e8ef3f5446ef9a3ceb9a9d5d0cbf9c6
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/b2eb3422447a53d285645a0d43f11862
U: hi
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/011c3e9fa75b2d1dbaa7329d5872da3d
U: Thank you, I like that music.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a6bdb647534ed0a5a29f997c49d4d598
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6348bd611b59e53055b947a050457268
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# log/158327
U: hello, almond
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# online/359894
U: notify me of mail once every 2 ms
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: timer(interval=2ms) => @com.gmail.inbox();
====
# recording/4d7d4033eff156190f76d63cc4fed839
U: tell a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="9hyAsrzAItc"^^com.icanhazdadjoke:id, text="Where’s the bin? Dad: I haven’t been anywhere!" }
C: ]];
A: Where’s the bin? Dad: I haven’t been anywhere!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: another one
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="9hyAsrzAItc"^^com.icanhazdadjoke:id, text="Where’s the bin? Dad: I haven’t been anywhere!" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="HtcNuHJBQCd"^^com.icanhazdadjoke:id, text="How many kids with ADD does it take to change a lightbulb? Let's go ride bikes!" }
C: ]];
A: How many kids with ADD does it take to change a lightbulb? Let's go ride bikes!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="9hyAsrzAItc"^^com.icanhazdadjoke:id, text="Where’s the bin? Dad: I haven’t been anywhere!" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="HtcNuHJBQCd"^^com.icanhazdadjoke:id, text="How many kids with ADD does it take to change a lightbulb? Let's go ride bikes!" }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=16C, wind_speed=3.6mps, humidity=35, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: The current weather in Redwood City, California is sunny. The temperature is 60.8 F and the humidity is 35 %.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: how old are you
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_age);
====
# recording/eff39ac4ab8dd4a34704bc4fd1e33b37
U: can you tell me a joke?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Sn39Elb2LBd"^^com.icanhazdadjoke:id, text="What is this movie about? It is about 2 hours long." }
C: ]];
A: What is this movie about? It is about 2 hours long.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: another joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Sn39Elb2LBd"^^com.icanhazdadjoke:id, text="What is this movie about? It is about 2 hours long." }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="vkV0L6wcFlb"^^com.icanhazdadjoke:id, text="Did you hear about the runner who was criticized? He just took it in stride" }
C: ]];
A: Did you hear about the runner who was criticized? He just took it in stride.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: ha ha
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool);
====
# recording/f9c6c90344e6681fbb6f0e17fb8a9045
U: show me restaurants around berkeley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("berkeley");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California")
C: #[results=[
C:   { id="uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/S-5Nn8BJufkVNKJ281D6FQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cheese-board-pizza-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza")], price=enum cheap, rating=4.5, review_count=5367, geo=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709"), phone="+15105493183"^^tt:phone_number },
C:   { id="Q4o6ySw2V6r0UbK-aCAfng"^^com.yelp:restaurant("Angeline's Louisiana Kitchen"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/7JmU5f54Ga5mGEdmLwKt2A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/angelines-louisiana-kitchen-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "southern"^^com.yelp:restaurant_cuisine("Southern"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4, review_count=4318, geo=new Location(37.868282, -122.267555, "2261 Shattuck Ave, Berkeley, CA 94704"), phone="+15105486900"^^tt:phone_number },
C:   { id="2u4DSD6F8RyFXp-Crhj8OA"^^com.yelp:restaurant("Cinnaholic"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/ztLLRhCIvdIWS8j3WujXPw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cinnaholic-berkeley-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan")], price=enum cheap, rating=4.5, review_count=1686, geo=new Location(37.870305, -122.266062498093, "2132 Oxford St, Berkeley, CA 94704"), phone="+15106478684"^^tt:phone_number },
C:   { id="KoZtPdlNO2jMJ7Zc7I9JVg"^^com.yelp:restaurant("Jupiter"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/Tt3T3_pk5u0i6iDJjt4UIQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/jupiter-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "chicken_wings"^^com.yelp:restaurant_cuisine("Chicken Wings")], price=enum moderate, rating=4, review_count=3184, geo=new Location(37.869817, -122.267597, "2181 Shattuck Ave, Berkeley, CA 94704"), phone="+15108438277"^^tt:phone_number },
C:   { id="dmZS7KKxE8GHfIHzsenqUQ"^^com.yelp:restaurant("La Note"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/JALkbjMGELKBg8l3dIHqQg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-note-berkeley-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=3668, geo=new Location(37.8662142064674, -122.267341609173, "2377 Shattuck Ave, Berkeley, CA 94704"), phone="+15108431525"^^tt:phone_number },
C:   { id="Se9nvLiXHWI5ltMSo8klCw"^^com.yelp:restaurant("The Butchers Son"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/BjmhM0KqCJB_NwyAQxavAw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/the-butchers-son-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["salad"^^com.yelp:restaurant_cuisine("Salad"), "tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)")], price=enum moderate, rating=4, review_count=1345, geo=new Location(37.8715428393541, -122.271646200946, "1954 University Ave, Berkeley, CA 94704"), phone="+15109840818"^^tt:phone_number },
C:   { id="cMyf8e6frO9PIutPvXpjow"^^com.yelp:restaurant("Chez Panisse"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/LDM_1qIyYMuI1Z9jgWSGrg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/chez-panisse-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "french"^^com.yelp:restaurant_cuisine("French")], price=enum luxury, rating=4, review_count=2845, geo=new Location(37.879664, -122.26894, "1517 Shattuck Ave, Berkeley, CA 94709"), phone="+15105485525"^^tt:phone_number },
C:   { id="sKnjZ4bb-0AWxWqJv7cHOw"^^com.yelp:restaurant("Grégoire"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/zVNybiotkBeVGWFjSNFnWw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/gregoire-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=2277, geo=new Location(37.8785970706384, -122.268645902327, "2109 Cedar St, Berkeley, CA 94709"), phone="+15108831893"^^tt:phone_number },
C:   { id="oqyeLUSC2Z3Aczzh_4-4Yw"^^com.yelp:restaurant("Berkeley Social Club"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/31M_26DVjqn7EWndAwmVeQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/berkeley-social-club-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "korean"^^com.yelp:restaurant_cuisine("Korean")], price=enum moderate, rating=4, review_count=1333, geo=new Location(37.8718158, -122.2696171, "2050 University Ave, Berkeley, CA 94704"), phone="+15109005858"^^tt:phone_number },
C:   { id="uBuIZ8Pdk9HegYSAU0EsKA"^^com.yelp:restaurant("Great China"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/QpXekbyL5oYjoC-XWdgzxQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/great-china-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4, review_count=2186, geo=new Location(37.8676818865786, -122.26615783488, "2190 Bancroft Way, Berkeley, CA 94704"), phone="+15108437996"^^tt:phone_number }
C: ]]
C: #[count=50];
A: I see Cheese Board Pizza. It is a cheap restaurant near 1512 Shattuck Ave, Berkeley, CA 94709.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what is the address again?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [geo] of @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California") && id == "uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California")
C: #[results=[
C:   { id="uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/S-5Nn8BJufkVNKJ281D6FQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cheese-board-pizza-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza")], price=enum cheap, rating=4.5, review_count=5367, geo=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709"), phone="+15105493183"^^tt:phone_number },
C:   { id="Q4o6ySw2V6r0UbK-aCAfng"^^com.yelp:restaurant("Angeline's Louisiana Kitchen"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/7JmU5f54Ga5mGEdmLwKt2A/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/angelines-louisiana-kitchen-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["cajun"^^com.yelp:restaurant_cuisine("Cajun/Creole"), "southern"^^com.yelp:restaurant_cuisine("Southern"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4, review_count=4318, geo=new Location(37.868282, -122.267555, "2261 Shattuck Ave, Berkeley, CA 94704"), phone="+15105486900"^^tt:phone_number },
C:   { id="2u4DSD6F8RyFXp-Crhj8OA"^^com.yelp:restaurant("Cinnaholic"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/ztLLRhCIvdIWS8j3WujXPw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/cinnaholic-berkeley-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan")], price=enum cheap, rating=4.5, review_count=1686, geo=new Location(37.870305, -122.266062498093, "2132 Oxford St, Berkeley, CA 94704"), phone="+15106478684"^^tt:phone_number },
C:   { id="KoZtPdlNO2jMJ7Zc7I9JVg"^^com.yelp:restaurant("Jupiter"), image_url="https://s3-media1.fl.yelpcdn.com/bphoto/Tt3T3_pk5u0i6iDJjt4UIQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/jupiter-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["pizza"^^com.yelp:restaurant_cuisine("Pizza"), "chicken_wings"^^com.yelp:restaurant_cuisine("Chicken Wings")], price=enum moderate, rating=4, review_count=3184, geo=new Location(37.869817, -122.267597, "2181 Shattuck Ave, Berkeley, CA 94704"), phone="+15108438277"^^tt:phone_number },
C:   { id="dmZS7KKxE8GHfIHzsenqUQ"^^com.yelp:restaurant("La Note"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/JALkbjMGELKBg8l3dIHqQg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/la-note-berkeley-5?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch")], price=enum moderate, rating=4, review_count=3668, geo=new Location(37.8662142064674, -122.267341609173, "2377 Shattuck Ave, Berkeley, CA 94704"), phone="+15108431525"^^tt:phone_number },
C:   { id="Se9nvLiXHWI5ltMSo8klCw"^^com.yelp:restaurant("The Butchers Son"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/BjmhM0KqCJB_NwyAQxavAw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/the-butchers-son-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["salad"^^com.yelp:restaurant_cuisine("Salad"), "tradamerican"^^com.yelp:restaurant_cuisine("American (Traditional)")], price=enum moderate, rating=4, review_count=1345, geo=new Location(37.8715428393541, -122.271646200946, "1954 University Ave, Berkeley, CA 94704"), phone="+15109840818"^^tt:phone_number },
C:   { id="cMyf8e6frO9PIutPvXpjow"^^com.yelp:restaurant("Chez Panisse"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/LDM_1qIyYMuI1Z9jgWSGrg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/chez-panisse-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["newamerican"^^com.yelp:restaurant_cuisine("American (New)"), "french"^^com.yelp:restaurant_cuisine("French")], price=enum luxury, rating=4, review_count=2845, geo=new Location(37.879664, -122.26894, "1517 Shattuck Ave, Berkeley, CA 94709"), phone="+15105485525"^^tt:phone_number },
C:   { id="sKnjZ4bb-0AWxWqJv7cHOw"^^com.yelp:restaurant("Grégoire"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/zVNybiotkBeVGWFjSNFnWw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/gregoire-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["french"^^com.yelp:restaurant_cuisine("French"), "sandwiches"^^com.yelp:restaurant_cuisine("Sandwiches")], price=enum moderate, rating=4, review_count=2277, geo=new Location(37.8785970706384, -122.268645902327, "2109 Cedar St, Berkeley, CA 94709"), phone="+15108831893"^^tt:phone_number },
C:   { id="oqyeLUSC2Z3Aczzh_4-4Yw"^^com.yelp:restaurant("Berkeley Social Club"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/31M_26DVjqn7EWndAwmVeQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/berkeley-social-club-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["breakfast_brunch"^^com.yelp:restaurant_cuisine("Breakfast & Brunch"), "korean"^^com.yelp:restaurant_cuisine("Korean")], price=enum moderate, rating=4, review_count=1333, geo=new Location(37.8718158, -122.2696171, "2050 University Ave, Berkeley, CA 94704"), phone="+15109005858"^^tt:phone_number },
C:   { id="uBuIZ8Pdk9HegYSAU0EsKA"^^com.yelp:restaurant("Great China"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/QpXekbyL5oYjoC-XWdgzxQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/great-china-berkeley?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4, review_count=2186, geo=new Location(37.8676818865786, -122.26615783488, "2190 Bancroft Way, Berkeley, CA 94704"), phone="+15108437996"^^tt:phone_number }
C: ]]
C: #[count=50];
C: [geo] of @com.yelp.restaurant() filter geo == new Location(37.8708393, -122.2728639, "Berkeley, California") && id == "uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza")
C: #[results=[
C:   { id="uvCBQevs26owAL7KW2_VIA"^^com.yelp:restaurant("Cheese Board Pizza"), geo=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709") }
C: ]];
A: Cheese Board Pizza is a restaurant near 1512 Shattuck Ave, Berkeley, CA 94709.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what is the weather like there?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location(37.8801315387818, -122.269357296486, "1512 Shattuck Ave, Berkeley, CA 94709"));
====
# recording/ed3ace50937bcbe1b0e7d09427a1b375
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center"))
C: #[results=[
C:   { temperature=11.1C, wind_speed=3.6mps, humidity=50.8, cloudiness=39.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center") }
C: ]];
A: It is cloudy today in Cantor Arts Center and the temperature is 52 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: change my location
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center"))
C: #[results=[
C:   { temperature=11.1C, wind_speed=3.6mps, humidity=50.8, cloudiness=39.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.433014400000005, -122.17087506623025, "Cantor Arts Center") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(type=enum current);
A: What location do you want?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(location);
AT: @org.thingpedia.builtin.thingengine.builtin.set_location(type=enum current);
U: Stanford
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("stanford"));
====
# recording/7bc283be6848a55798d4e5ad70b2d202
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto"))
C: #[results=[
C:   { temperature=11C, wind_speed=3.6mps, humidity=50.8, cloudiness=39.1, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.426540700000004, -122.17029258409187, "Stanford, Palo Alto") }
C: ]];
A: It is cloudy today in Stanford, Palo Alto and the temperature is 51.8 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: where am I?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
====
# online/55592327
U: notify me when the door opens and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592330
U: notify me when someone opens the door and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592331
U: notify me when someone opens the door while i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592610
U: alert me when somebody opens the door and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592613
U: update me when my door is opened and i am not home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592615
U: tell me when my door is opened and i am out of home
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592686
U: if i am not at home and my door is open, alert me
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592697
U: tell me if i am not at home and someone opens the door
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592700
U: alert me if i am not at home and someone opens the door
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# online/55592702
U: update me if i am not at home and someone opens my door
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.door.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum open;
====
# log/54730
U: turn the light on when motion is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.motion.motion()) filter state == enum detecting => @org.thingpedia.iot.light-bulb.set_power(power=enum on);
====
# log/59476
U: if movement in room office, turn on light
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.motion(name="office").motion()) filter state == enum detecting => @org.thingpedia.iot.light-bulb(name="room office").set_power(power=enum on);
====
# log/76789
U: when i arrive home turn on the lights
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.builtin.thingengine.builtin.get_gps()) filter location == $location.home => @org.thingpedia.iot.light-bulb.set_power(power=enum on);
====
# recording/6b62ca72ae439e9508a62a66f95e9d2c
U: get a cat
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.thecatapi.cat();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.thecatapi.cat()
C: #[results=[
C:   { id="AdsrndOAi"^^com.thecatapi:cat, picture_url="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/AdsrndOAi.jpg"^^tt:picture, link="http://thecatapi.com/?id=AdsrndOAi"^^tt:url }
C: ]];
A: Here is a cat picture.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play hello
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "hello" => @org.thingpedia.media-player.play(playable=id);
====
# recording/15391f435601a0f7743b69a61beaae2b
U: what's the definition of covid
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @info.owlbot.get(word="covid");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
A: Sorry, Request failed with status code 404.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: where am i now
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error="Sorry, I cannot access your location in this version of Almond."];
A: Sorry, Sorry, I cannot access your location in this version of Almond.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: can you speak
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_voice_output(status=enum on);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error="Sorry, I cannot access your location in this version of Almond."];
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_output(status=enum on)
C: #[results=[]]
C: #[error=enum unsupported];
A: Sorry, voice output is not supported on this platform.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: can you listen to me
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @info.owlbot.get(word="covid")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error="Sorry, I cannot access your location in this version of Almond."];
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_output(status=enum on)
C: #[results=[]]
C: #[error=enum unsupported];
C: @org.thingpedia.builtin.thingengine.builtin.set_voice_input(status=enum on)
C: #[results=[]]
C: #[error=enum unsupported];
A: Sorry, voice input is not supported on this platform.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: can you help me with home assistant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum troubleshooting_home_assistant);
====
# recording/777edda821529592a0899ffdeadf56eb
U: show me a quote
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.forismatic.quotes.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.forismatic.quotes.get()
C: #[results=[
C:   { author="Plutarch ", text="What we achieve inwardly will change outer reality.  ", link="http://forismatic.com/en/67cf5ed025/"^^tt:url }
C: ]];
A: Plutarch wrote: What we achieve inwardly will change outer reality.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: another one?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.forismatic.quotes.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.forismatic.quotes.get()
C: #[results=[
C:   { author="Plutarch ", text="What we achieve inwardly will change outer reality.  ", link="http://forismatic.com/en/67cf5ed025/"^^tt:url }
C: ]];
C: @com.forismatic.quotes.get()
C: #[results=[
C:   { author="Agatha Christie", text="Good advice is always certain to be ignored, but that's no reason not to give it.", link="http://forismatic.com/en/e4d22ed81c/"^^tt:url }
C: ]];
A: Agatha Christie wrote: Good advice is always certain to be ignored, but that's no reason not to give it.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: turn on the lights
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.iot.light-bulb.set_power(power=enum on);
====
# recording/a0e39845561253ced0501ba1cda02157
U: get xkcd 2431
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.xkcd.comic() filter id == 2431;
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.xkcd.comic() filter id == 2431
C: #[results=[
C:   { id=2431, title="Leap Year 2021", alt_text="I've lived in the present for my whole life and I'm not about to move now.", picture_url="https://imgs.xkcd.com/comics/leap_year_2021.png"^^tt:picture, link="https://xkcd.com/2431"^^tt:url, release_date=new Date("2021-03-01T00:00:00.000Z") }
C: ]];
A: 2,431 is an xkcd comic from 1 Monday titled Leap Year 2021.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: tell me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.xkcd.comic() filter id == 2431
C: #[results=[
C:   { id=2431, title="Leap Year 2021", alt_text="I've lived in the present for my whole life and I'm not about to move now.", picture_url="https://imgs.xkcd.com/comics/leap_year_2021.png"^^tt:picture, link="https://xkcd.com/2431"^^tt:url, release_date=new Date("2021-03-01T00:00:00.000Z") }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4259748921271658525"^^com.smartnews:article, title="CDC Says Vaccinated People Can Visit Each Other Mask Free", date=new Date("2021-03-08T16:11:25.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/cdc-loosens-rules-for-vaccinated-people-but-discourages-travel" },
C:   { id="4259743488112853555"^^com.smartnews:article, title="Republican Sen. Roy Blunt says he won’t run for reelection in 2022", date=new Date("2021-03-08T15:50:42.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/gop-senator-blunt-says-he-won-t-seek-re-election-in-2022" },
C:   { id="4259179482146933923"^^com.smartnews:article, title="How To Get Someone To Stop Texting You Immediately With One Reply", date=new Date("2021-03-07T00:30:03.000Z"), source="YourTango", author="Christine Schoenwald", url="https://www.yourtango.com/2015276841/how-to-get-someone-to-stop-texting-you-with-one-reply" },
C:   { id="4259661098128510254"^^com.smartnews:article, title="FBI warns that extremists 'seek affiliation' with police to further their goals", date=new Date("2021-03-08T10:05:03.000Z"), source="ABC News", url="https://abcnews.go.com/US/white-supremacists-seek-affiliation-law-enforcement-goals-internal/story?id=76309051" },
C:   { id="4259724860520933142"^^com.smartnews:article, title="Dr. Fauci says putting one of these in your home can help stop the coronavirus", date=new Date("2021-03-08T14:00:09.000Z"), source="BGR", author="Yoni Heisler", url="https://bgr.com/2021/03/08/covid-update-fauci-hepa-filter-coronavirus-safety/" },
C:   { id="4259734433977865973"^^com.smartnews:article, title="Supreme Court rejects final Trump bid to nullify 2020 election results", date=new Date("2021-03-08T14:59:32.000Z"), source="The Hill", author="John Kruzel", url="https://thehill.com/regulation/court-battles/542082-supreme-court-rejects-final-trump-bid-to-nullify-2020-election" },
C:   { id="4259517849967531264"^^com.smartnews:article, title="Jeff Bezos’ ex-wife marries Seattle science teacher as Amazon boss says: ‘He is a great guy’", date=new Date("2021-03-08T00:40:55.000Z"), source="The Independent", author="Graeme Massie", url="https://www.independent.co.uk/news/world/americas/jeff-bezos-ex-wife-mackenzie-scott-b1813750.html" },
C:   { id="4258719275369368285"^^com.smartnews:article, title="Katy Perry and Orlando Bloom vacation in Hawaii with baby Daisy Dove", date=new Date("2021-03-05T19:16:05.000Z"), source="Page Six", author="Eileen Reslen", url="https://pagesix.com/2021/03/05/katy-perry-and-orlando-bloom-vacation-with-daisy-dove/" },
C:   { id="4259761133570760718"^^com.smartnews:article, title="Exclusive: EU preparing sanctions on Myanmar military businesses, documents show", date=new Date("2021-03-08T13:11:47.000Z"), source="Reuters", author="Gabriela Baczynska", url="https://www.reuters.com/article/us-myanmar-politics-eu-idUSKBN2B01D1" },
C:   { id="4259740943361514540"^^com.smartnews:article, title="Yellen says Biden COVID bill to fuel 'very strong' U.S. recovery", date=new Date("2021-03-08T14:57:29.000Z"), source="Reuters", author="David Lawder", url="https://www.reuters.com/article/us-usa-economy-yellen-idUSKBN2B01MJ" }
C: ]]
C: #[count=32];
A: The latest news is CDC Says Vaccinated People Can Visit Each Other Mask Free. It is a new articles from Bloomberg published today at 8:11:25 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the definition of coronavirus
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @info.owlbot.get(word="coronavirus");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.xkcd.comic() filter id == 2431
C: #[results=[
C:   { id=2431, title="Leap Year 2021", alt_text="I've lived in the present for my whole life and I'm not about to move now.", picture_url="https://imgs.xkcd.com/comics/leap_year_2021.png"^^tt:picture, link="https://xkcd.com/2431"^^tt:url, release_date=new Date("2021-03-01T00:00:00.000Z") }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4259748921271658525"^^com.smartnews:article, title="CDC Says Vaccinated People Can Visit Each Other Mask Free", date=new Date("2021-03-08T16:11:25.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/cdc-loosens-rules-for-vaccinated-people-but-discourages-travel" },
C:   { id="4259743488112853555"^^com.smartnews:article, title="Republican Sen. Roy Blunt says he won’t run for reelection in 2022", date=new Date("2021-03-08T15:50:42.000Z"), source="Bloomberg", url="https://www.bloomberg.com/news/articles/2021-03-08/gop-senator-blunt-says-he-won-t-seek-re-election-in-2022" },
C:   { id="4259179482146933923"^^com.smartnews:article, title="How To Get Someone To Stop Texting You Immediately With One Reply", date=new Date("2021-03-07T00:30:03.000Z"), source="YourTango", author="Christine Schoenwald", url="https://www.yourtango.com/2015276841/how-to-get-someone-to-stop-texting-you-with-one-reply" },
C:   { id="4259661098128510254"^^com.smartnews:article, title="FBI warns that extremists 'seek affiliation' with police to further their goals", date=new Date("2021-03-08T10:05:03.000Z"), source="ABC News", url="https://abcnews.go.com/US/white-supremacists-seek-affiliation-law-enforcement-goals-internal/story?id=76309051" },
C:   { id="4259724860520933142"^^com.smartnews:article, title="Dr. Fauci says putting one of these in your home can help stop the coronavirus", date=new Date("2021-03-08T14:00:09.000Z"), source="BGR", author="Yoni Heisler", url="https://bgr.com/2021/03/08/covid-update-fauci-hepa-filter-coronavirus-safety/" },
C:   { id="4259734433977865973"^^com.smartnews:article, title="Supreme Court rejects final Trump bid to nullify 2020 election results", date=new Date("2021-03-08T14:59:32.000Z"), source="The Hill", author="John Kruzel", url="https://thehill.com/regulation/court-battles/542082-supreme-court-rejects-final-trump-bid-to-nullify-2020-election" },
C:   { id="4259517849967531264"^^com.smartnews:article, title="Jeff Bezos’ ex-wife marries Seattle science teacher as Amazon boss says: ‘He is a great guy’", date=new Date("2021-03-08T00:40:55.000Z"), source="The Independent", author="Graeme Massie", url="https://www.independent.co.uk/news/world/americas/jeff-bezos-ex-wife-mackenzie-scott-b1813750.html" },
C:   { id="4258719275369368285"^^com.smartnews:article, title="Katy Perry and Orlando Bloom vacation in Hawaii with baby Daisy Dove", date=new Date("2021-03-05T19:16:05.000Z"), source="Page Six", author="Eileen Reslen", url="https://pagesix.com/2021/03/05/katy-perry-and-orlando-bloom-vacation-with-daisy-dove/" },
C:   { id="4259761133570760718"^^com.smartnews:article, title="Exclusive: EU preparing sanctions on Myanmar military businesses, documents show", date=new Date("2021-03-08T13:11:47.000Z"), source="Reuters", author="Gabriela Baczynska", url="https://www.reuters.com/article/us-myanmar-politics-eu-idUSKBN2B01D1" },
C:   { id="4259740943361514540"^^com.smartnews:article, title="Yellen says Biden COVID bill to fuel 'very strong' U.S. recovery", date=new Date("2021-03-08T14:57:29.000Z"), source="Reuters", author="David Lawder", url="https://www.reuters.com/article/us-usa-economy-yellen-idUSKBN2B01MJ" }
C: ]]
C: #[count=32];
C: @info.owlbot.get(word="coronavirus")
C: #[results=[]]
C: #[error="Request failed with status code 404"];
A: Sorry, Request failed with status code 404.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what will be the weather tomorrow
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
====
# online/131451
U: get my security camera then play music on my speaker
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: now => @org.thingpedia.iot.security-camera.current_event() => notify;
UT: now => @org.thingpedia.iot.speaker.play_music();
====
# online/130233
U: get xkcd and post on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: now => @com.xkcd.get_comic() => notify;
UT: now => @com.twitter.post(status=$?);
====
# online/135922
U: if there is a file in "str:QUOTED_STRING::0:" in my dropbox which is not a folder and was last modified on 1/2/2018 and is smaller than 13 kbs then post a picture on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: now => (@com.dropbox.list_folder(folder_name="str:QUOTED_STRING::0:")), ((file_size <= 13KB && is_folder == false) && modified_time == new Date("2018-01-02T08:00:00.000Z")) => notify;
UT: now => @com.twitter.post_picture(caption=$?, picture_url=$?);
====
# online/120499
U: if i receive a tweet with hashtag bdaycelebrationscontinu then send a message on slack
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.twitter.home_timeline() filter contains(hashtags, "bdaycelebrationscontinu"^^tt:hashtag)) => @com.slack.send();
====
# online/120586
U: send me wall street journal technology on gmail
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.wsj.get(section=enum technology)) => @com.gmail.send_email(message=$result);
====
# online/121042
U: tweet wall street journal headlines
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.wsj.get(section=enum opinions)) => @com.twitter.post(status=$result);
====
# online/121060
U: post my instagram pictures on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/121071
U: post my new instagram pictures on tumblr
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.tumblr.blog.post_picture(picture_url=picture_url);
====
# online/121082
U: post on tumblr "str:QUOTED_STRING::0:" if the temperature is more than 13 f
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.temperature.temperature()) filter value >= 13F => @com.tumblr.blog.post_text(title="str:QUOTED_STRING::0:");
====
# online/121084
U: post on tumblr if the temperature is more than 13 f
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.temperature.temperature()) filter value >= 13F => @com.tumblr.blog.post_text();
====
# online/121103
U: if someone tweets with hashtag foreverjuntas then post it on facebook
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.twitter.home_timeline() filter contains(hashtags, "foreverjuntas"^^tt:hashtag)) => @com.facebook.post(status=$result);
====
# online/121550
U: post my ig pictures on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/121552
U: ig pictures to facebook
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.facebook.post_picture(picture_url=picture_url);
====
# online/123118
U: translate new wall street journal technology posts
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.wsj.get(section=enum technology)) => @com.yandex.translate.translate(text=$result);
====
# online/127890
U: get the washington post and translate it to xhosa
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.washingtonpost.get_article()) => @com.yandex.translate.translate(target_language=null^^tt:iso_lang_code("xhosa"), text=$result);
====
# online/131798
U: if someone commits to github and the message contains "str:QUOTED_STRING::0:" then play "str:QUOTED_STRING::1:" from youtube
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.github.get_commit() filter message =~ "str:QUOTED_STRING::0:") => @com.youtube.search_videos(query="str:QUOTED_STRING::1:") => @org.thingpedia.iot.tv.play_url(url=video_url);
====
# online/141671
U: get the washington post and translate it to str:ENTITY_tt:iso_lang_code::0:
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.washingtonpost.get_article()) => @com.yandex.translate.translate(target_language="str:ENTITY_tt:iso_lang_code::0:"^^tt:iso_lang_code, text=$result);
====
# online/359917
U: if i receive a gmail and its title has "str:QUOTED_STRING::0:" in it, send the content to twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(email_id of @com.gmail.inbox() filter subject =~ "str:QUOTED_STRING::0:") => @com.twitter.post(status=$result);
====
# online/359919
U: if i send a new picture to instagram, send this new picture to facebook
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.facebook.post_picture(picture_url=picture_url);
====
# online/1448703
U: get my calendar events when i move to palo alto
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.builtin.thingengine.builtin.get_gps()) filter location == new Location("palo alto") => @org.thingpedia.icalendar.list_events();
====
# online/1448704
U: get my calendar events when i move to
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.builtin.thingengine.builtin.get_gps()) filter location == new Location(2, 2) => @org.thingpedia.icalendar.list_events();
====
# online/1520128
U: tweet my instagram pictures
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/1684068
U: share your instagram pics as native twitter photos
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures()) => @com.twitter.post_picture(caption=caption, picture_url=picture_url);
====
# online/1684094
U: send new york times breaking news to str:EMAIL_ADDRESS::0:
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.nytimes.get_front_page()) => @com.gmail.send_email(message=$result, subject=title, to="str:EMAIL_ADDRESS::0:"^^tt:email_address);
====
# online/53256259
U: when i upload a new instagram picture with hashtag 45likes, post it to twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.instagram.get_pictures() filter contains(hashtags, "45likes"^^tt:hashtag)) => @com.twitter.post_picture(picture_url=picture_url);
====
# online/55592357
U: open the window if smoke is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.air.state()) filter state == enum smoke => @org.thingpedia.iot.cover.set_openclose(state=enum open);
====
# online/55592384
U: close my shutter when the temperature is above 13 degrees
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.weather.current()) filter temperature >= 13C => @org.thingpedia.iot.cover.set_openclose(state=enum close);
====
# online/55592495
U: close my damper when the temperature is below 13 degrees
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.weather.current()) filter temperature <= 13C => @org.thingpedia.iot.cover.set_openclose(state=enum close);
====
# online/55592641
U: open my windows when smoke is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.air.state()) filter state == enum smoke => @org.thingpedia.iot.cover.set_openclose(state=enum open);
====
# online/55592649
U: open my living room window if smoke is detected
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.air.state()) filter state == enum smoke => @org.thingpedia.iot.cover(name="living room").set_openclose(state=enum open);
====
# online/57061574
U: turn off the vacuum when i enter the room
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.occupancy.occupancy()) filter state == enum detecting => @org.thingpedia.iot.vacuum.set_power(power=enum off);
====
# online/57061594
U: send an alert when i leave home and the fan is on
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.fan.state()) filter any(@org.thingpedia.builtin.thingengine.builtin.get_gps() filter !(location == $location.home)) && state == enum on;
====
# online/62110233
U: auto translate all new washington post articles to italian
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.washingtonpost.get_article()) => @com.yandex.translate.translate(target_language=null^^tt:iso_lang_code("italian"), text=title);
====
# log/54331
U: close the shades when the temperature is above 13 degrees
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.weather.current()) filter temperature >= 13defaultTemperature => @org.thingpedia.iot.cover.set_openclose(state=enum close);
====
# log/108641
U: message me on slack when a new article appears on the new york times front page
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@com.nytimes.get_front_page()) => @com.slack.send();
====
# log/158336
U: when the temperature changes turn on the air con
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: monitor(@org.thingpedia.iot.temperature.temperature()) => @org.thingpedia.iot.climate.set_hvac_mode(mode=enum cool);
====
# recording/f106519ffba8bc870e58396d5c99e032
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="6hqHJmyPmyd"^^com.icanhazdadjoke:id, text="What kind of music do mummy's like? Rap" }
C: ]];
A: What kind of music do mummy's like? Rap.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: post it on twitter
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.twitter.post(status="What kind of music do mummy's like? Rap");
====
# recording/cb7afd794d37c88bc83f658acb47808e
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="4wHB51ws4Ed"^^com.icanhazdadjoke:id, text="Last night me and my girlfriend watched three DVDs back to back. Luckily I was the one facing the TV." }
C: ]];
C: [artists] of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hey jude"
C: #[results=[
C:   { id="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2015"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:3m7V717IKZqZLW5qUIOxdD"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:1eT2CjXwFXNx6oY5ydvzKU"^^org.thingpedia.media-source:playable("Hey Jude"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:album:7BVMsDI63cIp4HzLmUYAKv"^^org.thingpedia.media-source:playable("Hey Jude: Classic Soft Rock Instrumentals on Piano"), artists=["spotify:artist:0cylxW7HGdK9xMdubw2oYW"^^org.thingpedia.media-source:artist("The O'Neill Brothers Group")] },
C:   { id="spotify:album:3X18KtOFTJO0zOWVXddfAh"^^org.thingpedia.media-source:playable("Hey Jude (feat. Kina Grannis)"), artists=["spotify:artist:470WlqN9HSRDGNaMufeHHF"^^org.thingpedia.media-source:artist("Imaginary Future")] }
C: ]];
C: sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQ3-6GAEq_qzKJ9u7LKycQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/vino-santo-bistro-redwood-city-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=393, geo=new Location(37.4868316650391, -122.227058410645, "2030 Broadway St, Redwood City, CA 94063"), phone="+16507800793"^^tt:phone_number, distance=56.460896274938605m }
C: ]];
C: [rating] of sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), rating=4 }
C: ]];
C: @com.bing.web_search(query="coronavirus")
C: #[results=[
C:   { query="coronavirus", title="Coronavirus Disease 2019 (COVID-19) | CDC", description="Coronavirus (COVID-19) Home Page. Links with this icon indicate that you are leaving the CDC website.. The Centers for Disease Control and Prevention (CDC) cannot attest to the accuracy of a non-federal website.", link="https://www.cdc.gov/coronavirus/2019-ncov/index.html"^^tt:url },
C:   { query="coronavirus", title="What Is Coronavirus? | Johns Hopkins Medicine", description="Coronaviruses are a type of virus. There are many different kinds, and some cause disease. A coronavirus identified in 2019, SARS-CoV-2, has caused a pandemic of respiratory illness, called COVID-19. What You Need to Know", link="https://www.hopkinsmedicine.org/health/conditions-and-diseases/coronavirus"^^tt:url },
C:   { query="coronavirus", title="Symptoms of Coronavirus | CDC", description="COVID-19 is caused by infection with a new coronavirus (called SARS-CoV-2), and flu is caused by infection with influenza viruses. COVID-19 seems to spread more easily than flu and causes more serious illnesses in some people. It can also take longer before people show symptoms and people can be contagious for longer. More information about ...", link="https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html"^^tt:url },
C:   { query="coronavirus", title="COVID Live Update: 146,522,088 Cases and 3,103,366 Deaths ...", description="Live statistics and coronavirus news tracking the number of confirmed cases, recovered patients, tests, and death toll due to the COVID-19 coronavirus from Wuhan, China. Coronavirus counter with new cases, deaths, and number of tests per 1 Million population. Historical data and info. Daily charts, graphs, news and updates", link="https://www.worldometers.info/coronavirus/"^^tt:url },
C:   { query="coronavirus", title="Coronavirus (COVID-19) live map tracker from Microsoft Bing", description="Track COVID-19 local and global coronavirus cases with active, recoveries and death rate on the map, with daily news and video.", link="https://bing.com/covid"^^tt:url }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="xHQucUvszd"^^com.icanhazdadjoke:id, text="To the guy who invented zero... thanks for nothing." }
C: ]];
A: To the guy who invented zero... Thanks for nothing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: throw a dice
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_random_between();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="4wHB51ws4Ed"^^com.icanhazdadjoke:id, text="Last night me and my girlfriend watched three DVDs back to back. Luckily I was the one facing the TV." }
C: ]];
C: [artists] of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "hey jude"
C: #[results=[
C:   { id="spotify:track:0aym2LBJBk9DAYuHHutrIl"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2015"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:3m7V717IKZqZLW5qUIOxdD"^^org.thingpedia.media-source:playable("Hey Jude - Remastered 2009"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:track:1eT2CjXwFXNx6oY5ydvzKU"^^org.thingpedia.media-source:playable("Hey Jude"), artists=["spotify:artist:3WrFJ7ztbogyGnTHbHJFl2"^^org.thingpedia.media-source:artist("The Beatles")] },
C:   { id="spotify:album:7BVMsDI63cIp4HzLmUYAKv"^^org.thingpedia.media-source:playable("Hey Jude: Classic Soft Rock Instrumentals on Piano"), artists=["spotify:artist:0cylxW7HGdK9xMdubw2oYW"^^org.thingpedia.media-source:artist("The O'Neill Brothers Group")] },
C:   { id="spotify:album:3X18KtOFTJO0zOWVXddfAh"^^org.thingpedia.media-source:playable("Hey Jude (feat. Kina Grannis)"), artists=["spotify:artist:470WlqN9HSRDGNaMufeHHF"^^org.thingpedia.media-source:artist("Imaginary Future")] }
C: ]];
C: sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AQ3-6GAEq_qzKJ9u7LKycQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/vino-santo-bistro-redwood-city-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["italian"^^com.yelp:restaurant_cuisine("Italian")], price=enum moderate, rating=4, review_count=393, geo=new Location(37.4868316650391, -122.227058410645, "2030 Broadway St, Redwood City, CA 94063"), phone="+16507800793"^^tt:phone_number, distance=56.460896274938605m }
C: ]];
C: [rating] of sort(distance(geo, new Location(37.4863239, -122.232523, "Redwood City, California")) asc of @com.yelp.restaurant() filter contains(cuisines, "italian"^^com.yelp:restaurant_cuisine("Italian")))[1]
C: #[results=[
C:   { id="v1oiV0N7j9n-Fm_HakYlrA"^^com.yelp:restaurant("Vino Santo Bistro"), rating=4 }
C: ]];
C: @com.bing.web_search(query="coronavirus")
C: #[results=[
C:   { query="coronavirus", title="Coronavirus Disease 2019 (COVID-19) | CDC", description="Coronavirus (COVID-19) Home Page. Links with this icon indicate that you are leaving the CDC website.. The Centers for Disease Control and Prevention (CDC) cannot attest to the accuracy of a non-federal website.", link="https://www.cdc.gov/coronavirus/2019-ncov/index.html"^^tt:url },
C:   { query="coronavirus", title="What Is Coronavirus? | Johns Hopkins Medicine", description="Coronaviruses are a type of virus. There are many different kinds, and some cause disease. A coronavirus identified in 2019, SARS-CoV-2, has caused a pandemic of respiratory illness, called COVID-19. What You Need to Know", link="https://www.hopkinsmedicine.org/health/conditions-and-diseases/coronavirus"^^tt:url },
C:   { query="coronavirus", title="Symptoms of Coronavirus | CDC", description="COVID-19 is caused by infection with a new coronavirus (called SARS-CoV-2), and flu is caused by infection with influenza viruses. COVID-19 seems to spread more easily than flu and causes more serious illnesses in some people. It can also take longer before people show symptoms and people can be contagious for longer. More information about ...", link="https://www.cdc.gov/coronavirus/2019-ncov/symptoms-testing/symptoms.html"^^tt:url },
C:   { query="coronavirus", title="COVID Live Update: 146,522,088 Cases and 3,103,366 Deaths ...", description="Live statistics and coronavirus news tracking the number of confirmed cases, recovered patients, tests, and death toll due to the COVID-19 coronavirus from Wuhan, China. Coronavirus counter with new cases, deaths, and number of tests per 1 Million population. Historical data and info. Daily charts, graphs, news and updates", link="https://www.worldometers.info/coronavirus/"^^tt:url },
C:   { query="coronavirus", title="Coronavirus (COVID-19) live map tracker from Microsoft Bing", description="Track COVID-19 local and global coronavirus cases with active, recoveries and death rate on the map, with daily news and video.", link="https://bing.com/covid"^^tt:url }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="xHQucUvszd"^^com.icanhazdadjoke:id, text="To the guy who invented zero... thanks for nothing." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_random_between()
C: #[results=[
C:   { random=3 }
C: ]];
A: 3.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: can you play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/47aa1f36f43d8342f52db10f9ce50b82
U: cool, thanks
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6dadb186b7e4adb5fb9ea3546d7e835c
U: hi
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
A: Hi, how can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/d1e3878b6fd3c673a87d3da6ccb09566
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/773cf5d6ab5788e9632e73b809482650
U: hoy
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/9f6a2e548f079d04640971f744eb2570
U: hey
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/ff640ca5fb879fcc0630d0ea25544c0a
U: play wolfgang amadeus mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang amadeus mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: previous song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_previous();
====
# recording/5bc15a4a2e8823d083946d9c4de231c6
U: play sigur ros
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("sigur ros")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6UUrUCIZtQeOf8tC0WuzRy"^^org.thingpedia.media-source:artist("Sigur Rós")) => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0yQPpUq5BJyqah5m2Q5Stt"^^org.thingpedia.media-source:playable("Hoppípolla"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07eGxuz8bL6QMsRqEe1Adu"^^org.thingpedia.media-source:playable("Svefn-g-englar"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:55gISxV37mffOW2DbSskT3"^^org.thingpedia.media-source:playable("Starálfur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1QUiA9aecDOOnf32A9ZrtW"^^org.thingpedia.media-source:playable("Untitled #3 - Samskeyti"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3OAf2iksV6MRLzqtUglTDq"^^org.thingpedia.media-source:playable("Sæglópur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2zkZGzzWOzGwi1rtWv7mhZ"^^org.thingpedia.media-source:playable("Sigur 3 (Untitled)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0YTfMKGPhWhjS9wgzWvfaf"^^org.thingpedia.media-source:playable("Glósóli"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Rr3lN1BgJtrWNAp97wizI"^^org.thingpedia.media-source:playable("Varðeldur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0S9w3jx4cO9rSBcGwB16in"^^org.thingpedia.media-source:playable("Olsen olsen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3XNjxPoUphJfUD5BShkYat"^^org.thingpedia.media-source:playable("Gobbledigook"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=49];
A: I played music by Sigur Rós on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add to playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).song() => @com.spotify.add_song_to_playlist(song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6UUrUCIZtQeOf8tC0WuzRy"^^org.thingpedia.media-source:artist("Sigur Rós")) => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0yQPpUq5BJyqah5m2Q5Stt"^^org.thingpedia.media-source:playable("Hoppípolla"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07eGxuz8bL6QMsRqEe1Adu"^^org.thingpedia.media-source:playable("Svefn-g-englar"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:55gISxV37mffOW2DbSskT3"^^org.thingpedia.media-source:playable("Starálfur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1QUiA9aecDOOnf32A9ZrtW"^^org.thingpedia.media-source:playable("Untitled #3 - Samskeyti"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3OAf2iksV6MRLzqtUglTDq"^^org.thingpedia.media-source:playable("Sæglópur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2zkZGzzWOzGwi1rtWv7mhZ"^^org.thingpedia.media-source:playable("Sigur 3 (Untitled)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0YTfMKGPhWhjS9wgzWvfaf"^^org.thingpedia.media-source:playable("Glósóli"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Rr3lN1BgJtrWNAp97wizI"^^org.thingpedia.media-source:playable("Varðeldur"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0S9w3jx4cO9rSBcGwB16in"^^org.thingpedia.media-source:playable("Olsen olsen"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3XNjxPoUphJfUD5BShkYat"^^org.thingpedia.media-source:playable("Gobbledigook"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=49];
C: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).song() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
A: What playlist do you want to add to?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(playlist);
AT: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).song() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(song=id);
U: FLow
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).song() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="flow", song=id);
====
# recording/17424146a60653a9e24c06aa063b822c
U: set my location to new york
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("new york"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(40.7306458, -73.9866136, "New York City, New York"), type=enum current)
C: #[results=[]];
A: I set your current location for you to New York City, New York.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(40.7306458, -73.9866136, "New York City, New York"), type=enum current)
C: #[results=[]];
C: @org.thingpedia.weather.current(location=new Location(40.7306458, -73.9866136, "New York City, New York"))
C: #[results=[
C:   { temperature=25C, wind_speed=3.6mps, humidity=87, cloudiness=0.8, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(40.7306458, -73.9866136, "New York City, New York") }
C: ]];
A: It is sunny today in New York City, New York and the temperature is 77 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast for tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location(40.7306458, -73.9866136, "New York City, New York"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(40.7306458, -73.9866136, "New York City, New York"), type=enum current)
C: #[results=[]];
C: @org.thingpedia.weather.current(location=new Location(40.7306458, -73.9866136, "New York City, New York"))
C: #[results=[
C:   { temperature=25C, wind_speed=3.6mps, humidity=87, cloudiness=0.8, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(40.7306458, -73.9866136, "New York City, New York") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(40.7306458, -73.9866136, "New York City, New York"))
C: #[results=[
C:   { temperature=30.3C, wind_speed=3.2mps, humidity=69.9, cloudiness=29.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-07-16T21:00:00.000Z"), location=new Location(40.7306458, -73.9866136, "New York City, New York") }
C: ]];
A: It will be cloudy tomorrow at 2:00 PM in New York City, New York and the temperature will be 86.5 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what will the weather be next week?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(40.7306458, -73.9866136, "New York City, New York"));
====
# recording/9681704ae6cc8c1bed2b974db10a1617
U: play jump
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "jump" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playable() filter id =~ "jump")[1] => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7N3PAbqfTjSEU1edb2tY8j"^^org.thingpedia.media-source:playable("Jump - 2015 Remaster"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]];
C: (@org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playable() filter id =~ "jump")[1] => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7N3PAbqfTjSEU1edb2tY8j"^^org.thingpedia.media-source:playable("Jump - 2015 Remaster"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Jump - 2015 Remaster on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play tony's playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="org.thingpedia.media-source-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "tony's playlist" => @org.thingpedia.media-player(id="org.thingpedia.media-player-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/66af0a9f06e492629278df5e75483c65
U: lol
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), geo=new Location(37.4565, -122.229, "Rite Aid, 340 Woodside Plaza, Redwood City, CA, 94061"), link="https://www.riteaid.com/pharmacy/covid-qualifier"^^tt:url, availability_rate=1, zip_code="94062" }
C: ]];
C: @org.thingpedia.covid-vaccine.mark_valid(appointment="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), validity=false)
C: #[results=[]];
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="mukesh:765866102:1624194464066"^^org.thingpedia.covid-vaccine:vaccine_appointment("PharmaCA, 871 Santa Cruz Ave, Menlo Park"), geo=new Location(37.4498999, -122.1856139, "PharmaCA, 871 Santa Cruz Ave, Menlo Park, 871 Santa Cruz Ave, Menlo Park, CA, 94025"), link="https://www.pharmacarx.com/pharmacy-locator/"^^tt:url, availability_rate=0, zip_code="94062" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mbpbapbhiyd"^^com.icanhazdadjoke:id, text="Did you hear about the bread factory burning down? They say the business is toast." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool)
C: #[results=[
C:   { reply="Cool!", question=enum positive_emotion_cool }
C: ]];
A: Cool!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what else can you do
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), geo=new Location(37.4565, -122.229, "Rite Aid, 340 Woodside Plaza, Redwood City, CA, 94061"), link="https://www.riteaid.com/pharmacy/covid-qualifier"^^tt:url, availability_rate=1, zip_code="94062" }
C: ]];
C: @org.thingpedia.covid-vaccine.mark_valid(appointment="vaccinespotter:7384051:1622655391072"^^org.thingpedia.covid-vaccine:vaccine_appointment("Rite Aid"), validity=false)
C: #[results=[]];
C: @org.thingpedia.covid-vaccine.appointment(zip_code="94062")
C: #[results=[
C:   { id="mukesh:765866102:1624194464066"^^org.thingpedia.covid-vaccine:vaccine_appointment("PharmaCA, 871 Santa Cruz Ave, Menlo Park"), geo=new Location(37.4498999, -122.1856139, "PharmaCA, 871 Santa Cruz Ave, Menlo Park, 871 Santa Cruz Ave, Menlo Park, CA, 94025"), link="https://www.pharmacarx.com/pharmacy-locator/"^^tt:url, availability_rate=0, zip_code="94062" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="mbpbapbhiyd"^^com.icanhazdadjoke:id, text="Did you hear about the bread factory burning down? They say the business is toast." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum positive_emotion_cool)
C: #[results=[
C:   { reply="Cool!", question=enum positive_emotion_cool }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/d992333d201d1699664f5bedb2766811
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play the playlist classics
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classics" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "classics")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: resume playback
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play();
====
# recording/b6151a92051749f93de5c01ffb5fd055
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/e6299acfdcf532ffb56e69283b3b25c6
U: How is it going?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Who are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where is almond?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
A: My creators are mostly at Stanford. I'm an open-source assistant in the cloud.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the weather in ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("iss"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
A: It is cloudy today in Nummi, Turku and the temperature is 70.7 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="iss");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
A: I found International Space Station | NASA.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is elon?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="elon");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
A: I found Elon University / Home.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is bezos?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="bezos");
====
# recording/42e165d09d78df19b10b96c8db1de5bd
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me ajoke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
A: Want to hear a chimney joke? Got stacks of em! First one's on the house.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/6fb1627331a6193db3d3f67b84b3acb2
U: Have a great evening
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
C: $dialogue @org.thingpedia.dialogue.transaction.greet;
A: Hello! How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_greet;
U: Bye
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6270a6a9cc4407d5392109a0552d28a6
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="BQnyImOCIBd"^^com.icanhazdadjoke:id, text="How do hens stay fit? They always egg-cercise!" }
C: ]];
A: How do hens stay fit? They always egg-cercise!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/385434ebca941a151090cd39632e803f
U: tell me the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(46.6166686, -64.1084895, "Alaska, PE"))
C: #[results=[
C:   { temperature=22.5C, wind_speed=5.1mps, humidity=83.8, cloudiness=4.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(46.6166686, -64.1084895, "Alaska, PE") }
C: ]];
A: Where are you now?
A: It is sunny today in Alaska, PE and the temperature is 72.5 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: how's the weather in tokyo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("tokyo"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(46.6166686, -64.1084895, "Alaska, PE"))
C: #[results=[
C:   { temperature=22.5C, wind_speed=5.1mps, humidity=83.8, cloudiness=4.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(46.6166686, -64.1084895, "Alaska, PE") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(35.6821116, 139.7656744, "Tōkyō, Tokyo"))
C: #[results=[
C:   { temperature=25.9C, wind_speed=0.6mps, humidity=85.7, cloudiness=47.7, fog=0, status=enum raining, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=5;content_type=image/png"^^tt:picture, location=new Location(35.6821116, 139.7656744, "Tōkyō, Tokyo") }
C: ]];
A: It is raining today in Tōkyō, Tokyo and the temperature is 78.6 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: remind me to do something at 4:24
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[set_time($now, new Time(4, 24))]) => @org.thingpedia.builtin.thingengine.builtin.say();
====
# recording/ba1a32fc3ab0440eba0dbb56584bc87e
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=26.3C, wind_speed=2.8mps, humidity=42.9, cloudiness=3.1, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 79.3 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/51b91c29082d36c7cf6d739ebe7726c4
U: hi there
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/e9c10f4e27f9a41beb9eb4d9098d4ec4
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="lyPZgVn3Le"^^com.icanhazdadjoke:id, text="What did the ocean say to the shore? Nothing, it just waved." }
C: ]];
A: What did the ocean say to the shore? Nothing, it just waved.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/66fb5badb46140b801e4fa90d3b3979d
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
A: "I'm sorry." "Hi sorry, I'm dad".
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="7wciy59MJe"^^com.icanhazdadjoke:id, text="What’s Forest Gump’s Facebook password? 1forest1" }
C: ]];
A: What’s Forest Gump’s Facebook password? 1forest1.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="7wciy59MJe"^^com.icanhazdadjoke:id, text="What’s Forest Gump’s Facebook password? 1forest1" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ElbaF6wHlyd"^^com.icanhazdadjoke:id, text="I cut my finger cutting cheese. I know it may be a cheesy story but I feel grate now." }
C: ]];
A: I cut my finger cutting cheese. I know it may be a cheesy story but I feel grate now.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="Yg3orWS7wkb"^^com.icanhazdadjoke:id, text="\"I'm sorry.\" \"Hi sorry, I'm dad\"" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="7wciy59MJe"^^com.icanhazdadjoke:id, text="What’s Forest Gump’s Facebook password? 1forest1" }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ElbaF6wHlyd"^^com.icanhazdadjoke:id, text="I cut my finger cutting cheese. I know it may be a cheesy story but I feel grate now." }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="oOR7hFdx5Ed"^^com.icanhazdadjoke:id, text="I wouldn't buy anything with velcro. It's a total rip-off." }
C: ]];
A: I wouldn't buy anything with velcro. It's a total rip-off.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/b4c1221e21e07f28b35113362e93f0a7
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 66.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=19.4C, wind_speed=1mps, humidity=61.5, cloudiness=24.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="baFQZv4w5wc"^^com.icanhazdadjoke:id, text="My New Years resolution is to stop leaving things so late." }
C: ]];
A: My New Years resolution is to stop leaving things so late.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/0d86db403a22912b0bd13c4d6b01c63e
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="V8hFQCY8Unb"^^com.icanhazdadjoke:id, text="Where do you take someone who has been injured in a Peek-a-boo accident? To the I.C.U." }
C: ]];
A: Where do you take someone who has been injured in a Peek-a-boo accident? To the I.C.U.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: more
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/5599bb12e4be6d6ae1c28a242a4cb992
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.1C, wind_speed=1.8mps, humidity=85.6, cloudiness=83.6, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="N7pWvcxsHBd"^^com.icanhazdadjoke:id, text="What happens to a frog's car when it breaks down? It gets toad." }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=16.1C, wind_speed=1.8mps, humidity=85.6, cloudiness=83.6, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 61 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/4f794aaaba91c72961cdb49ab8f932de
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.8C, wind_speed=2.9mps, humidity=52.5, cloudiness=10.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 74.8 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what time is it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.8C, wind_speed=2.9mps, humidity=52.5, cloudiness=10.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(0, 18, 38) }
C: ]];
A: Right now, it's 5:18 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/b4c1325f79f3df84e530499bef121e30
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5c008f9f9a2e4061afe303e6ea867395
U: play wolfgang a mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang a mozart")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/168924dbacf30e68e8ed7a1f35120bf6
U: Ask Bing for a quote from William Shakespeare.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="william shakespeare");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.bing.web_search(query="william shakespeare")
C: #[results=[
C:   { query="william shakespeare", title="William Shakespeare - Wikipedia", description="William Shakespeare (bapt. 26 April 1564 – 23 April 1616) was an English playwright, poet, and actor, widely regarded as the greatest writer in the English language and the world's greatest dramatist. He is often called England's national poet and the \"Bard of Avon\" (or simply \"the Bard\"). His extant works, including collaborations, consist of some 39 plays, 154 sonnets, three long narrative ...", link="https://en.wikipedia.org/wiki/William_Shakespeare"^^tt:url },
C:   { query="william shakespeare", title="William Shakespeare Biography", description="William Shakespeare was a renowned English poet, playwright, and actor born in 1564 in Stratford-upon-Avon.His birthday is most commonly celebrated on 23 April (see When was Shakespeare born), which is also believed to be the date he died in 1616. Shakespeare was a prolific writer during the Elizabethan and Jacobean ages of British theatre (sometimes called the English Renaissance or the Early ...", link="https://www.shakespeare.org.uk/explore-shakespeare/shakespedia/william-shakespeare/william-shakespeare-biography/"^^tt:url },
C:   { query="william shakespeare", title="About William Shakespeare | Academy of American Poets", description="William Shakespeare was born on April 23, 1564, in Stratford-upon-Avon. The son of John Shakespeare and Mary Arden, he was probably educated at the King Edward VI Grammar School in Stratford, where he learned Latin and a little Greek and read the Roman dramatists. At eighteen, he married Anne Hathaway, a woman seven or eight years his senior.", link="https://poets.org/poet/william-shakespeare"^^tt:url },
C:   { query="william shakespeare", title="William Shakespeare: 20 Facts, 37 Plays, 375 Poems, 100 ...", description="William Shakespeare wrote at least 37 plays that scholars know of, with most of them labeled is comedies, histories, or tragedies. The earliest play that is directly attributed to Shakespeare is the trilogy of \"King Henry VI,\" with Richard III also being written around the same time, between 1589 and 1591.", link="https://www.williamshakespeare.net/"^^tt:url },
C:   { query="william shakespeare", title="The Complete Works of William Shakespeare", description="Welcome to the Web's first edition of the Complete Works of William Shakespeare. This site has offered Shakespeare's plays and poetry to the Internet community since 1993. For other Shakespeare resources, visit the Mr. William Shakespeare and the Internet Web site. The original electronic source for this server was the Complete Moby(tm ...", link="http://shakespeare.mit.edu/"^^tt:url }
C: ]];
A: I found William Shakespeare - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: What is the meaning of the word of judicate?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @info.owlbot.get(word="judicate");
====
# recording/64d08ac321c0e85f0b7a895d4bb24468
U: play baba riley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "baba riley" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Baba O'Riley on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/655e9cb921165bcbde06647eaf0ed9e8
U: play mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music by Baby Mozart on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play wolfgang mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/bd2f608983fc6143e47f9a1dae5626f1
U: play the artist the cure on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="e4a3f879b862b4d8273c96aca085c674b5d060ec", display="tE-MBP", playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=35];
A: I played music by The Cure on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5a5c1909fab47a4593c937b17646a71f
U: play mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:32QzlLbdI90xZtgtHorqzB"^^org.thingpedia.media-source:artist("Baby Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0Kib1nl18LNb3nZfE1JvsM"^^org.thingpedia.media-source:playable("Twinkle Little Star (with Ocean Waves)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1tphFOMsnIiCW0vLeqmved"^^org.thingpedia.media-source:playable("Moonlight Sonata"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0KeDpZwfV153LWLOLVqIay"^^org.thingpedia.media-source:playable("Brahm Baby Lullaby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:6pP8yDg5Y4xU5eubMcWNkH"^^org.thingpedia.media-source:playable("Hush Little Baby"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1Y0sZjZo7hJf3o1vkM2W90"^^org.thingpedia.media-source:playable("Canon in D"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music by Baby Mozart on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/d0a27ef7d75fd1709b690b1d908188b5
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5CZ40GBx1sQ9agT82CLQCT"^^org.thingpedia.media-source:playable("traitor"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/836eb051bba5f2d095ddc908e72c93a7
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/aaa33ba9896cec36ee8da57640c6fb5d
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/af632248fa79fe682e347b9dc89a6150
U: play wolfgang amadeus mozart
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("wolfgang amadeus mozart")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music by Wolfgang Amadeus Mozart on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: previous song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:4NJhFmfw43RLBLjQvxDuRS"^^org.thingpedia.media-source:artist("Wolfgang Amadeus Mozart")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4h3B0bJAyl2GCUY9dgHvJ0"^^org.thingpedia.media-source:playable("12 Variations on \"Ah, vous dirai-je maman\", K. 265"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4dYeS61BGznDr8gVFaRy0p"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3jyFGiDfRVsrNVCxrESxLI"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: I. Allegro"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:63cvaTiNnsEAOPeUIyAZMy"^^org.thingpedia.media-source:playable("Divertimento in F Major, K. 138 \"Salzburg Symphony No. 3\": II. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2jl00YBXk8HIXvA0gmit1h"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: III. Presto"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1MLifYxP8UDnfv9mRt3qiQ"^^org.thingpedia.media-source:playable("Serenade in G, K.525 \"Eine kleine Nachtmusik\": 2. Romance (Andante)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4H82O0Eb4c8emw5IeL3jo5"^^org.thingpedia.media-source:playable("Divertimento in B-Flat Major, K. 254: I. Allegro assai"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1kapunxYsrU5vXPMcCdBfY"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: IV. Andante"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7BebEyL3FWbQ5BSyBEnpw2"^^org.thingpedia.media-source:playable("Divertimento in E-Flat Major, K. 563: III. Menuetto (Allegretto)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0iiWFp5k0VPJdAigUezMth"^^org.thingpedia.media-source:playable("Divertimento No. 1 in D Major, K. 136: II. Andante"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[]];
A: I played the previous song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause();
====
# recording/6401acf784b0b87369027e16b7a747e1
U: play michael jackson
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("michael jackson")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3fMbdgg4jU18AjLCKBhRSm"^^org.thingpedia.media-source:artist("Michael Jackson")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5ChkMS8OtdzJeqyybCc9R5"^^org.thingpedia.media-source:playable("Billie Jean"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:1OOtq8tRnDM8kG2gqUPjAj"^^org.thingpedia.media-source:playable("Beat It"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:7oOOI85fVQvVnK5ynNMdW7"^^org.thingpedia.media-source:playable("Rock with You - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:46eu3SBuFCXWsPT39Yg3tJ"^^org.thingpedia.media-source:playable("Don't Stop 'Til You Get Enough"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:2bCQHF9gdG5BNDVuEIEnNk"^^org.thingpedia.media-source:playable("Smooth Criminal - 2012 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3cybT6ri039rCxZkbsa6IR"^^org.thingpedia.media-source:playable("Rockin' Robin"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5lA3pwMkBdd24StM90QrNR"^^org.thingpedia.media-source:playable("P.Y.T. (Pretty Young Thing)"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:0sKlV58cODrjxGFOyf9IXY"^^org.thingpedia.media-source:playable("The Way You Make Me Feel - 2012 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:4jnFqNWeJCeCRHc4HCdxfd"^^org.thingpedia.media-source:playable("Remember the Time"), __device="XXXXXXXX"^^tt:device_id },
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:5lWFrW5T3JtxVCLDb7etPu"^^org.thingpedia.media-source:playable("Bad - 2012 Remaster"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=33];
A: I played music by Michael Jackson on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
====
# recording/468d01d54f25e9216f9ce410e18df943
U: play travis playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "travis" => @org.thingpedia.media-player.play(playable=id);
====
# recording/41abf79a945714fe511008497bc629d5
U: Play Sandstorm by Darude
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("darude")) && id =~ "sandstorm" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:0LhHRmSd1EYM5QdNeNnCoQ"^^org.thingpedia.media-source:artist("Darude")) && id =~ "sandstorm")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="10a83fba23ca39d9d843c96f868d452729b18665", display="Nicks room", playable="spotify:track:24CXuh2WNpgeSYUOvz14jk"^^org.thingpedia.media-source:playable("Sandstorm - Radio Edit"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Sandstorm - Radio Edit on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: configure home assistant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.configure(device=null^^tt:device("home assistant"));
====
# recording/218ff06ec9f035bb73287fb801635ed6
U: play yellow submarine
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "yellow submarine" => @org.thingpedia.media-player.play(playable=id);
====
# recording/e2ec417c6984b92092c336ab46a21048
U: what's the latest album by taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.album() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")))[1];
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1]
C: #[results=[
C:   { id="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], release_date=new Date("2021-04-09T00:00:00.000Z"), popularity=80, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: The most recent album is Fearless (Taylor's Version). It is an album by Taylor Swift.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: play it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1]
C: #[results=[
C:   { id="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], release_date=new Date("2021-04-09T00:00:00.000Z"), popularity=80, __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:album("Fearless (Taylor's Version)"))
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:4hDok0OAJd57SGIT8xuWJH"^^org.thingpedia.media-source:playable("Fearless (Taylor's Version)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played a song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0c293c5202fd7fe0500ac3c8f570260d
U: what's the weather in san mateo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("san mateo"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.5439684, -122.306678, "San Mateo, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=2mps, humidity=47.9, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.5439684, -122.306678, "San Mateo, California") }
C: ]];
A: It is sunny today in San Mateo, California and the temperature is 20.6 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.5439684, -122.306678, "San Mateo, California"))
C: #[results=[
C:   { temperature=20.6C, wind_speed=2mps, humidity=47.9, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.5439684, -122.306678, "San Mateo, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="scaFQfFlqjb"^^com.icanhazdadjoke:id, text="My dentist is the best, he even has a little plaque!" }
C: ]];
A: My dentist is the best, he even has a little plaque!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5e26b0a1fb1732d66d33e730f1f79837
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a68abd02b17b67becd4084473e3cb639
U: play 8 mile
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "8 mile" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "8 mile")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5Z01UMMf7V1o0MzF86s6WJ"^^org.thingpedia.media-source:playable("Lose Yourself - From \"8 Mile\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Lose Yourself - From "8 Mile" Soundtrack on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/424c339660ae4d4c19cc636d26a49e89
U: show me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[
C:   { id="4311178050977928700"^^com.smartnews:article, link="https://www.space.com/gravitational-wave-observatory-moon-concept/"^^tt:url, title="We could hunt gravitational waves on the moon if this wild idea takes off", date=new Date("2021-07-28T11:00:02.000Z"), source="Space", author="Mike Wall", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311178050977928563.mp3"^^tt:url, content="Humanity's return to the moon could open up new windows on the universe.NASA is working to establish a permanent human presence on and around the moon by the end of the 2020s, via a program known as Artemis. That presence may eventually include radio telescopes on the moon's exceptionally quiet far side — and, perhaps, even more ambitious off-Earth science facilities.For example, a recent study makes the case for building a gravitational-wave observatory on the moon. Hunting gravitational waves: The LIGO laser interferometer project in photos Gravitational waves are ripples in space-time created by the acceleration of massive objects. They were predicted by Albert Einstein's general theory of relativity in 1915 and first directly detected a century later, by the Laser Interferometer Gravitational-Wave Observatory (LIGO) consortium.LIGO has detectors at two sites, one in Louisiana and one in Washington state. Each detector is an L-shaped structure with arms 2.5 miles (4 kilometers) long, with a laser at the center of the array. The laser shines light down each arm, and mirrors reflect the light back. If the light from one arm comes back a bit late, it's evidence of a possible gravitational-wave-induced distortion.The LIGO team has detected dozens of gravitational-wave events to date, most of them caused by mergers between two black holes. But this is exacting work, and our noisy, active Earth makes spotting signals tough.The moon, on the other hand, is an exceptionally quiet place, the new study notes.\"The moon offers an ideal backdrop for the ultimate gravitational wave observatory, since it lacks an atmosphere and noticeable seismic noise, which we must mitigate at great cost for laser interferometers on Earth,\" co-author Avi Loeb, an astronomer at Harvard University, said in a statement. \"A lunar observatory would provide unprecedented sensitivity for discovering sources that we do not anticipate and that could inform us of new physics,\" Loeb said. \"GLOC could be the jewel in the crown of science on the surface of the moon.\"Lunar timeline: Humanity's explorations of the moon \"GLOC\" is short for the Gravitational-wave Lunar Observatory for Cosmology, the name Loeb and study lead author Karan Jani propose for the moon facility. GLOC would be huge compared to LIGO and other detectors on Earth, featuring arms 25 miles (40 km) long. And it would be incredibly sensitive, capable of spotting gravitational-wave events in nearly 70% of the observable volume of the universe, the researchers calculated.\"By tapping into the natural conditions on the moon, we showed that one of the most challenging spectrum of gravitational waves can be measured better from the lunar surface, which so far seems impossible from Earth or space,\" Jani, an astrophysicist at Vanderbilt University in Tennessee, said in the same statement.GLOC is just an idea at the moment, but Jani and Loeb said they hope to develop a pathfinder mission on the moon that would test GLOC's required technologies in the coming years. And if GLOC or something like it does end up getting built, it will pay scientific dividends for decades to come, the researchers said.\"Unlike space missions that last only a few years, the great investment benefit of GLOC is it establishes a permanent base on the moon from where we can study the universe for generations, quite literally the entirety of this century,\" Jani said in the statement.The new study was published last month in the Journal of Cosmology and Astroparticle Physics. You can read it for free at the online preprint site arXiv.org. Mike Wall is the author of \"Out There\" (Grand Central Publishing, 2018; illustrated by Karl Tate), a book about the search for alien life. Follow him on Twitter @michaeldwall. Follow us on Twitter @Spacedotcom or Facebook." },
C:   { id="4311219825989915600"^^com.smartnews:article, link="https://www.kansas.com/news/coronavirus/article253084593.html"^^tt:url, title="Wichita hospital system mandates COVID vaccines for workers amid growing ICU numbers", date=new Date("2021-07-28T16:46:38.000Z"), source="The Wichita Eagle", author="Dion Lefler", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311219825989915471.mp3"^^tt:url, content="Wichita’s largest hospital system, Ascension Via Christi, is mandating that all employees be vaccinated for COVID-19 or step away from their jobs, amid growing concern over intensive-care occupancy and spread of the Delta variant of the coronavirus. “Ascension will require that all associates be vaccinated against COVID-19, whether or not they provide direct patient care, and whether they work in our sites of care or remotely,” said a statement issued by Ascension, parent company of Via Christi. “This includes associates employed by subsidiaries and partners; physicians and advanced practice providers, whether employed or independent; and volunteers and vendors entering Ascension facilities.” All workers, excluding a few with medical or religious exemptions, will have to complete the vaccination regimen by Nov. 12. “Tens of thousands of Ascension associates have already been vaccinated with the available vaccines, as have millions of people across the country and the world,” the statement said. “But we must do more to overcome this pandemic as we provide safe environments for those we serve.” Ascension employees are already required to be vaccinated with the annual flu shots and the timing of implementing the COVID vaccine requirement will align with that schedule, Ascension said. Delta variant and ICU As the more contagious Delta variant of COVID becomes a larger issue, the hospital has seen its ICU occupancy rising, hospital officials said. “COVID-19 volumes, both in our medical-surgical and intensive care units have more than doubled in the past several weeks and hospital volumes are up overall over what we see in a typical summer,” said a statement by Kevin Strecker, hospital president and chief operating officer. “As a result, our hospitals continue to remain relatively full on a daily basis.” There are several reasons for the influx of patients, said Kris Hill, vice president of nursing at Via Christi St. Francis hospital. “It’s not one thing. It’s everything,” Hill said in an e-mail. “In addition to patients infected by COVID-19, summer is trauma season, so we are seeing a significant number of patients with traumatic injuries, respiratory issues related to the high humidity as well as RSV in children, and patients coming in for routine and cardiac procedures, some of which may be related to patients having delayed care because of the pandemic.” However, the hospital is not so crowded that officials there are encouraging people to delay medical attention. “As a community, we collectively continue to be able to care for the critically ill patients coming to our hospitals and people should continue to seek the care they need without delay,” Strecker said. On Monday, there were 12 COVID-infected patients in the ICU, compared with six two weeks ago. And that increase comes amid a burst of admissions to the medical and surgical ICU. The Monday number there was 53, up from 20 two weeks ago, including some patients catching up on procedures that were put off last year when COVID rates were high and vaccines unavailable. Contributing: Amy Renee Leiker of The Eagle" },
C:   { id="4311294915339356000"^^com.smartnews:article, link="https://www.fresnobee.com/news/coronavirus/article253087468.html"^^tt:url, title="Fresno church cancels youth activities after COVID exposures at summer camp", date=new Date("2021-07-28T21:45:46.000Z"), source="The Fresno Bee", author="Tim Sheehan", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294915339356334.mp3"^^tt:url, content="A Fresno church that sent hundreds of children to a mountain summer camp last week has canceled its youth activities after some of the attendees were sent home early after being exposed to COVID-19 during their stay. Brad Bell, lead pastor at The Well Community Church with locations in north Fresno and Clovis, told The Bee that more than 450 people from the church – a combination of students in sixth through 12th grades, along with adult leaders – attended a weeklong summer camp session at Hume Lake Christian Camp in eastern Fresno County. About 25 to 30 of the campers “were contacted and sent home for various reasons” in the latter part of last week, Bell said. That included individuals who showed coronavirus symptoms or tested positive for the virus. It also included people who indicated through contact tracing that they were in proximity to someone who had symptoms or tested positive. “Many of our students who were sent home were neither positive nor symptomatic but rather, in an abundance of caution, were caught up in the contact tracing process and were sent home to ensure the safety of the rest of the camp,” Bell said in an e-mail to The Bee. Concerns about COVID-19 cases at the camp arose last week after a San Francisco television station reported that at least three Bay Area children who were there tested positive for the virus and were sent home early to minimize exposure of other campers. A representative for the Hume Lake organization – which also runs camps in San Bernardino County, San Diego and in Massachusetts – said the camp in Fresno County hosts about 2,000 campers in a given week, with facilities and activities spread out over 365 acres. “It’s not like all these people are cornered under a bubble,” the representative told The Bee. Camps for middle-school and high school students are in different locations on the property. ‘The individual camps run weekly, so the kids who were at the camp last week are no longer there this week,” the representative added. “As of now, there are no COVID cases among campers at Hume Lake. Last week that obviously wasn’t the case.” The camp’s representative said she had no information on the number of campers affected last week, either symptomatic, had positive tests or were exposed to others who were infected. The ripple effects from the multiple camp cases – which officials from the Fresno County Department of Public Health stopped short of calling an “outbreak” last week – was being felt at The Well, Bell said. “I am not aware of the number of students or adult leaders (from The Well) that were impacted in any negative way from COVID positivity,” he told The Bee. But, he added, “in an abundance of caution, we have canceled all youth events for the week and are praying for a speedy recovery and a healthy return to normalcy for all involved.” Bell dismissed as “highly inflated” a figure offered by a church member that 80 or more children were sent home from the camp. “Our records indicate a third of that number” were sent home, he said. Cases defy precautions Hume Lake’s representative said the infections that arose last week came despite numerous precautions that were put in place this summer to minimize the risk of coronavirus infections among campers or staff. In addition to isolating and sending home campers who became sick or tested positive during their stay, the representative said, “Hume immediately reached out to parents of children exposed to positive cases” and sent those children home as well. The organization’s statement of COVID-19 precautions requires every camper, counselor and staff member to show proof of vaccination for COVID-19 or proof of a negative coronavirus test three days before they arrive at the camp. The representative said those who are unable to upload their documentation to the camp’s online screening system – where they are verified by the camp medical staff – receive a rapid antigen test for COVID-19 when they arrive and must test negative before they can enter the camp. The Hume organization’s COVID-19 preparedness and response plan also indicates that campers and staff will receive daily temperature screenings; staff temperatures are to be taken and recorded at the start of every shift. The plan also calls for all campers and staff to be screened for symptoms of a potential coronavirus infection, including cough, shortness of breath or breathing difficulty, chills, muscle/body aches, headache, sore throat, loss of taste or smell, nausea or vomiting, diarrhea, known close contact with a confirmed COVID-19 person, or a fever of 100.4 or higher. Campers are told that masks are required whenever they are indoors except while dining or sleeping in their assigned bunk. Campers are also encouraged to follow social-distancing guidelines when possible. The plan also calls for camp staff to sanitize areas used by a sick camper before the next use. “The camp immediately did targeted cleaning and disinfecting of those areas,” the camp representative said, “in addition to the already-enhanced cleaning in place.” Bell said he was “grateful for the health screening and safety protocols put in place by Hume to create a safe and secure camping environment,” “Every family understood the potential risk involved with sending their students to camp and willingly participated despite the relative risk,” he added. While he said he was unaware of any positive COVID cases among The Well’s campers, “I am aware of the bast array of young people who enjoyed a glimpse of normalcy in the midst of a very difficult year.” Bell added that the church was “diligent to inform parents of any exposure and invited them to come and take their child home as soon as possible” from the camp. “We are encouraging all involved to follow the CDC guidelines and protocols regarding self-care and self-quarantine” Bell said in response to a question from The Bee about the potential spread of the virus within the congregation at the church’s in-person services. “All families we have contacted are faithfully caring for their students and following the prescribed health protocols.” As a church, “The Well does not promote or discourage” vaccinations for COVID-19 among its members, Bell said. “Vaccine awareness is not our primary mission. Rather, our purpose is to help people connect to God and to each other in every neighborhood.” He added that “we encourage every individual to do their research, get informed, and prayerfully consider how they would like to proceed” with vaccination. The Well closed its doors in March 2020 and switched to offering online worship services for its members in the early stages of the COVID-19 pandemic. As the year progressed, however, the church joined several other large Fresno-area churches in resuming in-person services, defying state closure orders put in place last fall to prevent the spread of the virus among large indoor gatherings. The closure order and capacity limits for in-person services at churches were later overturned in court. Bee reporter Thaddeus Miller contributed to this report." },
C:   { id="4311094280421639000"^^com.smartnews:article, link="https://www.huffpost.com/entry/michael-fanone-voicemail_n_6100e81be4b0fd216c20006f"^^tt:url, title="Cop Shares Voicemail Threat He Received During Testimony About U.S. Capitol Riot", date=new Date("2021-07-28T08:29:12.000Z"), source="HuffPost", author="Josephine Harvey", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311094280421639029.mp3"^^tt:url, content="A Washington, D.C., police officer who was beaten and shocked during the U.S. Capitol riot on Jan. 6 shared a voicemail he received from a Donald Trump supporter on Tuesday.In an interview with CNN’s Don Lemon, officer Michael Fanone played a message that he said was left on his phone while he was testifying on Capitol Hill earlier in the day about what he experienced during the insurrection. “You want an Emmy? And Oscar? What are you trying to go for here?” the male caller asked. “You’re so full of shit,” he added, before using a homophobic slur and several profanities.Listen to the full message below:DC Metropolitan Police Officer Michael Fanone joins @donlemon in the studio tonight after his testimony to the Select Committee investigating January 6th.Hear the shocking voicemail he received during his testimony – and a warning – the language is graphic. Listen: pic.twitter.com/U9AqFamzzr— Don Lemon Tonight (@DonLemonTonight) July 28, 2021Fanone said his immediate reaction to the voicemail was: “This is what happens to people who tell the truth in Trump’s America.”On Jan. 6, Fanone was shocked repeatedly with a stun gun and beaten with metal pipes while defending the Capitol from the mob seeking to overthrow the certification of Joe Biden’s election win. He suffered a heart attack and a concussion and has since been living with a traumatic brain injury and post-traumatic stress disorder.A leading advocate for an investigation into Jan. 6, Fanone has been critical of Republicans peddling revisionist history about what took place. Speaking out about the riot and calling out the people who deny it has made him a regular target of right-wing critics.Fanone has also drawn the ire of Fox News personalities Tucker Carlson and Laura Ingraham, both of whom mocked him on the air Tuesday night. Ingraham even handed out mock awards for best performances from participants in the House select committee hearing, including to several police officers who were injured in the attack.Related...'Partisan Pageantry': Republican Senators Dismiss Emotional Jan. 6 Hearing7 Key Takeaways From The First Day Of Jan. 6 Commission Testimony'Disgraceful': Police Officers Slam GOP Denials About Jan. 6 In Searing Testimony var _comscore = _comscore | | [ ]; _comscore.push({ c1: “2” , c2: “1000009” }); (function() { var s = document.createElement(“script”), el = document.getElementsByTagName(“script”)[0]; s.async = true; s.src = (document.location.protocol == “https:” ? “https://sb” : “http://b”) + “.scorecardresearch.com/beacon.js”; el.parentNode.insertBefore(s, el); })(); <img src=”https://sb.scorecardresearch.com/p?c1=2&c2=1000009&cv=2.0&cj=1” /> window.clientEventTracking = { context_data: { context_page_id: \"6100e81be4b0fd216c20006f\", context_page_type: \"buzz\", destination: \"huffpost\", event_uri: \"https://www.huffpost.com/entry/michael-fanone-voicemail_n_6100e81be4b0fd216c20006f\", page_edition: \"en-us\", referrer_uri: \"http://www.smartnews.com\", source: \"web_huffpost_other\", type: \"web_pageview\" }, endpoint: \"https://pixiedust.buzzfeed.com\", }; (function(){var s,e;s=document.createElement(\"script\"),e=document.getElementsByTagName(\"script\")[0], s.async=!0,s.src=\"https://www.buzzfeed.com/static/js/client-event-tracking/event.min.js\", e.parentNode.insertBefore(s,e);})();" },
C:   { id="4311268331547002400"^^com.smartnews:article, link="https://www.rawstory.com/proud-boy-arrested/"^^tt:url, title="Feds nab Virginia Proud Boy who charged at cops while wielding a 'large stick' during Capitol riot", date=new Date("2021-07-28T20:00:04.000Z"), source="Raw Story", author="Brad Reed", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311268331547002236.mp3"^^tt:url, content="A member of the Proud Boys who was caught on camera charging at police during the Capitol riot has been arrested and charged with multiple offenses.The U.S. Attorney's Office for the District of Columbia announcedU.S. Attorney's Office for the District of Columbia announced on Wednesday that Virginia resident James Russell Davis has been charged with assaulting, resisting or impeding certain officers and obstruction of law enforcement during civil disorder.The criminal complaint filed against Davis alleges that video footages shows him wielding what appears to be a \"large stick\" that he brandished while charging at officers during the riots.The complaint claims that Davis can be seen charging \"up the West Front Terrace stairs\" of the Capitol building and \"toward the Officers wielding the large stick/pole like a baseball bat in a pose consistent with a person preparing to strike with the object.\"The footage cited in the complaint also shows Davis \"pushing and screaming\" at a police officer, and also \"pushing the officers hands down\" as they try to stop him from advancing toward the building.Federal investigators say that Davis was not shy about using his status as a former Marine to justify his actions during the riots.\"\"I fought for this country, I fought for this country, what the f*ck are you doing, I fought for this country, I fought for this country, I'm a military f*cking police, I'm a military police,\" he shouted, according to footage reviewed by law enforcement officials." },
C:   { id="4311287856317345300"^^com.smartnews:article, link="https://www.latimes.com/california/story/2021-07-28/usc-finds-racial-profiling-stronger-oversight-of-campus-safety-officers-urged"^^tt:url, title="USC finds racial profiling with campus security, urges more oversight", date=new Date("2021-07-28T21:16:39.000Z"), source="Los Angeles Times", author="Teresa Watanabe", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311287856317345034.mp3"^^tt:url, content="The Tommy Trojan statue at USC. The university unveiled recommendations to heighten scrutiny of campus safety officers. (Al Seib/Los Angeles Times) More than a year after the murder of George Floyd ignited national protests over policing, USC on Wednesday unveiled recommendations to heighten scrutiny of campus safety officers after a broad review found troubling instances of racial profiling and a pervasive sense of \"two USCs,\" where not everyone was treated with equal fairness and respect. The report found that 31.7% of 1,050 stops by campus officers in 2019-20 involved Black people, although they made up just 5.5% of students, 8.8% of staff, 3% of faculty and 12% of neighbors in the University Park area. Latinos were also disproportionately stopped in comparison with their presence on campus, the report found.\"When we analyzed the stops data ... we flagged a huge problem,\" said Ange-Marie Hancock Alfaro, chair of the USC political science and international relations department who helped lead the review. But a demand that has escalated nationwide — defunding police and abolishing their presence on campus — was not on the table. That's because USC, as a private institution, is not legally authorized to ban police and must adhere to city and state laws requiring law enforcement access to campus, according to Erroll Southers, a longtime USC professor and expert in security and extremism studies who also led the effort. He said the idea that USC could eliminate law enforcement from campus, as some students and faculty have demanded, was \"one of the most challenging pieces of misinformation we had to push back on consistently.\"The 45 recommendations by a diverse community advisory board included formation of an independent oversight board, more robust data collection of officer activities and reassigning some duties they perform, such as responding to calls involving mental health or homelessness, to others. Campus members should be provided with the means, such as QR codes, to report their interactions with officers, and officers should be terminated if they show pervasive patterns of discriminatory behavior, the report recommended.Southers said the 10-month effort was the most comprehensive review of campus safety practices in the university's history. It was requested by USC President Carol L. Folt after Floyd's murder and the national protests over racism in policing practices. The board that led the effort was empowered by Folt to put \"everything on the table\" and report directly to her as they interviewed more than 700 students, faculty, staff, neighbors and current and former law-enforcement members in what they called a \"co-design\" process, Southers said. In a letter to the campus community, Folt hailed the \"transformative ideas\" in the report and expressed excitement about implementing them in an effort to \"advance belonging and equity on our campuses.\" In the last several months, USC has rolled out a new anti-harassment policy, instituted diversity training for students, hired a chief inclusion and diversity officer and removed the name of Rufus B. von KleinSmid, a eugenics advocate, from a prominent campus building.The report includes the overarching goal to enhance a sense of \"One USC\" by creating safety practices that are inclusive and equitable to all campus and community members. Some students, staff and faculty felt safe with officers, while others felt targeted; some community members felt they were treated unfairly compared with campus members, the report found.\"It was a consistent message of depending on who you are and where you were, that you weren't on the same level of equitability,\" Southers said. Alfaro, the board co-chair, said there was a particularly pressing need to gather more extensive data on officer activities and complaints against them. \"We don't have the data that we need to really assess the size and scope of the problem\" of unequal treatment, she said.John Thomas, chief of the USC Department of Public Safety who served on the board, said he welcomed the recommendations. Thomas, who is Black, said he was racially profiled himself by police as a young man and wanted to get at the reasons behind the data showing disproportionate treatment, particularly of men of color. The 307-member campus safety force is highly diverse — 50% of officers are Latino, 29% are Black, 11% are white and 3% are Asian — but most of the stops they make are triggered by calls from the community, he said. In the last year, he added, the dispatch center has begun asking more questions about the nature of \"suspicious activity\" reported before sending officers out.\"After being in this profession for 37 years, I can say that nobody hates a bad cop more than a good cop,\" Thomas said. \"If we are held accountable ... I would tell you that our officers would welcome that.\"Advisory board members could not reach consensus on whether officers should be issued body cameras, Southers said.The campus safety force operates under a memorandum of understanding with the city of Los Angeles that gives officers the right to arrest people. About one-third of them are armed and fully trained police officers. Thomas said he would welcome redefining the role of campus safety officers — focusing more on crime prevention and pervasive incidents of theft, for instance, and handing off more specialized tasks such as mental health. Because they are the only entity operating on campus 24 hours a day all year, he said, his officers get called for a wide range of duties. About 70% of service calls involve opening locked doors and gates. He said he was eager to get started on the work, especially since a similar attempt at revising campus safety practices four or five years ago fizzled out. \"The more points of contact to build relationships, provide accountability and transparency ... with the various stakeholders that we're beholden to, it just makes for a more compassionate department, a more welcoming department,\" he said.Folt said she has assembled a team to review the recommendations and would begin to put them in place in the coming months." },
C:   { id="4311294925128865000"^^com.smartnews:article, link="https://www.audacy.com/wfan/sports/mets/zack-scott-pitching-is-the-mets-top-deadline-priority"^^tt:url, title="Zack Scott tells Carton & Roberts that pitching is the Mets' top deadline priority", date=new Date("2021-07-28T21:42:21.000Z"), source="Audacy", author="Carton Roberts", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294925128864799.mp3"^^tt:url, content="“I’ve not specifically been told about him saying that, but that’s not happening. He has a lot of control over where he goes, and it’s a division rival, so what’s been communicated to me, it’s probably a little of both.”The words of acting Mets GM Zack Scott, speaking to Carton & Roberts about the rumors that Max Scherzer has refused to waive his no-trade clause to come to Queens.That said, even after Rich Hill was acquired last week, and even with Carlos Carrasco due back this weekend and Jacob deGrom hopefully next week, Scott says pitching is still the Mets’ priority ahead of Friday’s trade deadline.“The deal for Hill helps, and we have Carrasco and deGrom coming back, so I feel pretty good on our direction,” Scott said, “but we had three recent games where TBA was our starter, and that’s less than ideal. We’re still interested though because our depth is still pretty much who we have right now. If we can acquire someone who improves that depth, we’re open to that.”According to Scott, though, it likely won’t be a Jose Berrios-type top-tier starter, but more of a back-end starter who can step up and help the Mets there.“Right now, assessing the market, I’d say it’s more of a depth guy; I do think we have good top of the rotation guys. We have a good chance to make the postseason, and if we have our top three healthy with Carrasco continuing to get lengthened out, we have some depth there. It’s more likely to be someone who raises our floor than our ceiling, in a sense, to keep us from having less than ideal options taking the mound.”The bullpen may also be a possibility to be bolstered, so when Craig & Evan naturally asked about Craig Kimbrel, Scott reiterated that he has faith in Edwin Diaz, but also has faith he could pitch outside of being the Mets’ closer.“I have no concerns about Edwin pitching in any inning, and I don’t believe the narrative about pitching in non-save situations,” Scott said. “Sometimes the results haven’t lined up, but that’s just sometimes the way things go, and you can create a narrative on small sample size. He can handle any role, and I understand that Luis Rojas has to manage these guys, but I think Edwin can be an impactful arm in any situation.”Listen to New York sports talk now on Audacy and shop the latest Mets team gear!Scott noted that he understands defined roles can be important to some players – including Kimbrel, whom he had briefly while he was in Boston – but he believes that it’s important to have conversations with players who might be shifted due to trade acquisitions about that before making a deal.“Here’s how I look at it: if we were going to acquire someone, I would definitely want to talk to Luis and the players themselves before we finalize that, because I think it’s important,” Scott said. “The positive culture we have is part of what’s helped this team survive some really adverse times, and I don’t want to do something that can drastically effect that. I want to be open and talk to the players when there’s something potentially disruptive.”To that effect, Scott relayed a story about the Red Sox acquiring Eric Gagne in 2007 when they already had Jonathan Papelbon, and how that unfolded.“Gagne didn’t turn out well for us, but we had that conversation with Papelbon and told him we’re acquiring a potential Hall of Fame closer. There were emotions, and that’s understandable, but it was good to have a conversation,” Scott said. “So, if I went to Francisco (Lindor) and said we’re going to add a shortstop and maybe he’s not comfortable with it, maybe we don’t do it. The thing is, we don’t just do a move that may be disruptive to a clubhouse and they find out on twitter. That’s not the way to do business.”Follow WFAN's afternoon team on Twitter: @CartonRoberts, @EvanRobertsWFAN, @TommyLugauer, and @CMacWFAN Follow WFAN on Social Media Twitter | Facebook | Instagram | YouTube | Twitch" },
C:   { id="4311302557784877000"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/older-builders-back-on-the-tools-construction-boom/100314222"^^tt:url, title="Queensland construction boom means tradies of all ages are trying to keep up", date=new Date("2021-07-28T22:07:32.000Z"), source="Australian Broadcasting Corporation", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302557784877032.mp3"^^tt:url, content="John Mahlouzarides is back working on building sites after decades off the tools. (ABC North Qld: Hannah Kotaidis) An insatiable demand for construction across Queensland is forcing some older builders back onto the tools and seeing many tradies working longer hours. In Townsville in the state's north, house building is three times the rate it was prior to the coronavirus pandemic, and local tradies are trying to keep up.Work hours have increased by 70 per cent since 2020, according to Construction Skills Queensland.Corinthian Constructions director John Mahlouzarides, 62, has put on his tool belt for the first time in about four decades.\"I've had to go onsite and do a few of the jobs myself because of the demand and just the pressure that we're under,\" Mr Mahlouzarides said.\"I know a lot of the older builders ... they're all doing it.\"Even though I like the change, and they probably like the change too, I don't really think they want to do it for any duration.\"They're doing it out of necessity more than anything else.\"Robert Sobyra from Construction Skills Queensland said Townsville was experiencing one of the biggest booms of any region across the state and the labour market had not been able to keep up.\"That's pretty obviously the reason why a lot of builders are having to strap back on the tool belts because there's simply not enough labour to jump up the activity levels that quickly,\" he said.According to industry body Master Builders, available tradies are becoming increasingly thin on the ground across the state, with two out of three builders waiting more than a month for roof installers and steel workers.No takers for jobsMore than 40,000 dwellings were approved for construction across Queensland in the 12 months to May. In May and June alone, 170 dwellings in Townsville were approved, compared with 82 for the same two-month period last year, according to data from the Townsville City Council.Mr Mahlouzarides said his company employed five full-time staff, as well as consultants and sub-contractors to fill the gaps.\"We could easily multiply that quite dramatically if we had the staff and the availability of sub-contractors and materials,\" he said.The home builder boom and low rental vacancy rates had created further barriers for the industry to encourage workers to the region.\"We've got to pump out a lot more houses with a lot fewer people,\" Mr Sobrya said.\"It's going to get worse before it gets better.\"Apprentices in the pipelineAccording to state government figures, 1,300 students have enrolled in building and construction courses in the Townsville area in the past 12 months — up 7.1 per cent compared with the previous year.That figure includes enrolments in a range of qualifications such as carpentry, plumbing and electrical.Ethan Spooner, 17, recently started a carpentry apprenticeship but said he only knew of one other friend who took up a trade after finishing school.\"I did a TAFE course while I was at school, I really liked it so decided to go with being a tradesman,\" he said.Queensland's Training and Skills Development Minister, Di Farmer, said the uptick in enrolments would help create a pipeline of labourers.\"We actually structure our investment and subsidies according to the jobs that are actually in demand and we're tweaking that constantly to make sure that we're actually meeting those industry needs,\" Ms Farmer said.Mr Sobyra welcomed the influx of new entrants into the industry but said the time lag in training them had not helped to solve the immediate problem.And time is something many builders don't have much of these days.\"It takes time to train them, it takes time for them to get productive and sometimes if you're a builder under the pump it's just easier to do the work yourself,\" he said." },
C:   { id="4310815481490581500"^^com.smartnews:article, link="https://www.bloomberg.com/news/articles/2021-07-27/no-crabs-no-scallops-seafood-is-vanishing-from-menus-in-u-s"^^tt:url, title="No Crabs, No Scallops: Seafood Is Vanishing From Menus in U.S.", date=new Date("2021-07-27T13:00:00.000Z"), source="Bloomberg", author="Adam Jackson and Kate Krader", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4310815481490581423.mp3"^^tt:url, content="(Bloomberg) -- At the Clam, there are no scallops.Prices went “crazy,” says Mike Price, who co-owns the Greenwich Village restaurant, and so he yanked them off the menu. Over in Napa Valley, Phil Tessier, the executive chef at a popular spot called PRESS, did the same. And in Atlanta, at the tapas joint the Iberian Pig, chef Josue Pena didn’t stop at scallops. The Alaskan halibut and blue crab are gone, too.That last one was a killer, Pena says. Crab croquettes had become a signature dish. “People were like ‘what’s up?’” But, he says, with wholesale costs soaring like they are, “the price we had to charge to be profitable was almost insulting.”For restaurants across the U.S., the re-opening from Covid lockdown has been anything but easy. They’ve struggled to hire back enough waiters and chefs, often being forced to dangle double-digit pay hikes, and have been rocked by cost increases and shortages on all kinds of items -- from condiment packets to takeout packaging and chicken wings. So this jump in seafood prices, part of the broader inflationary surge working its way through the U.S. economy, is only further squeezing restaurateurs just when they were supposed to be raking in cash as they recover from all those months lost to the pandemic.Seafood prices rose about 11% in the 12 months through early July from the previous period, according to NielsenIQ. Stretch out the time horizon a little, Pena says, and the increases on certain hard-to-find products are much starker yet. A pound of halibut, he says, goes for $28 from the local seafood distributor he buys from in Atlanta. Before the pandemic, it was $16 at most. And blue crab has gone from $18 a pound to $44. But at least he can find crab. In Orlando, Brennan Heretick, co-owner of High Tide Harry’s, had to stop selling crab fingers because wholesalers in the region stopped offering them.Just like in dozens of other overwhelmed industries in the booming economy, there are any number of factors causing the shortages and price spikes: The ports are congested; there aren’t enough fishermen; there aren’t enough truck drivers; and demand for seafood at restaurants is soaring.“Distributors used to hustle and bustle to get your business,” says Jay Herrington, who owns Fish On Fire, a restaurant that’s a 10-minute drive from Heretick’s place. Now, “you don’t get a delivery, or it’s a late delivery. Sometimes we have to go and pick it up.” That’s something he’d never seen before. Herrington recently raised entree prices, which range from $10 to $20, by as much as $3 to offset the higher costs. “There’s just no stopping it,” he says.‘Serious Delays’Herrington’s headache is part of the broader backlog at U.S. ports that has sparked complaints for consumers and companies across the U.S. economy and is a major driver of the higher prices, according to Gavin Gibbons, vice president of communications at the National Fisheries Institute. Labor shortages have caused “serious delays,” he said in an email. He estimated that port-related costs are on track to be 20 times higher for the group’s member companies than last year.A lack of fishermen is another fundamental problem. When restaurants shut down during the pandemic, it meant that a key buyer evaporated, according to a report by the National Oceanic and Atmospheric Administration. That resulted in financial losses for many in the industry and forced them to find work in new areas. Additionally, most fishermen in the U.S. are older than 40 and few young people are entering the field, according to Michael Priebel, manager of Keys Fisheries in Marathon, Florida.“A lot of people went into construction,” he said. “We see less and less people coming back every year because they are getting old and fishing is getting more expensive.”The hurdles don’t stop there. Higher prices for cod, for example, are due to a shortage of shipping containers, according to Sysco Corp., which is one of the world’s largest food distributors and wholesalers. Lobster, meanwhile, has seen low inventory since Covid-19 restrictions in Canada last summer reduced boat crews going out to sea for prime-season catching, Sysco said in an email. Supplies are currently being replenished as Maine’s season progresses, but prices remain high due to elevated demand.Back at High Tide Harry’s in Orlando, Heretick says he’s now struggling to find crab legs as well as the claws he needs for his crab fingers dish.The price on the crab meat he does find has more than doubled since January. Ditto for lobster. Then he rattles off a bunch of other cost increases he’s been hit with: paper products, liquor, bamboo cocktail skewers, gloves. He says those last two items are each up 200% or more. There are higher labor costs, too. Heretick recently bumped cooks up to $16 an hour and doled out increases to hosts and wait staff, too.So far, he’s eaten much of the higher costs, opting to keep prices mostly stable on the menu -- which lists the fried oysters dish at $19.99 and the shrimp-and-scallop scampi at $24.99 -- as he welcomes old customers back. He can’t keep going on like this, though, he says. One recent month, High Tide Harry’s raked in record revenue and yet Heretick was saddled with a $14,000 loss.“We hope,” he says, “that when we do have to have a little bit of a price increase, that everybody’s understanding that we did everything we could.”©2021 Bloomberg L.P." },
C:   { id="4311302598507374600"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/abc-capricornia-turns-90-4rk-rockhampton-radio-station/100323628"^^tt:url, title="Celebrating 90 years of Aunty in central Queensland", date=new Date("2021-07-28T22:06:19.000Z"), source="Australian Broadcasting Corporation", author="By Erin Semmler and Paul Culliver", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302598507374575.mp3"^^tt:url, content="Guy Menzies flies the first solo trans-Tasman flight from Sydney to New Zealand's West Coast, construction of the Empire State Building is completed and one of regional Queensland's first radio stations hits the airwaves.The year is 1931 and the broadcaster is ABC Capricornia, known then as 4RK.Today the Rockhampton station, which predates the ABC itself, celebrates nine decades of storytelling in central Queensland.From school fetes to emergency broadcasting, the region's devoted Aunty has done its best to share pride in the community's triumphs and provide essential information on the most challenging days.The ABC's managing director David Anderson said the station had \"a great tradition of providing outstanding regional reporting\".\"In 2021 we are committed to the region as much as ever: ABC Capricornia is as important to the local the community it serves today as it was when it first began broadcasting on 29 July 1931,\" he said. \"Some of our best journalists started their careers there, including Richard Carleton, Alan Hogan, Jane Singleton, Chris Masters and Tony Joyce.\"In recent years, the bureau has been an important source of emergency information covering cyclones, floods and bushfires.\"It's been there for all the major events, including the Moura mine disasters in the 1980s and 1990s, the launch of the Beef Expos in the late 1980s and most recently, bringing Australians the story of asylum seekers, the Murugappan family from Biloela.\"A resilient community It is a bureau that has shared thousands of stories and shaped hundreds of journalists, one of whom is National Indigenous Affairs correspondent Isabella Higgins.The soon-to-be Europe correspondent remembered covering Cyclone Debbie and ensuing flooding in 2017.\"It just made me realise the resilience of people who live on the Fitzroy River flood plains — that they're used to it, they know how to deal with it,\" she said.\"It was just really nice to see people looking after themselves at that time and looking after the community and really banding together to make sure people got what they needed.\"Higgins said a quirky cane toad catching story she covered at Kershaw Gardens with cameraman Russel Talbot was her favourite from the region.\"It was a research project where they were going to cut the glands out of the toads and they were going to make traps to put in river systems around the regions that would kill toads out of the waterways,\" she said.\"It was this amazing innovation that was being driven by regional Australia.\"But just the characters at this cane toad catching event, it was hilarious.\"A couple on their \"date night\" was the icing on the cake.\"This huge guy just picks [the cane toad] up with his bare hands, holds it out to his partner and goes, 'What do you reckon love? I caught this one for you',\" she said.\"I think Russ and I just looked at each other, we could not stop laughing.\"Four staff killed in crashCameraman Bruce Black had fond memories of working at the bureau from 1975 to 2002, but he would never forget October 24, 1983.It was the day rural reporter Bruce Anning, cameraman Joe Mooney, sound technician Bill Fryer and station manger Ralph Elphinstone died in a light plane crash on their way to a story.\"I'd just gone up the street for a walk at lunch time, came back and were told they were all killed in a plane crash out near Clermont,\" he said.\"I sort of didn't believe it when I was told but then everyone was crying ... so it was real alright.\"It was a devastating time.\"Black, who still lives in central Queensland, hoped Aunty would tell stories for years to come.\"I think the ABC is a really important part of the community and always has been,\" he said.\"I just hope there are enough supporters out there that support the ABC to keep it going into the future because it's got a wonderful history and does a wonderful job, I feel.\"'A special place in my heart'The 2010/11 floods, including the evacuation of Theodore, were an enduring memory for ABC Brisbane breakfast presenter Craig Zonca.\"I'll never forget that period of time it was just extraordinary,\" he said.\"At a moment of such hardship, you walk up to someone, you say you work for the ABC and they open up their heart and their life to you and you feel like you have a responsibility to share their story, share that moment with others.\"Then you can't help but get on the end of a broom yourself and help if someone's cleaning up after floodwaters have receded.\"Zonca, who started with Aunty in 2003, said he was \"a Rocky boy at heart\".\"I met my wife Jessica Hinchliffe at the ABC in Rockhampton, we now have a little daughter named Molly,\" he said.\"Let me tell you, the office on the banks of the Fitzroy River on Quay Street in Rockhampton, gee it holds a very special place in my heart.\"Thank you central QueenslandABC Capricornia's Chief of Staff Chrissy Arthur thanked the community for its support over the decades.\"We have had the privilege of sharing central Queensland stories and news widely – and we've been trusted over the decades to do that,\" she said. \"I first saw the powerful connection ABC reporters and broadcasters have with the community when I started at 4RK as a rural reporter in 1995.\"We are now working in a competitive and ever-changing media landscape where it's more important than ever for regional voices to be heard – and so we continue to find and tell those stories.\"" }
C: ]]
C: #[count=50]
C: #[more=true];
A: Here are the news.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_many;
U: What can you do?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[
C:   { id="4311178050977928700"^^com.smartnews:article, link="https://www.space.com/gravitational-wave-observatory-moon-concept/"^^tt:url, title="We could hunt gravitational waves on the moon if this wild idea takes off", date=new Date("2021-07-28T11:00:02.000Z"), source="Space", author="Mike Wall", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311178050977928563.mp3"^^tt:url, content="Humanity's return to the moon could open up new windows on the universe.NASA is working to establish a permanent human presence on and around the moon by the end of the 2020s, via a program known as Artemis. That presence may eventually include radio telescopes on the moon's exceptionally quiet far side — and, perhaps, even more ambitious off-Earth science facilities.For example, a recent study makes the case for building a gravitational-wave observatory on the moon. Hunting gravitational waves: The LIGO laser interferometer project in photos Gravitational waves are ripples in space-time created by the acceleration of massive objects. They were predicted by Albert Einstein's general theory of relativity in 1915 and first directly detected a century later, by the Laser Interferometer Gravitational-Wave Observatory (LIGO) consortium.LIGO has detectors at two sites, one in Louisiana and one in Washington state. Each detector is an L-shaped structure with arms 2.5 miles (4 kilometers) long, with a laser at the center of the array. The laser shines light down each arm, and mirrors reflect the light back. If the light from one arm comes back a bit late, it's evidence of a possible gravitational-wave-induced distortion.The LIGO team has detected dozens of gravitational-wave events to date, most of them caused by mergers between two black holes. But this is exacting work, and our noisy, active Earth makes spotting signals tough.The moon, on the other hand, is an exceptionally quiet place, the new study notes.\"The moon offers an ideal backdrop for the ultimate gravitational wave observatory, since it lacks an atmosphere and noticeable seismic noise, which we must mitigate at great cost for laser interferometers on Earth,\" co-author Avi Loeb, an astronomer at Harvard University, said in a statement. \"A lunar observatory would provide unprecedented sensitivity for discovering sources that we do not anticipate and that could inform us of new physics,\" Loeb said. \"GLOC could be the jewel in the crown of science on the surface of the moon.\"Lunar timeline: Humanity's explorations of the moon \"GLOC\" is short for the Gravitational-wave Lunar Observatory for Cosmology, the name Loeb and study lead author Karan Jani propose for the moon facility. GLOC would be huge compared to LIGO and other detectors on Earth, featuring arms 25 miles (40 km) long. And it would be incredibly sensitive, capable of spotting gravitational-wave events in nearly 70% of the observable volume of the universe, the researchers calculated.\"By tapping into the natural conditions on the moon, we showed that one of the most challenging spectrum of gravitational waves can be measured better from the lunar surface, which so far seems impossible from Earth or space,\" Jani, an astrophysicist at Vanderbilt University in Tennessee, said in the same statement.GLOC is just an idea at the moment, but Jani and Loeb said they hope to develop a pathfinder mission on the moon that would test GLOC's required technologies in the coming years. And if GLOC or something like it does end up getting built, it will pay scientific dividends for decades to come, the researchers said.\"Unlike space missions that last only a few years, the great investment benefit of GLOC is it establishes a permanent base on the moon from where we can study the universe for generations, quite literally the entirety of this century,\" Jani said in the statement.The new study was published last month in the Journal of Cosmology and Astroparticle Physics. You can read it for free at the online preprint site arXiv.org. Mike Wall is the author of \"Out There\" (Grand Central Publishing, 2018; illustrated by Karl Tate), a book about the search for alien life. Follow him on Twitter @michaeldwall. Follow us on Twitter @Spacedotcom or Facebook." },
C:   { id="4311219825989915600"^^com.smartnews:article, link="https://www.kansas.com/news/coronavirus/article253084593.html"^^tt:url, title="Wichita hospital system mandates COVID vaccines for workers amid growing ICU numbers", date=new Date("2021-07-28T16:46:38.000Z"), source="The Wichita Eagle", author="Dion Lefler", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311219825989915471.mp3"^^tt:url, content="Wichita’s largest hospital system, Ascension Via Christi, is mandating that all employees be vaccinated for COVID-19 or step away from their jobs, amid growing concern over intensive-care occupancy and spread of the Delta variant of the coronavirus. “Ascension will require that all associates be vaccinated against COVID-19, whether or not they provide direct patient care, and whether they work in our sites of care or remotely,” said a statement issued by Ascension, parent company of Via Christi. “This includes associates employed by subsidiaries and partners; physicians and advanced practice providers, whether employed or independent; and volunteers and vendors entering Ascension facilities.” All workers, excluding a few with medical or religious exemptions, will have to complete the vaccination regimen by Nov. 12. “Tens of thousands of Ascension associates have already been vaccinated with the available vaccines, as have millions of people across the country and the world,” the statement said. “But we must do more to overcome this pandemic as we provide safe environments for those we serve.” Ascension employees are already required to be vaccinated with the annual flu shots and the timing of implementing the COVID vaccine requirement will align with that schedule, Ascension said. Delta variant and ICU As the more contagious Delta variant of COVID becomes a larger issue, the hospital has seen its ICU occupancy rising, hospital officials said. “COVID-19 volumes, both in our medical-surgical and intensive care units have more than doubled in the past several weeks and hospital volumes are up overall over what we see in a typical summer,” said a statement by Kevin Strecker, hospital president and chief operating officer. “As a result, our hospitals continue to remain relatively full on a daily basis.” There are several reasons for the influx of patients, said Kris Hill, vice president of nursing at Via Christi St. Francis hospital. “It’s not one thing. It’s everything,” Hill said in an e-mail. “In addition to patients infected by COVID-19, summer is trauma season, so we are seeing a significant number of patients with traumatic injuries, respiratory issues related to the high humidity as well as RSV in children, and patients coming in for routine and cardiac procedures, some of which may be related to patients having delayed care because of the pandemic.” However, the hospital is not so crowded that officials there are encouraging people to delay medical attention. “As a community, we collectively continue to be able to care for the critically ill patients coming to our hospitals and people should continue to seek the care they need without delay,” Strecker said. On Monday, there were 12 COVID-infected patients in the ICU, compared with six two weeks ago. And that increase comes amid a burst of admissions to the medical and surgical ICU. The Monday number there was 53, up from 20 two weeks ago, including some patients catching up on procedures that were put off last year when COVID rates were high and vaccines unavailable. Contributing: Amy Renee Leiker of The Eagle" },
C:   { id="4311294915339356000"^^com.smartnews:article, link="https://www.fresnobee.com/news/coronavirus/article253087468.html"^^tt:url, title="Fresno church cancels youth activities after COVID exposures at summer camp", date=new Date("2021-07-28T21:45:46.000Z"), source="The Fresno Bee", author="Tim Sheehan", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294915339356334.mp3"^^tt:url, content="A Fresno church that sent hundreds of children to a mountain summer camp last week has canceled its youth activities after some of the attendees were sent home early after being exposed to COVID-19 during their stay. Brad Bell, lead pastor at The Well Community Church with locations in north Fresno and Clovis, told The Bee that more than 450 people from the church – a combination of students in sixth through 12th grades, along with adult leaders – attended a weeklong summer camp session at Hume Lake Christian Camp in eastern Fresno County. About 25 to 30 of the campers “were contacted and sent home for various reasons” in the latter part of last week, Bell said. That included individuals who showed coronavirus symptoms or tested positive for the virus. It also included people who indicated through contact tracing that they were in proximity to someone who had symptoms or tested positive. “Many of our students who were sent home were neither positive nor symptomatic but rather, in an abundance of caution, were caught up in the contact tracing process and were sent home to ensure the safety of the rest of the camp,” Bell said in an e-mail to The Bee. Concerns about COVID-19 cases at the camp arose last week after a San Francisco television station reported that at least three Bay Area children who were there tested positive for the virus and were sent home early to minimize exposure of other campers. A representative for the Hume Lake organization – which also runs camps in San Bernardino County, San Diego and in Massachusetts – said the camp in Fresno County hosts about 2,000 campers in a given week, with facilities and activities spread out over 365 acres. “It’s not like all these people are cornered under a bubble,” the representative told The Bee. Camps for middle-school and high school students are in different locations on the property. ‘The individual camps run weekly, so the kids who were at the camp last week are no longer there this week,” the representative added. “As of now, there are no COVID cases among campers at Hume Lake. Last week that obviously wasn’t the case.” The camp’s representative said she had no information on the number of campers affected last week, either symptomatic, had positive tests or were exposed to others who were infected. The ripple effects from the multiple camp cases – which officials from the Fresno County Department of Public Health stopped short of calling an “outbreak” last week – was being felt at The Well, Bell said. “I am not aware of the number of students or adult leaders (from The Well) that were impacted in any negative way from COVID positivity,” he told The Bee. But, he added, “in an abundance of caution, we have canceled all youth events for the week and are praying for a speedy recovery and a healthy return to normalcy for all involved.” Bell dismissed as “highly inflated” a figure offered by a church member that 80 or more children were sent home from the camp. “Our records indicate a third of that number” were sent home, he said. Cases defy precautions Hume Lake’s representative said the infections that arose last week came despite numerous precautions that were put in place this summer to minimize the risk of coronavirus infections among campers or staff. In addition to isolating and sending home campers who became sick or tested positive during their stay, the representative said, “Hume immediately reached out to parents of children exposed to positive cases” and sent those children home as well. The organization’s statement of COVID-19 precautions requires every camper, counselor and staff member to show proof of vaccination for COVID-19 or proof of a negative coronavirus test three days before they arrive at the camp. The representative said those who are unable to upload their documentation to the camp’s online screening system – where they are verified by the camp medical staff – receive a rapid antigen test for COVID-19 when they arrive and must test negative before they can enter the camp. The Hume organization’s COVID-19 preparedness and response plan also indicates that campers and staff will receive daily temperature screenings; staff temperatures are to be taken and recorded at the start of every shift. The plan also calls for all campers and staff to be screened for symptoms of a potential coronavirus infection, including cough, shortness of breath or breathing difficulty, chills, muscle/body aches, headache, sore throat, loss of taste or smell, nausea or vomiting, diarrhea, known close contact with a confirmed COVID-19 person, or a fever of 100.4 or higher. Campers are told that masks are required whenever they are indoors except while dining or sleeping in their assigned bunk. Campers are also encouraged to follow social-distancing guidelines when possible. The plan also calls for camp staff to sanitize areas used by a sick camper before the next use. “The camp immediately did targeted cleaning and disinfecting of those areas,” the camp representative said, “in addition to the already-enhanced cleaning in place.” Bell said he was “grateful for the health screening and safety protocols put in place by Hume to create a safe and secure camping environment,” “Every family understood the potential risk involved with sending their students to camp and willingly participated despite the relative risk,” he added. While he said he was unaware of any positive COVID cases among The Well’s campers, “I am aware of the bast array of young people who enjoyed a glimpse of normalcy in the midst of a very difficult year.” Bell added that the church was “diligent to inform parents of any exposure and invited them to come and take their child home as soon as possible” from the camp. “We are encouraging all involved to follow the CDC guidelines and protocols regarding self-care and self-quarantine” Bell said in response to a question from The Bee about the potential spread of the virus within the congregation at the church’s in-person services. “All families we have contacted are faithfully caring for their students and following the prescribed health protocols.” As a church, “The Well does not promote or discourage” vaccinations for COVID-19 among its members, Bell said. “Vaccine awareness is not our primary mission. Rather, our purpose is to help people connect to God and to each other in every neighborhood.” He added that “we encourage every individual to do their research, get informed, and prayerfully consider how they would like to proceed” with vaccination. The Well closed its doors in March 2020 and switched to offering online worship services for its members in the early stages of the COVID-19 pandemic. As the year progressed, however, the church joined several other large Fresno-area churches in resuming in-person services, defying state closure orders put in place last fall to prevent the spread of the virus among large indoor gatherings. The closure order and capacity limits for in-person services at churches were later overturned in court. Bee reporter Thaddeus Miller contributed to this report." },
C:   { id="4311094280421639000"^^com.smartnews:article, link="https://www.huffpost.com/entry/michael-fanone-voicemail_n_6100e81be4b0fd216c20006f"^^tt:url, title="Cop Shares Voicemail Threat He Received During Testimony About U.S. Capitol Riot", date=new Date("2021-07-28T08:29:12.000Z"), source="HuffPost", author="Josephine Harvey", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311094280421639029.mp3"^^tt:url, content="A Washington, D.C., police officer who was beaten and shocked during the U.S. Capitol riot on Jan. 6 shared a voicemail he received from a Donald Trump supporter on Tuesday.In an interview with CNN’s Don Lemon, officer Michael Fanone played a message that he said was left on his phone while he was testifying on Capitol Hill earlier in the day about what he experienced during the insurrection. “You want an Emmy? And Oscar? What are you trying to go for here?” the male caller asked. “You’re so full of shit,” he added, before using a homophobic slur and several profanities.Listen to the full message below:DC Metropolitan Police Officer Michael Fanone joins @donlemon in the studio tonight after his testimony to the Select Committee investigating January 6th.Hear the shocking voicemail he received during his testimony – and a warning – the language is graphic. Listen: pic.twitter.com/U9AqFamzzr— Don Lemon Tonight (@DonLemonTonight) July 28, 2021Fanone said his immediate reaction to the voicemail was: “This is what happens to people who tell the truth in Trump’s America.”On Jan. 6, Fanone was shocked repeatedly with a stun gun and beaten with metal pipes while defending the Capitol from the mob seeking to overthrow the certification of Joe Biden’s election win. He suffered a heart attack and a concussion and has since been living with a traumatic brain injury and post-traumatic stress disorder.A leading advocate for an investigation into Jan. 6, Fanone has been critical of Republicans peddling revisionist history about what took place. Speaking out about the riot and calling out the people who deny it has made him a regular target of right-wing critics.Fanone has also drawn the ire of Fox News personalities Tucker Carlson and Laura Ingraham, both of whom mocked him on the air Tuesday night. Ingraham even handed out mock awards for best performances from participants in the House select committee hearing, including to several police officers who were injured in the attack.Related...'Partisan Pageantry': Republican Senators Dismiss Emotional Jan. 6 Hearing7 Key Takeaways From The First Day Of Jan. 6 Commission Testimony'Disgraceful': Police Officers Slam GOP Denials About Jan. 6 In Searing Testimony var _comscore = _comscore | | [ ]; _comscore.push({ c1: “2” , c2: “1000009” }); (function() { var s = document.createElement(“script”), el = document.getElementsByTagName(“script”)[0]; s.async = true; s.src = (document.location.protocol == “https:” ? “https://sb” : “http://b”) + “.scorecardresearch.com/beacon.js”; el.parentNode.insertBefore(s, el); })(); <img src=”https://sb.scorecardresearch.com/p?c1=2&c2=1000009&cv=2.0&cj=1” /> window.clientEventTracking = { context_data: { context_page_id: \"6100e81be4b0fd216c20006f\", context_page_type: \"buzz\", destination: \"huffpost\", event_uri: \"https://www.huffpost.com/entry/michael-fanone-voicemail_n_6100e81be4b0fd216c20006f\", page_edition: \"en-us\", referrer_uri: \"http://www.smartnews.com\", source: \"web_huffpost_other\", type: \"web_pageview\" }, endpoint: \"https://pixiedust.buzzfeed.com\", }; (function(){var s,e;s=document.createElement(\"script\"),e=document.getElementsByTagName(\"script\")[0], s.async=!0,s.src=\"https://www.buzzfeed.com/static/js/client-event-tracking/event.min.js\", e.parentNode.insertBefore(s,e);})();" },
C:   { id="4311268331547002400"^^com.smartnews:article, link="https://www.rawstory.com/proud-boy-arrested/"^^tt:url, title="Feds nab Virginia Proud Boy who charged at cops while wielding a 'large stick' during Capitol riot", date=new Date("2021-07-28T20:00:04.000Z"), source="Raw Story", author="Brad Reed", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311268331547002236.mp3"^^tt:url, content="A member of the Proud Boys who was caught on camera charging at police during the Capitol riot has been arrested and charged with multiple offenses.The U.S. Attorney's Office for the District of Columbia announcedU.S. Attorney's Office for the District of Columbia announced on Wednesday that Virginia resident James Russell Davis has been charged with assaulting, resisting or impeding certain officers and obstruction of law enforcement during civil disorder.The criminal complaint filed against Davis alleges that video footages shows him wielding what appears to be a \"large stick\" that he brandished while charging at officers during the riots.The complaint claims that Davis can be seen charging \"up the West Front Terrace stairs\" of the Capitol building and \"toward the Officers wielding the large stick/pole like a baseball bat in a pose consistent with a person preparing to strike with the object.\"The footage cited in the complaint also shows Davis \"pushing and screaming\" at a police officer, and also \"pushing the officers hands down\" as they try to stop him from advancing toward the building.Federal investigators say that Davis was not shy about using his status as a former Marine to justify his actions during the riots.\"\"I fought for this country, I fought for this country, what the f*ck are you doing, I fought for this country, I fought for this country, I'm a military f*cking police, I'm a military police,\" he shouted, according to footage reviewed by law enforcement officials." },
C:   { id="4311287856317345300"^^com.smartnews:article, link="https://www.latimes.com/california/story/2021-07-28/usc-finds-racial-profiling-stronger-oversight-of-campus-safety-officers-urged"^^tt:url, title="USC finds racial profiling with campus security, urges more oversight", date=new Date("2021-07-28T21:16:39.000Z"), source="Los Angeles Times", author="Teresa Watanabe", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311287856317345034.mp3"^^tt:url, content="The Tommy Trojan statue at USC. The university unveiled recommendations to heighten scrutiny of campus safety officers. (Al Seib/Los Angeles Times) More than a year after the murder of George Floyd ignited national protests over policing, USC on Wednesday unveiled recommendations to heighten scrutiny of campus safety officers after a broad review found troubling instances of racial profiling and a pervasive sense of \"two USCs,\" where not everyone was treated with equal fairness and respect. The report found that 31.7% of 1,050 stops by campus officers in 2019-20 involved Black people, although they made up just 5.5% of students, 8.8% of staff, 3% of faculty and 12% of neighbors in the University Park area. Latinos were also disproportionately stopped in comparison with their presence on campus, the report found.\"When we analyzed the stops data ... we flagged a huge problem,\" said Ange-Marie Hancock Alfaro, chair of the USC political science and international relations department who helped lead the review. But a demand that has escalated nationwide — defunding police and abolishing their presence on campus — was not on the table. That's because USC, as a private institution, is not legally authorized to ban police and must adhere to city and state laws requiring law enforcement access to campus, according to Erroll Southers, a longtime USC professor and expert in security and extremism studies who also led the effort. He said the idea that USC could eliminate law enforcement from campus, as some students and faculty have demanded, was \"one of the most challenging pieces of misinformation we had to push back on consistently.\"The 45 recommendations by a diverse community advisory board included formation of an independent oversight board, more robust data collection of officer activities and reassigning some duties they perform, such as responding to calls involving mental health or homelessness, to others. Campus members should be provided with the means, such as QR codes, to report their interactions with officers, and officers should be terminated if they show pervasive patterns of discriminatory behavior, the report recommended.Southers said the 10-month effort was the most comprehensive review of campus safety practices in the university's history. It was requested by USC President Carol L. Folt after Floyd's murder and the national protests over racism in policing practices. The board that led the effort was empowered by Folt to put \"everything on the table\" and report directly to her as they interviewed more than 700 students, faculty, staff, neighbors and current and former law-enforcement members in what they called a \"co-design\" process, Southers said. In a letter to the campus community, Folt hailed the \"transformative ideas\" in the report and expressed excitement about implementing them in an effort to \"advance belonging and equity on our campuses.\" In the last several months, USC has rolled out a new anti-harassment policy, instituted diversity training for students, hired a chief inclusion and diversity officer and removed the name of Rufus B. von KleinSmid, a eugenics advocate, from a prominent campus building.The report includes the overarching goal to enhance a sense of \"One USC\" by creating safety practices that are inclusive and equitable to all campus and community members. Some students, staff and faculty felt safe with officers, while others felt targeted; some community members felt they were treated unfairly compared with campus members, the report found.\"It was a consistent message of depending on who you are and where you were, that you weren't on the same level of equitability,\" Southers said. Alfaro, the board co-chair, said there was a particularly pressing need to gather more extensive data on officer activities and complaints against them. \"We don't have the data that we need to really assess the size and scope of the problem\" of unequal treatment, she said.John Thomas, chief of the USC Department of Public Safety who served on the board, said he welcomed the recommendations. Thomas, who is Black, said he was racially profiled himself by police as a young man and wanted to get at the reasons behind the data showing disproportionate treatment, particularly of men of color. The 307-member campus safety force is highly diverse — 50% of officers are Latino, 29% are Black, 11% are white and 3% are Asian — but most of the stops they make are triggered by calls from the community, he said. In the last year, he added, the dispatch center has begun asking more questions about the nature of \"suspicious activity\" reported before sending officers out.\"After being in this profession for 37 years, I can say that nobody hates a bad cop more than a good cop,\" Thomas said. \"If we are held accountable ... I would tell you that our officers would welcome that.\"Advisory board members could not reach consensus on whether officers should be issued body cameras, Southers said.The campus safety force operates under a memorandum of understanding with the city of Los Angeles that gives officers the right to arrest people. About one-third of them are armed and fully trained police officers. Thomas said he would welcome redefining the role of campus safety officers — focusing more on crime prevention and pervasive incidents of theft, for instance, and handing off more specialized tasks such as mental health. Because they are the only entity operating on campus 24 hours a day all year, he said, his officers get called for a wide range of duties. About 70% of service calls involve opening locked doors and gates. He said he was eager to get started on the work, especially since a similar attempt at revising campus safety practices four or five years ago fizzled out. \"The more points of contact to build relationships, provide accountability and transparency ... with the various stakeholders that we're beholden to, it just makes for a more compassionate department, a more welcoming department,\" he said.Folt said she has assembled a team to review the recommendations and would begin to put them in place in the coming months." },
C:   { id="4311294925128865000"^^com.smartnews:article, link="https://www.audacy.com/wfan/sports/mets/zack-scott-pitching-is-the-mets-top-deadline-priority"^^tt:url, title="Zack Scott tells Carton & Roberts that pitching is the Mets' top deadline priority", date=new Date("2021-07-28T21:42:21.000Z"), source="Audacy", author="Carton Roberts", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311294925128864799.mp3"^^tt:url, content="“I’ve not specifically been told about him saying that, but that’s not happening. He has a lot of control over where he goes, and it’s a division rival, so what’s been communicated to me, it’s probably a little of both.”The words of acting Mets GM Zack Scott, speaking to Carton & Roberts about the rumors that Max Scherzer has refused to waive his no-trade clause to come to Queens.That said, even after Rich Hill was acquired last week, and even with Carlos Carrasco due back this weekend and Jacob deGrom hopefully next week, Scott says pitching is still the Mets’ priority ahead of Friday’s trade deadline.“The deal for Hill helps, and we have Carrasco and deGrom coming back, so I feel pretty good on our direction,” Scott said, “but we had three recent games where TBA was our starter, and that’s less than ideal. We’re still interested though because our depth is still pretty much who we have right now. If we can acquire someone who improves that depth, we’re open to that.”According to Scott, though, it likely won’t be a Jose Berrios-type top-tier starter, but more of a back-end starter who can step up and help the Mets there.“Right now, assessing the market, I’d say it’s more of a depth guy; I do think we have good top of the rotation guys. We have a good chance to make the postseason, and if we have our top three healthy with Carrasco continuing to get lengthened out, we have some depth there. It’s more likely to be someone who raises our floor than our ceiling, in a sense, to keep us from having less than ideal options taking the mound.”The bullpen may also be a possibility to be bolstered, so when Craig & Evan naturally asked about Craig Kimbrel, Scott reiterated that he has faith in Edwin Diaz, but also has faith he could pitch outside of being the Mets’ closer.“I have no concerns about Edwin pitching in any inning, and I don’t believe the narrative about pitching in non-save situations,” Scott said. “Sometimes the results haven’t lined up, but that’s just sometimes the way things go, and you can create a narrative on small sample size. He can handle any role, and I understand that Luis Rojas has to manage these guys, but I think Edwin can be an impactful arm in any situation.”Listen to New York sports talk now on Audacy and shop the latest Mets team gear!Scott noted that he understands defined roles can be important to some players – including Kimbrel, whom he had briefly while he was in Boston – but he believes that it’s important to have conversations with players who might be shifted due to trade acquisitions about that before making a deal.“Here’s how I look at it: if we were going to acquire someone, I would definitely want to talk to Luis and the players themselves before we finalize that, because I think it’s important,” Scott said. “The positive culture we have is part of what’s helped this team survive some really adverse times, and I don’t want to do something that can drastically effect that. I want to be open and talk to the players when there’s something potentially disruptive.”To that effect, Scott relayed a story about the Red Sox acquiring Eric Gagne in 2007 when they already had Jonathan Papelbon, and how that unfolded.“Gagne didn’t turn out well for us, but we had that conversation with Papelbon and told him we’re acquiring a potential Hall of Fame closer. There were emotions, and that’s understandable, but it was good to have a conversation,” Scott said. “So, if I went to Francisco (Lindor) and said we’re going to add a shortstop and maybe he’s not comfortable with it, maybe we don’t do it. The thing is, we don’t just do a move that may be disruptive to a clubhouse and they find out on twitter. That’s not the way to do business.”Follow WFAN's afternoon team on Twitter: @CartonRoberts, @EvanRobertsWFAN, @TommyLugauer, and @CMacWFAN Follow WFAN on Social Media Twitter | Facebook | Instagram | YouTube | Twitch" },
C:   { id="4311302557784877000"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/older-builders-back-on-the-tools-construction-boom/100314222"^^tt:url, title="Queensland construction boom means tradies of all ages are trying to keep up", date=new Date("2021-07-28T22:07:32.000Z"), source="Australian Broadcasting Corporation", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302557784877032.mp3"^^tt:url, content="John Mahlouzarides is back working on building sites after decades off the tools. (ABC North Qld: Hannah Kotaidis) An insatiable demand for construction across Queensland is forcing some older builders back onto the tools and seeing many tradies working longer hours. In Townsville in the state's north, house building is three times the rate it was prior to the coronavirus pandemic, and local tradies are trying to keep up.Work hours have increased by 70 per cent since 2020, according to Construction Skills Queensland.Corinthian Constructions director John Mahlouzarides, 62, has put on his tool belt for the first time in about four decades.\"I've had to go onsite and do a few of the jobs myself because of the demand and just the pressure that we're under,\" Mr Mahlouzarides said.\"I know a lot of the older builders ... they're all doing it.\"Even though I like the change, and they probably like the change too, I don't really think they want to do it for any duration.\"They're doing it out of necessity more than anything else.\"Robert Sobyra from Construction Skills Queensland said Townsville was experiencing one of the biggest booms of any region across the state and the labour market had not been able to keep up.\"That's pretty obviously the reason why a lot of builders are having to strap back on the tool belts because there's simply not enough labour to jump up the activity levels that quickly,\" he said.According to industry body Master Builders, available tradies are becoming increasingly thin on the ground across the state, with two out of three builders waiting more than a month for roof installers and steel workers.No takers for jobsMore than 40,000 dwellings were approved for construction across Queensland in the 12 months to May. In May and June alone, 170 dwellings in Townsville were approved, compared with 82 for the same two-month period last year, according to data from the Townsville City Council.Mr Mahlouzarides said his company employed five full-time staff, as well as consultants and sub-contractors to fill the gaps.\"We could easily multiply that quite dramatically if we had the staff and the availability of sub-contractors and materials,\" he said.The home builder boom and low rental vacancy rates had created further barriers for the industry to encourage workers to the region.\"We've got to pump out a lot more houses with a lot fewer people,\" Mr Sobrya said.\"It's going to get worse before it gets better.\"Apprentices in the pipelineAccording to state government figures, 1,300 students have enrolled in building and construction courses in the Townsville area in the past 12 months — up 7.1 per cent compared with the previous year.That figure includes enrolments in a range of qualifications such as carpentry, plumbing and electrical.Ethan Spooner, 17, recently started a carpentry apprenticeship but said he only knew of one other friend who took up a trade after finishing school.\"I did a TAFE course while I was at school, I really liked it so decided to go with being a tradesman,\" he said.Queensland's Training and Skills Development Minister, Di Farmer, said the uptick in enrolments would help create a pipeline of labourers.\"We actually structure our investment and subsidies according to the jobs that are actually in demand and we're tweaking that constantly to make sure that we're actually meeting those industry needs,\" Ms Farmer said.Mr Sobyra welcomed the influx of new entrants into the industry but said the time lag in training them had not helped to solve the immediate problem.And time is something many builders don't have much of these days.\"It takes time to train them, it takes time for them to get productive and sometimes if you're a builder under the pump it's just easier to do the work yourself,\" he said." },
C:   { id="4310815481490581500"^^com.smartnews:article, link="https://www.bloomberg.com/news/articles/2021-07-27/no-crabs-no-scallops-seafood-is-vanishing-from-menus-in-u-s"^^tt:url, title="No Crabs, No Scallops: Seafood Is Vanishing From Menus in U.S.", date=new Date("2021-07-27T13:00:00.000Z"), source="Bloomberg", author="Adam Jackson and Kate Krader", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4310815481490581423.mp3"^^tt:url, content="(Bloomberg) -- At the Clam, there are no scallops.Prices went “crazy,” says Mike Price, who co-owns the Greenwich Village restaurant, and so he yanked them off the menu. Over in Napa Valley, Phil Tessier, the executive chef at a popular spot called PRESS, did the same. And in Atlanta, at the tapas joint the Iberian Pig, chef Josue Pena didn’t stop at scallops. The Alaskan halibut and blue crab are gone, too.That last one was a killer, Pena says. Crab croquettes had become a signature dish. “People were like ‘what’s up?’” But, he says, with wholesale costs soaring like they are, “the price we had to charge to be profitable was almost insulting.”For restaurants across the U.S., the re-opening from Covid lockdown has been anything but easy. They’ve struggled to hire back enough waiters and chefs, often being forced to dangle double-digit pay hikes, and have been rocked by cost increases and shortages on all kinds of items -- from condiment packets to takeout packaging and chicken wings. So this jump in seafood prices, part of the broader inflationary surge working its way through the U.S. economy, is only further squeezing restaurateurs just when they were supposed to be raking in cash as they recover from all those months lost to the pandemic.Seafood prices rose about 11% in the 12 months through early July from the previous period, according to NielsenIQ. Stretch out the time horizon a little, Pena says, and the increases on certain hard-to-find products are much starker yet. A pound of halibut, he says, goes for $28 from the local seafood distributor he buys from in Atlanta. Before the pandemic, it was $16 at most. And blue crab has gone from $18 a pound to $44. But at least he can find crab. In Orlando, Brennan Heretick, co-owner of High Tide Harry’s, had to stop selling crab fingers because wholesalers in the region stopped offering them.Just like in dozens of other overwhelmed industries in the booming economy, there are any number of factors causing the shortages and price spikes: The ports are congested; there aren’t enough fishermen; there aren’t enough truck drivers; and demand for seafood at restaurants is soaring.“Distributors used to hustle and bustle to get your business,” says Jay Herrington, who owns Fish On Fire, a restaurant that’s a 10-minute drive from Heretick’s place. Now, “you don’t get a delivery, or it’s a late delivery. Sometimes we have to go and pick it up.” That’s something he’d never seen before. Herrington recently raised entree prices, which range from $10 to $20, by as much as $3 to offset the higher costs. “There’s just no stopping it,” he says.‘Serious Delays’Herrington’s headache is part of the broader backlog at U.S. ports that has sparked complaints for consumers and companies across the U.S. economy and is a major driver of the higher prices, according to Gavin Gibbons, vice president of communications at the National Fisheries Institute. Labor shortages have caused “serious delays,” he said in an email. He estimated that port-related costs are on track to be 20 times higher for the group’s member companies than last year.A lack of fishermen is another fundamental problem. When restaurants shut down during the pandemic, it meant that a key buyer evaporated, according to a report by the National Oceanic and Atmospheric Administration. That resulted in financial losses for many in the industry and forced them to find work in new areas. Additionally, most fishermen in the U.S. are older than 40 and few young people are entering the field, according to Michael Priebel, manager of Keys Fisheries in Marathon, Florida.“A lot of people went into construction,” he said. “We see less and less people coming back every year because they are getting old and fishing is getting more expensive.”The hurdles don’t stop there. Higher prices for cod, for example, are due to a shortage of shipping containers, according to Sysco Corp., which is one of the world’s largest food distributors and wholesalers. Lobster, meanwhile, has seen low inventory since Covid-19 restrictions in Canada last summer reduced boat crews going out to sea for prime-season catching, Sysco said in an email. Supplies are currently being replenished as Maine’s season progresses, but prices remain high due to elevated demand.Back at High Tide Harry’s in Orlando, Heretick says he’s now struggling to find crab legs as well as the claws he needs for his crab fingers dish.The price on the crab meat he does find has more than doubled since January. Ditto for lobster. Then he rattles off a bunch of other cost increases he’s been hit with: paper products, liquor, bamboo cocktail skewers, gloves. He says those last two items are each up 200% or more. There are higher labor costs, too. Heretick recently bumped cooks up to $16 an hour and doled out increases to hosts and wait staff, too.So far, he’s eaten much of the higher costs, opting to keep prices mostly stable on the menu -- which lists the fried oysters dish at $19.99 and the shrimp-and-scallop scampi at $24.99 -- as he welcomes old customers back. He can’t keep going on like this, though, he says. One recent month, High Tide Harry’s raked in record revenue and yet Heretick was saddled with a $14,000 loss.“We hope,” he says, “that when we do have to have a little bit of a price increase, that everybody’s understanding that we did everything we could.”©2021 Bloomberg L.P." },
C:   { id="4311302598507374600"^^com.smartnews:article, link="https://www.abc.net.au/news/2021-07-29/abc-capricornia-turns-90-4rk-rockhampton-radio-station/100323628"^^tt:url, title="Celebrating 90 years of Aunty in central Queensland", date=new Date("2021-07-28T22:06:19.000Z"), source="Australian Broadcasting Corporation", author="By Erin Semmler and Paul Culliver", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210729/voice/summary_4311302598507374575.mp3"^^tt:url, content="Guy Menzies flies the first solo trans-Tasman flight from Sydney to New Zealand's West Coast, construction of the Empire State Building is completed and one of regional Queensland's first radio stations hits the airwaves.The year is 1931 and the broadcaster is ABC Capricornia, known then as 4RK.Today the Rockhampton station, which predates the ABC itself, celebrates nine decades of storytelling in central Queensland.From school fetes to emergency broadcasting, the region's devoted Aunty has done its best to share pride in the community's triumphs and provide essential information on the most challenging days.The ABC's managing director David Anderson said the station had \"a great tradition of providing outstanding regional reporting\".\"In 2021 we are committed to the region as much as ever: ABC Capricornia is as important to the local the community it serves today as it was when it first began broadcasting on 29 July 1931,\" he said. \"Some of our best journalists started their careers there, including Richard Carleton, Alan Hogan, Jane Singleton, Chris Masters and Tony Joyce.\"In recent years, the bureau has been an important source of emergency information covering cyclones, floods and bushfires.\"It's been there for all the major events, including the Moura mine disasters in the 1980s and 1990s, the launch of the Beef Expos in the late 1980s and most recently, bringing Australians the story of asylum seekers, the Murugappan family from Biloela.\"A resilient community It is a bureau that has shared thousands of stories and shaped hundreds of journalists, one of whom is National Indigenous Affairs correspondent Isabella Higgins.The soon-to-be Europe correspondent remembered covering Cyclone Debbie and ensuing flooding in 2017.\"It just made me realise the resilience of people who live on the Fitzroy River flood plains — that they're used to it, they know how to deal with it,\" she said.\"It was just really nice to see people looking after themselves at that time and looking after the community and really banding together to make sure people got what they needed.\"Higgins said a quirky cane toad catching story she covered at Kershaw Gardens with cameraman Russel Talbot was her favourite from the region.\"It was a research project where they were going to cut the glands out of the toads and they were going to make traps to put in river systems around the regions that would kill toads out of the waterways,\" she said.\"It was this amazing innovation that was being driven by regional Australia.\"But just the characters at this cane toad catching event, it was hilarious.\"A couple on their \"date night\" was the icing on the cake.\"This huge guy just picks [the cane toad] up with his bare hands, holds it out to his partner and goes, 'What do you reckon love? I caught this one for you',\" she said.\"I think Russ and I just looked at each other, we could not stop laughing.\"Four staff killed in crashCameraman Bruce Black had fond memories of working at the bureau from 1975 to 2002, but he would never forget October 24, 1983.It was the day rural reporter Bruce Anning, cameraman Joe Mooney, sound technician Bill Fryer and station manger Ralph Elphinstone died in a light plane crash on their way to a story.\"I'd just gone up the street for a walk at lunch time, came back and were told they were all killed in a plane crash out near Clermont,\" he said.\"I sort of didn't believe it when I was told but then everyone was crying ... so it was real alright.\"It was a devastating time.\"Black, who still lives in central Queensland, hoped Aunty would tell stories for years to come.\"I think the ABC is a really important part of the community and always has been,\" he said.\"I just hope there are enough supporters out there that support the ABC to keep it going into the future because it's got a wonderful history and does a wonderful job, I feel.\"'A special place in my heart'The 2010/11 floods, including the evacuation of Theodore, were an enduring memory for ABC Brisbane breakfast presenter Craig Zonca.\"I'll never forget that period of time it was just extraordinary,\" he said.\"At a moment of such hardship, you walk up to someone, you say you work for the ABC and they open up their heart and their life to you and you feel like you have a responsibility to share their story, share that moment with others.\"Then you can't help but get on the end of a broom yourself and help if someone's cleaning up after floodwaters have receded.\"Zonca, who started with Aunty in 2003, said he was \"a Rocky boy at heart\".\"I met my wife Jessica Hinchliffe at the ABC in Rockhampton, we now have a little daughter named Molly,\" he said.\"Let me tell you, the office on the banks of the Fitzroy River on Quay Street in Rockhampton, gee it holds a very special place in my heart.\"Thank you central QueenslandABC Capricornia's Chief of Staff Chrissy Arthur thanked the community for its support over the decades.\"We have had the privilege of sharing central Queensland stories and news widely – and we've been trusted over the decades to do that,\" she said. \"I first saw the powerful connection ABC reporters and broadcasters have with the community when I started at 4RK as a rural reporter in 1995.\"We are now working in a competitive and ever-changing media landscape where it's more important than ever for regional voices to be heard – and so we continue to find and tell those stories.\"" }
C: ]]
C: #[count=50]
C: #[more=true];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: What can you do?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
====
# recording/f324791053a584b5e895bfa0218b2b15
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ClGY8xc2EBd"^^com.icanhazdadjoke:id, text="Why are graveyards so noisy? Because of all the coffin." }
C: ]];
A: Why are graveyards so noisy? Because of all the coffin.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what time is it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="ClGY8xc2EBd"^^com.icanhazdadjoke:id, text="Why are graveyards so noisy? Because of all the coffin." }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(21, 33, 12) }
C: ]];
A: Right now, it's 2:33 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: configure spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.configure(device="com.spotify"^^tt:device("spotify"));
====
# recording/2f7fe32a19469324d41ae40e93672485
U: play the podcast all the presidents laywers
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "all the presidents laywers" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents laywers")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Sorry, there are no shows matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3fb594b46d296931269ff000eeb92380
U: what can you do
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: tell me a joke when i wake up
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: attimer(time=[$time.morning]) => @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
C: attimer(time=[new Time(8, 30)]) => @com.icanhazdadjoke.get()
C: #[results=[]];
A: Did you mean get the joke every day in the morning?
A: Alright, I will get the joke every day at 1:30 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_rule_enable_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/8e37cfbf7c2de7c404a3fc7b6469ad66
U: stop the music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play the latest by taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")))[1] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UAdDYrkCvVQftaKpL6q5f"^^org.thingpedia.media-source:playable("the lakes - original version"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the lakes - original version on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")))[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UAdDYrkCvVQftaKpL6q5f"^^org.thingpedia.media-source:playable("the lakes - original version"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing()
C: #[results=[
C:   { id="spotify:track:0UAdDYrkCvVQftaKpL6q5f"^^org.thingpedia.media-source:song("the lakes - original version"), artists=["spotify:artist:06HL4z0CvFAxyc27GXpf02"^^org.thingpedia.media-source:artist("Taylor Swift")], album="spotify:album:40cMfQDrBCDmOaWZuNEmKq"^^org.thingpedia.media-source:album("the lakes (original version)"), genres=["pop", "post-teen pop"], release_date=new Date("2021-07-24T00:00:00.000Z"), popularity=68, energy=40.6, danceability=19.7, __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get the currently playing track?
A: Currently playing the lakes - original version.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: when was this song released
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [release_date] of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing();
====
# recording/83d5f852dcb2e0e19bde12cbfaf1f82e
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: lower the volume
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.iot.speaker.lower_volume();
====
# recording/f01b232dab5b321bca441cb810697eab
U: play the podcast all the presidents lawyer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "all the presidents lawyer" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play the podcast all the presidents lawyer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what's my name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
A: Sorry, I don't know your name yet. Would you like to tell me?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: my name is giovanni
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
A: Your request was completed successfully.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's my name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
A: Your name is giovanni.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather next week
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: It will be cloudy on next Sunday at 5:00 AM in Redwood City, California and the temperature will be 15.3 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather on friday
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=20.7C, wind_speed=0.8mps, humidity=45.4, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-07-23T17:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: It will be sunny tomorrow at 10:00 AM in Redwood City, California and the temperature will be 20.7 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather on monday
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum monday), location=new Location(37.4863239, -122.232523, "Redwood City, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=20.7C, wind_speed=0.8mps, humidity=45.4, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-07-23T17:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum monday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=23.4C, wind_speed=1.7mps, humidity=41.2, cloudiness=90.6, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-26T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
A: It will be cloudy on next Monday at 11:00 AM in Redwood City, California and the temperature will be 23.4 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "all the presidents lawyer")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[]]
C: #[error=enum unset];
C: @org.thingpedia.builtin.thingengine.builtin.set_name(name="giovanni")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=15.3C, wind_speed=0.6mps, humidity=78.2, cloudiness=54.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-25T12:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum friday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=20.7C, wind_speed=0.8mps, humidity=45.4, cloudiness=0, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, date=new Date("2021-07-23T17:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum monday), location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { temperature=23.4C, wind_speed=1.7mps, humidity=41.2, cloudiness=90.6, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-07-26T18:00:00.000Z"), location=new Location(37.4863239, -122.232523, "Redwood City, California") }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: show me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/736d68b7b8ab3e0630a12eb233d78170
U: what can you do
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: show me the news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
C: @com.smartnews.article()
C: #[results=[
C:   { id="4312977115906583600"^^com.smartnews:article, link="https://www.yahoo.com/lifestyle/suzanne-somers-aging-130025805.html"^^tt:url, title="Suzanne Somers 'proud' of nearly-nude 'birthday suit' photo: 'I was 73 and it was natural'", date=new Date("2021-08-02T13:00:25.000Z"), source="Yahoo Lifestyle", author="Kaitlin Reilly", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312977115906583625.mp3"^^tt:url, content="This is the second of three installments in Yahoo Life's Unapologetically Suzanne video series with Suzanne Somers.At 74, Suzanne Somers is thriving: The Step by Step alum has a great sex life with her husband, Alan Hamel, and is happy to rock short shorts whenever the temperature climbs high enough — as it often does in her home of Palm Springs, Calif. And sometimes, clothes are totally optional — such as when, in 2019, Hamel snapped a photo of her nearly nude, crouching down in some grass. The picture of Somers quickly went viral. View this post on InstagramA post shared by Suzanne Somers (@suzannesomers)\"To make it look like I was in the grass, I pulled my straps down and it was pretty cleavage-y. I wasn't nude,\" she tells Yahoo Life. \"I had no idea it was going to go viral, but it went viral because I was 73 and it was natural. I am proud of that picture.\"In Somers's three-part series for Yahoo Life, Unapologetically Suzanne, the star shares why she doesn’t worry about aging — and why she would never want to be 24 again.\"Chronologically I am old, but I'm not old,\" Somers says. \"I'm looking forward to the next three decades, honestly.\"She credits her optimistic outlook for her joy, explaining, \"Whenever I feel any negative coming into my brain, I push it away and exchange it with something positive, something that reeks of gratitude and has served me so well.\"One other way she makes sure she stays happy and healthy? By sticking to a healthy diet and cutting out processed food — a lifestyle choice she focused on after she was diagnosed with breast cancer in 2001.\"I eat as though my life depends upon it because I have had cancer,\" she explains. \"I do believe my body and my life depend on the food that I eat.\"\"I have good hair and I have good skin and I'm not terribly wrinkled. And the wrinkles I have don't bother me because I deserve some at 74.\"And she also deserves to dress exactly how she wants — regardless of what the \"trolls\" have to say about it.\"I love the way my body looks. I wear short shorts at 74 'cause it's hot where I live,\" she says. \"That picture of me in those short shorts was a few months ago. My granddaughter was staying overnight [at the time] and she came down the stairs and went, ‘Look at us, we’re dressed exactly the same.'\" View this post on InstagramA post shared by Suzanne Somers (@suzannesomers)While Somers may twin occasionally with her 25-year-old granddaughter, she has no interest in returning to that time in her life.\"Right now, if you said, 'Suzanne, you can be 24 again,' I don't think I would take that,\" she says. \"I like it better now.\"After all, for Somers and Hamel, these really are their \"golden years.\"\"We go out, we dance, I get dressed up. I wear cocktail dresses. I wear high heels,\" she says. \"So I don't think life could be better.\"And it’s more than just life in her 70s that Somers is happy with.\"I know this sounds weird, but I really like who I am,\" she explains. \"I really like me.\"" },
C:   { id="4312847673502730000"^^com.smartnews:article, link="https://apnews.com/article/joe-biden-business-bills-474bc149c0d9867e0b6636bf7695ea85"^^tt:url, title="$1T infrastructure bill gets first action as senators dig in", date=new Date("2021-08-02T04:35:06.000Z"), source="Associated Press", author="By KEVIN FREKING and LISA MASCARO", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312847673502730059.mp3"^^tt:url, content="WASHINGTON (AP) - Senate Majority Leader Chuck Schumer sought to speed up consideration of a nearly $1 trillion bipartisan infrastructure package Monday, promising that Democrats would work with Republicans to put together amendments. GOP senators cautioned that they needed time to digest the massive bill. Formally the Infrastructure Investment and Jobs Act, the proposal clocked in at some 2,700 pages late Sunday after a hurry-up-and-wait rare weekend session. The final product was not intended to stray from the broad outline a bipartisan group of senators had negotiated for weeks with the White House. Schumer has said a final vote could be held \"in a matter of days.\" \"Let's start voting on amendments,\" Schumer said as the Senate opened for business on Monday. \"The longer it takes to finish the bill, the longer we will be here.\" A key part of President Joe Biden's agenda, the bipartisan bill is the first phase of the president's infrastructure plan. It calls for $550 billion in new spending over five years above projected federal levels - one of the most substantial expenditures on the nation's roads, bridges, waterworks, broadband and the electric grid in years. The Republican leader, Sen. Mitch McConnell of Kentucky, will play a key role in the bill's final outcome. So far, he has sided with those voting to allow debate to proceed, but he has not signaled how he will ultimately vote. He described the bill Monday as a \"good and important jumping off point\" for a robust, bipartisan amendment process. He also warned Democrats against setting \"any artificial timetable.\" \"Infrastructure is exactly the kind of subject that Congress should be able to address across the aisle,\" McConnell said. Senators and staff labored behind the scenes for days to write the massive bill. It was supposed to be ready Friday, but by Sunday, even more glitches were caught and changes made. Late Sunday, most of the 10 senators involved in the bipartisan effort rose on the Senate floor to mark the unveiling of the text. \"We know that this has been a long and sometimes difficult process, but we are proud this evening to announce this legislation,\" said Sen. Kyrsten Sinema, D-Ariz., a lead negotiator. The bill showed \"we can put aside our own political differences for the good of the country,\" she said. Sen. Rob Portman of Ohio, a Republican negotiator, framed the legislation as something that would help the U.S. better compete with China and would make the \"economy more efficient, more productive\" after years of struggle getting a public works bill off the ground. \"People have talked about infrastructure in this city forever,\" Portman said. Over the long weekend of starts and stops, Schumer repeatedly warned that he was prepared to keep lawmakers in Washington for as long as it took to complete votes on both the bipartisan infrastructure plan and a budget blueprint that would allow the Senate to begin work later this year on a massive, $3.5 trillion social, health and environmental bill. Republicans counter that they just had a chance to begin fully reviewing the bill late Sunday. \"We shouldn't sacrifice adequate time on this bill merely because the Democratic leader would like to spend next week jamming a 100% partisan piece of legislation through the United States Senate,\" said Sen. John Thune of South Dakota. Among the major new investments, the bipartisan package is expected to provide $110 billion for roads and bridges, $39 billion for public transit and $66 billion for rail. There's also to be $55 billion for water and wastewater infrastructure as well as billions for airports, ports, broadband internet and electric vehicle charging stations. The spending is broadly popular among lawmakers, bringing long-delayed capital for big-ticket items that cities and states can rarely afford on their own. Paying for the package has been a challenge after senators rejected ideas to raise revenue from a new gas tax or other streams. Instead, it is being financed from funding sources that might not pass muster with deficit hawks, including repurposing some $205 billion in untapped COVID-19 relief aid, as well as unemployment assistance that was turned back by some states and relying on projected future economic growth. Some Republicans are wary of another large spending bill after a series of COVID relief measures have boosted the national debt. \"I've got real concerns with this bill,\" said Sen. Mike Lee, R-Utah. Bipartisan support from Republican and Democratic senators pushed the process along, and Schumer wanted the voting to be wrapped up before senators left for their August recess. Last week, 17 GOP senators joined all Democrats in voting to start work on the bill. That support largely held, with McConnell voting yes in another procedural vote to nudge the process along in the 50-50 Senate, where 60 votes are needed to overcome a filibuster and advance legislation. Whether the number of Republican senators willing to pass the bill grows or shrinks in the days ahead will determine if the president's signature issue can make it across the finish line. The bipartisan bill still faces a rough road in the House, where progressive lawmakers want a more robust package but may have to settle for this one to keep Biden's infrastructure plans on track. The outcome with the bipartisan effort will set the stage for the next debate over Biden's much more ambitious $3.5 trillion package, a strictly partisan pursuit of far-reaching programs and services including child care, tax breaks and health care that touch almost every corner of American life. Republicans strongly oppose that bill, which would require a simple majority for passage. Final votes on that measure are not expected until fall." },
C:   { id="4312929660674511000"^^com.smartnews:article, link="https://www.texastribune.org/2021/08/02/san-antonio-water-supply-rural-wells/"^^tt:url, title="San Antonio built a pipeline to rural Central Texas to increase its water supply. Now local landowners say their wells are running dry.", date=new Date("2021-08-02T10:00:00.000Z"), source="The Texas Tribune", author="Erin Douglas", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312929660674510976.mp3"^^tt:url, content="Bob and Leslie Scouras, who have a well on their property in Lee County, are among dozens of landowners who lowered their water pumps when groundwater levels dropped after a project began last year to export groundwater from the rural Central Texas area to San Antonio. Credit: Sophie Park/The Texas Tribune Sign up for The Brief, our daily newsletter that keeps readers up to speed on the most essential Texas news. LEXINGTON — When the water finally arrived, San Antonio’s leadership could relax. The roughly 150-mile long water pipeline to the northeast guaranteed the city’s economic future and freed residents from the stress of droughts. “We have water security for decades to come,” said Robert Puente, president and CEO of the San Antonio Water System. Puente called the project, which came online in April 2020, the \"biggest achievement in our lifetimes\" to secure water for the city. The pipeline helped conserve the sensitive Edwards Aquifer, upon which San Antonio has historically depended for water. But less than a year after the pipeline began to suck water from a different aquifer in Central Texas for delivery to 1.8 million people, some residents in that rural area turned on their taps only to be greeted by air. “All so that the people in the city of San Antonio can water their lawns,” said Bob Scouras, 72, a landowner in Lee County. Out on County Road 411, Scouras and his wife, Leslie, 63, raised and later sold their horses, raised kids and sent them to college, built dozens of houses for birds, and are almost done building one for their family. They commuted to Austin until retirement, as did many of their neighbors. The community is mostly retirees who bought the lush farmland decades ago for cheap. They live near the wells that pump water to San Antonio, and their own well started sputtering less than a year after the Vista Ridge project went online. The Scourases live in a small farmhouse on their 20 acres of property. It was supposed to be temporary while they built their permanent home, but that took a little longer than expected (more than a decade). The house is almost done, and they plan to move in within a few weeks. But now, they’re not sure if they’ll have enough water to live on the land much longer. “They didn’t care that I would be out of drinking water — they would have green lawns,” he said. Leslie Scouras, left, and her husband, Bob Scouras, spent $5,000 to update the water pump on their property in Lee County. After groundwater levels retreated in area wells last year, some residents extended their pumps farther underground and upgraded to stronger equipment that can bring the water up from new depths — work that can cost hundreds to thousands of dollars. Credit: Sophie Park/The Texas Tribune The situation underscores how important groundwater has become to Texas’ water future as climate change brings more frequent droughts along with longer and hotter summers, at the same time as the state’s population approaches 35 million. During the state’s most recent severe drought in 2011, groundwater supplied almost two-thirds of the increase in water consumption. “The growth that we’ve had [in Texas], water ultimately underpins at a very fundamental level,” said Gabriel Collins, a Baker Botts fellow in energy and environmental regulatory affairs at Rice University. A severe drought in the Western U.S. this year has forced some areas to halt development due to water constraints, while other regions are battling widespread wildfires. A 2019 study authored by National Oceanic and Atmospheric Administration scientists found that droughts are part of the spiral of climate change: High temperatures from global warming combined with low soil moisture to produce stronger heat waves. But some rural landowners see the water export project in Central Texas not as a prudent response to climate change but as the perfect example of how unchecked urban expansion is encroaching on their lives. Pitting cities against rural dwellers and economic growth against environmental conservation, the Vista Ridge project, some experts said, is a preview of the water wars that will grow worse across Texas in coming decades. The fastest-growing use of water in Texas is no longer agriculture, but municipal, according to the state’s water plan, and municipal needs are projected to outstrip irrigation by 2060. The burgeoning development of groundwater is also happening in a state with a patchwork of water laws that essentially allows anyone who owns or leases enough land — and the water below — to pump water, regardless of whether it affects neighboring properties for miles around. And because political boundaries don’t follow the natural underground water flows and formations, local regulations on pumping don’t necessarily protect everyone whose water wells are affected. try{newswireFrames.autoInitFrames();}catch(err){} Since April 2020, when the project came online, groundwater levels in the area near Vista Ridge wells have plummeted, according to well data from the Post Oak Savannah Groundwater Conservation District. Texas is the third-largest groundwater pumper in the nation, according to U.S. Geological Survey data. The Vista Ridge project is permitted to pump nearly 56,000 acre-feet of water per year from the Carrizo and Simsboro formations. As the groundwater level retreats in their wells, residents have been forced to extend their pumps farther underground and upgrade to stronger equipment that can bring the water up from new depths. The work can cost hundreds to thousands of dollars, and there’s no guarantee they won’t have to drill deeper in the future. Bob and Leslie Scouras spent about $5,000 on such work. Many of their older neighbors in the rural area were forced to do the same. “It’s all about the money, and it’s all about the growth,” Bob Scouras said. “It’s not about anyone being thirsty.” Leaders in San Antonio disagree. “The economic generators of the U.S. are cities,” said Richard Perez, CEO of the San Antonio Chamber of Commerce. “Rural areas are still important,” he said, “but cities are what is driving the state and the country.” The Vista Ridge pump station in Burleson County is operated by EPCOR, a Canadian utility company. Credit: Sophie Park/The Texas Tribune Water levels sink Private water marketers worked over the course of a decade to put together thousands of water leases from rural landowners in the rolling and lush cattle ranch land of Burleson and Milam counties, about 50 miles east of Austin, to make the Vista Ridge project possible. The 18 water wells tap the Carrizo and Simsboro formations of the Carrizo-Wilcox Aquifer, which underlies a long, narrow swath of the state from its southwest border to East Texas. Now operated by EPCOR, a Canadian utility company, the wells connect to the pipeline that runs southwest to a water station in Bexar County. In the Post Oak Savannah Groundwater Conservation District, which includes Milam and Burleson counties, more than a third of its water pumped from the Carrizo and almost three fourths of its pumped water from the Simsboro is flowing to San Antonio, according to data from the district. There, the imported water now fills about 20% of the city’s daily water needs. Beginning last fall, dozens of landowners in Lee, Burleson and Milam counties — including some beyond the boundaries of the local groundwater district — began to notice problems with their wells as water dropped below the level their pumps could reach. George Rice, a groundwater hydrologist in San Antonio who represented landowners opposed to the project, said he wasn’t surprised that residents now need to lower their pumps. The model that Rice created for his analysis in 2015 and 2016 predicted that, in one year of pumping, the Carrizo formation’s water level would drop by 54 feet within 5 miles of the Vista Ridge pumping, and 19 feet within a 10-mile radius in what is called the “confined zone” of the aquifer — pressurized sections of the aquifer that are sandwiched between impermeable rock or sand above and below. Such drops can put water levels out of reach of local residents’ pumps. “If they’re lucky, they’ll just have to lower their pump, or if they’re unlucky, they’ll have to deepen their wells, which is more expensive,” Rice said. Dan Martin, a retired cattle rancher who lives near the Vista Ridge wells in Burleson County, said his water stopped flowing while he was in the shower, “all soaped up.” He spent about $10,000 to fix the problem with his well, which he uses both for his home and 35 cattle — he had to pay for a new pump and piping to take the well 380 feet deeper. Data from the Post Oak Savannah Groundwater Conservation District, where the Vista Ridge wells are located, confirms anecdotal reports from residents. The district regulates use of groundwater in Milam and Burleson counties, but its decisions can also affect the aquifer’s conditions beyond the political borders. The district’s data shows water levels in several wells nearby have dropped dramatically. At a water well on County Road 324, about five miles from a cluster of Vista Ridge wells, water levels have sunk almost 100 feet since April 2020. That’s more than the well’s water had dropped in the 30 years since the district’s records began. try{newswireFrames.autoInitFrames();}catch(err){} The change also cannot be explained by a drier year than normal. During the 2011 drought, which was much more severe than the conditions in 2020, the well near Caldwell lost only about 8 feet of water. But the dropping water levels are allowed — even expected — under the permits that Vista Ridge received from the Post Oak Savannah Groundwater Conservation District, as long as the project doesn’t exceed its permitted pumping limit. “How we developed the wellfield ensured that there was sufficient spacing and pumpage rates so that any potential decline over time would be well within the limits [set by the groundwater district],” said Mark Janay, operating partner at Ridgewood Infrastructure, a New York infrastructure company that is the majority owner of the Vista Ridge project. When asked how the company has mitigated impacts to local landowners’ wells, Janay said the company draws primarily from the deeper Simsboro formation, which landowners don’t rely on, and that the pumping from the Carrizo is limited by the local groundwater district. Ronnie McKee, left, and his wife, Nancy McKee, spent $720 to lower the water well pump at their home in Lee County in November. The well’s water level had dropped 43 feet in seven months, more than it had in the previous 30 years. Credit: Sophie Park/The Texas Tribune Hydrologists for Ridgewood and the groundwater district said the impacts to the water levels should taper off after a big initial drop. That’s what the groundwater districts are now monitoring for. In Lee County, Nancy and Ronnie McKee spent $720 to lower their well pump in November. Well levels had plunged by 43 feet in seven months, more than in the previous 30 years. Nancy McKee said she attended public meetings in the years before the project began operating and was told she had nothing to worry about. “They said, ‘It’s not going to affect you,’” she said. “The proof is in the pudding.” McKee said she and her neighbors feel forgotten by local officials and ignored in the process of endless urbanization. “We’re just regular people,” she said. “For this to come up and be such an expense for us is so disheartening.” San Antonio thirsts for security San Antonio began to seriously consider diversifying its water supply in the 1990s when environmentalists won a lawsuit to protect the Edwards Aquifer, which the city had relied upon for decades. Overuse was causing damage to endangered species, and as a result, the city’s allowed extractions from the aquifer were cut by 44% during severe droughts. San Antonio began to look elsewhere for water — a politically arduous task because importing water would be extremely expensive and potentially damaging to the environment. But in 2011, the political climate shifted: One of the worst droughts in Texas history convinced San Antonio’s City Council to approve a water rate hike for water development. Suddenly, local politicians were in favor of building a desalination plant, practicing more aggressive water conservation and building the $3 billion Vista Ridge pipeline. The business community went on a “quest” to diversify water sources because fears of water shortages were hurting economic development, said Perez, the San Antonio Chamber of Commerce CEO. “The 2011 drought was happening right during the time that we were starting to develop [Vista Ridge],” said Puente, of the San Antonio Water System. “The public’s perception of the urgency and need for the project was heightened.” Most major cities in Texas rely on surface water, like reservoirs, for municipal needs. But those sources are particularly vulnerable to drought because the water evaporates. The 2011 drought caused billions in economic damages to the agricultural industry, strained the state’s electric grid and forced nearly 1,000 public water systems to restrict water usage; 23 water systems were within 180 days of completely running out of water. In San Antonio, the city relied on water it had previously pumped from the Edwards Aquifer and stored underground. Because of such possibilities in the future, San Antonio’s strategy to diversify its water supply with a desalination plant, conservation and the Vista Ridge groundwater pipeline could be considered a model for other cities. The alternative — building a new reservoir — requires buying the land and relocating people, farms or businesses on it, then damming a river or creek and flooding the land. Janay, of Ridgewood Infrastructure, thinks more groundwater projects will likely be necessary across Texas. It’s a matter of managing the impacts, which he thinks the Vista Ridge project has done by adhering to the groundwater district’s limits. “We’re going to have to be more thoughtful in developing future supplies, and we may have to go further and transport water further,” Janay said. Continued groundwater development can occur, he said, “in a thoughtful manner that is supported by science.” “We need to find that balance,” he said. Leslie Scouras, 63, owns property in Lee County, in a community of mostly retirees who bought the lush farmland for cheap decades ago seeking peace and quiet. Scouras and her husband believe the Vista Ridge pump station, a few miles away, has impacted the water level in the well they depend on. Credit: Sophie Park/The Texas Tribune Texas’ “patchwork” of groundwater regulation Despite the growing importance of groundwater, Texas is the only state in the West — where water is particularly scarce — that still uses the “rule of capture,” which essentially allows landowners to pump as much groundwater from their property as they want without facing liability from surrounding landowners. But Collins, of Rice University, said a patchwork of local rules from the 98 groundwater conservation districts in the state means the rule is applied in many ways, including where different districts have different rules for the same large aquifer. More than 20 districts regulate water use for the massive Carrizo-Wilcox, which spans from East to Southwest Texas. The Vista Ridge Project took advantage of those differences. San Antonio water officials said the Post Oak Savannah Groundwater Conservation District, where the project is now located, allowed landowners to lease their water for several decades at a time, while many other districts limit leases to a few years. “[The district] has a philosophy that a lot of other groundwater districts do not, and that is that this is a private water resource: If you want to sell it, sell it,” said Puente of the San Antonio Water System. “They regulate it, but they still allow for those transactions to happen. “So this was the best water for us for two reasons: Geographically, the aquifer is very prolific, and politically, just as important, those rules in that county allowed for the exportation of water all the way to San Antonio.” Groundwater districts are charged by the Legislature to create a goal for how much water should be conserved in the coming decades, a target called “desired future conditions.” The districts use that goal to set limits on pumping. But those limits vary widely from district to district, and as long as a company pumps less than the permitted amount, the groundwater district isn’t obligated to intervene when a neighbor’s supply is affected. The Post Oak Savannah Groundwater Conservation District responded to dwindling groundwater levels with a well mitigation program that compensates landowners for the cost to lower their pumps or even drill a new well. Groundwater officials said the limits they’ve set in the district are sufficient to conserve water in the region, and the landowners who agreed to lease water for the project have a right to do what they want with the water below their land. “We’ve been diligent about being conservation-minded, but also respectful of property rights,” said Gary Westbrook, general manager of the groundwater district. “People have the right to sell their water if that’s what they want to do.” Outside that district, though, landowners who didn’t lease their water — or even know that their neighbors had done so — have seen water levels drop. The Scouras and McKee families both live in Lee County, in the Lost Pines Groundwater Conservation District. A shed on Ronnie and Nancy McKee’s Lee County property houses their water pump. Credit: Sophie Park/The Texas Tribune The Lost Pines district didn’t grant any permit to Vista Ridge, nor did it collect any fees from the project, but it will soon have to pay to fix wells. In response to complaints from landowners, James Totten, general manager of the Lost Pines district, said the district recently created a program to reimburse landowners for the cost to lower or upgrade their pumps, and it is considering a moratorium on pumping water in areas where the water levels have dramatically dropped in the last year. “We may not have the ability to control Vista Ridge, but we can say we won’t allow any project that would make the situation in that area worse on our side of the border,” Totten said. But those efforts won’t stop the longer-term impact of exporting water south to San Antonio, residents say. Bob Scouras is worried that if the water levels don’t stabilize, his neighborhood will soon have to ask the nearest water utility to build lines out to the property. “The big question is: Where the hell are we going to get our water in five years?” he said. “San Antonio is not real worried about us out here. We’re just a bunch of hayseeds [to them].” Disclosure: Rice University, the San Antonio Chamber of Commerce and the San Antonio Water System have been financial supporters of The Texas Tribune, a nonprofit, nonpartisan news organization that is funded in part by donations from members, foundations and corporate sponsors. Financial supporters play no role in the Tribune's journalism. Find a complete list of them here. Join us Sept. 20-25 at the 2021 Texas Tribune Festival. Tickets are on sale now for this multi-day celebration of big, bold ideas about politics, public policy and the day’s news, curated by The Texas Tribune’s award-winning journalists. Learn more." },
C:   { id="4312649870834933000"^^com.smartnews:article, link="https://www.mashed.com/475635/fans-are-freaking-out-about-trisha-yearwoods-diamond-ring/?zsource=smartnews"^^tt:url, title="Fans Are Freaking Out About Trisha Yearwood's Diamond Ring", date=new Date("2021-08-01T15:27:49.000Z"), source="Mashed", author="Ashley Steinberg", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312649870834933395.mp3"^^tt:url, content="Country fans especially are no strangers to Trisha Yearwood and her iconic career. Country Fancast notes that the artist is best known for her songs \"She's in Love with the Boy,\" \"Walkaway Joe\" and \"In Another's Eyes.\" She has also sold more than 15 million albums worldwide, and has nabbed three Grammy Awards, three Country Music Association Awards, and three Academy of Country Music Awards. But, beyond music, Yearwood has also ventured into the world of cooking, having written several well-selling cookbooks and hosting Food Network's show, \"Trisha's Southern Kitchen.\" But perhaps one of her biggest claims to fame is her marriage to another famous country singer, Garth Brooks. While Food Network claims she's a \"huge Kelly Clarkson fan,\" praising the fellow singer for her \"amazing and emotional\" voice, it's said Yearwood stays loyal to her husband and seems to try to be at his concerts as often as possible. Yearwood recently posted on Instagram about a bracelet she received from Brooks, from the organizers of Cheyenne Frontier Days festival, and thanked them for sending him home with a generous gift for her. But it's her diamond ring that appeared in the snap that really grabbed her followers' attention.Fans Couldn't Help But Notice The Giant Rock On Yearwood's Ring FingerWedding and engagement rings are not only cultural symbols, but ones that carry a lot of weight and attention. When a girl gets engaged, one of the first questions a friend asks is, \"Can I see the ring?\" So it's no surprise that the close-up photo of the huge rock on Trisha Yearwood's finger would demand attention from her Instagram followers after she innocently posted about the bracelet.Fans scrutinized every little detail of the jewelry with @vickisamples asking, \"Am I crazy...it looks like part of your ring is missing some diamonds on the right side of the band??\" while others like @princesstiffany1992 gushed, \"I'm not sure what's more beautiful your ring or your bracelet,\" followed by a ton of heart eye and fire emojis. And while the bracelet is big, bulky, and beautiful, the ring has a shine to it that just cannot be ignored. Let's just hope she takes it off when she gets in the kitchen and preps for her show.Read this next: The Untold Truth Of Trisha's Southern Kitchen" },
C:   { id="4313094525091320300"^^com.smartnews:article, link="https://www.upi.com/Health_News/2021/08/02/insecticide-neonicotinoid-bees-reproduction-study/2781627924388/"^^tt:url, title="Neonicotinoid insecticides harm bees even in small amounts", date=new Date("2021-08-02T16:54:59.000Z"), source="UPI", author="Kyle Barnett", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313094525091320228.mp3"^^tt:url, content="Bees suffer reproductive problems from even small amounts neonicotinoid insecticides, researchers said in a study published Monday. File Photo by Betty Shelton/Shutterstock Aug. 2 (UPI) -- A type of insecticide, called neonicotinoids, is harmful to bees when applied to commercial crops, even at levels on par with instructions on their labels, according to a study published Monday in the journal Proceedings of the Royal Society B: Biological Sciences. Neonicotinoid insecticides are chemically similar to nicotine, and act on similar receptors in insects, meant to control pests that eat plants. The widely used chemicals have been found, however, to harm beneficial insects the same as they do plant-consuming ones -- and are more harmful when used at higher levels, such as in ornamental plants. \"Neonicotinoids are often used on food crops as a seed treatment,\" Jacob Cecala, an entomolgist and lead author on the study, said in a press release. \"But they're usually applied in higher amounts to ornamental plants for aesthetic reasons. The effects are deadly no matter how much the plants are watered.\" Researchers raised bees in a lab environment with flowing plants with and without insecticide applied and also at differing levels of irrigation. The researchers found that 90% of bees subjected to neonicotinoid insecticides had trouble reproducing afterward, regardless of irrigation levels. While increased water made the incesticide less potent, the bees were still affected. The findings back up a 2020 study on bee reproduction which found larval development in bees was delayed by 10 hours fowling exposure to neonicotinoids. That study relied on a newly developed video technique allowing researchers to see inside beehives. Researchers said at the time that their observations \"could point to the disruptions in nursing behavior due to neonicotinoids described by other scientists.\" The insecticides caused less damage to bees when used in agricultural crops, researchers suggested, though other studies have suggested that may not always be the case. In 2019, scientists found the insecticide was used in the commercial soybean to \"negligible\" benefits, though pesticide makers and farmers disagreed with the findings. \"It's not as simple as 'don't use pesticides' -- sometimes they're necessary,\" Cecala said. \"However, people can look for a different class of insecticide, try to apply them on plants that aren't attractive to bees or find biological methods of pest control,\" Cecala said." },
C:   { id="4312602642443410400"^^com.smartnews:article, link="https://metro.co.uk/2021/08/01/tokyo-olympics-who-is-competing-in-the-mens-100m-final-15020484/?ito=smart-news"^^tt:url, title="Tokyo Olympics: Who is competing in the Men’s 100m final?", date=new Date("2021-08-01T11:56:45.000Z"), source="Metro", author="Sophie Dickinson", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312602642443410524.mp3"^^tt:url, content="A new generation of sprinters are taking part in the games (Picture: Getty) Usain Bolt has retired from sprinting, meaning a new fastest man could be crowned at the Tokyo Olympics. The Jamaican won big at Rio 2016 in the 100m, but there’s a host of new champions vying for the new world record. Britain have won gold for gymnastics and diving among others, but it’s the US that are tipped to win the 100m final. Read on to find out more. Usain Bolt has retired – so who will take the crown? (Picture: Getty) Who is competing in the Men’s 100m final? The below athletes are tipped for the Men’s 100m final (odds via Betfair): Andre de Grasse – Canada 9/4Ronnie Baker – United States 5/2Trayvon Bromell – United States 4/1Akani Simbine – South Africa 13/2Marcell Jacobs – Italy 17/2 Fred Kerley – United States 17/2Zharnell Hughes – Great Britain 22/1Enoch Olaoluwa Adegoke – Nigeria 22/1Su Bingtian – China 33/1Chijindu Ujah – Great Britain 50/1 Great Britain have Reece Prescod and Zharnel Hughes and CJ Ujah, with all three eyeing up a place in the final. {\"@context\":\"https:\\/\\/schema.org\",\"@type\":\"VideoObject\",\"name\":\"Metro.co.uk\",\"duration\":\"T3M45S\",\"thumbnailUrl\":\"https:\\/\\/i.dailymail.co.uk\\/1s\\/2021\\/07\\/26\\/20\\/45919999-0-image-a-28_1627328403807.jpg\",\"uploadDate\":\"2021-07-26T20:45:18+0100\",\"description\":\"Taekwondo competitor Bradley Sinden: 'I want to clinch gold in Paris'.\",\"contentUrl\":\"https:\\/\\/videos.metro.co.uk\\/video\\/met\\/2021\\/07\\/26\\/4439111958367848869\\/480x270_MP4_4439111958367848869.mp4\",\"height\":270,\"width\":480} To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video Prescod has been disqualified for a false start, meaning he’s now out of the competition. How to watch the Men’s 100m final The Men’s 100m final will be shown on BBC One at around 1:45pm today. It will also be available via iPlayer and the red button. MORE : Max Whitlock makes history with Olympic gold for Team GB in men’s pommel horse MORE : Alexander Zverev follows up Novak Djokovic shock to seal historic Olympic gold Follow Metro across our social channels, on Facebook, Twitter and Instagram Share your views in the comments below" },
C:   { id="4313021102122085000"^^com.smartnews:article, link="https://radaronline.com/p/alex-rodriguez-big-dick-energy-melanie-collins-dating-ibiza-private-jet-photos/"^^tt:url, title="Alex Rodriguez Has 'Big D--- Energy' Leaving Ibiza With Blonde Bombshell Melanie Collins On Private Jet", date=new Date("2021-08-02T15:38:51.000Z"), source="RadarOnline", author="Whitney Vasquez", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313021102122084888.mp3"^^tt:url, content="That was some vacation! Alex Rodriguez has returned home with \"big d--- energy\" and blonde NFL host Melanie Collins after a relaxing getaway hopping around Europe. MegaThe freshly turned 46-year-old has declared he's gotten his mojo back just four months after Jennifer Lopez ended their engagement. Taking to his social media over the weekend, A-Rod wore a suit and a smile while informing his nearly 4 million Instagram followers that he's \"stepping out with the big D energy.\" Appearing happier than he's ever been, the ex-Yankee said he's returned home \"determined, darling, and dapper AF.\" Swinging around that big d energy, A-Rod jumped on a private jet and headed out to Tampa, Florida for work.He also joked that his co-worker Matt \"is wishing I stayed overseas for another two weeks.\"MegaHow A-Rod got his groove back isn't a secret. During his time away, the former MLB star was caught spending some quality time with Melanie Collins. Heads turned when the NFL presenter was spotted straddling A-Rod on the back of his jet ski as the two whizzed by J Lo and Ben Affleck's giant sea vessel in Saint-Tropez. He attempted to dangle Collins in his ex's face every chance he got. When A-Rod wasn't in the water, he was on the land with Collins and showing up to every store that J Lo had entered just hours before.Narrowly missing his ex-fiancée didn't seem like a concern to A-Rod, who was clearly living his best life with Collins. Despite claiming they are just \"friends,\" he certainly looked cozy with the 35-year-old.If there was any doubt, A-Rod seemingly solidified their status when they left Saint-Tropez and headed to Ibiza where they enjoyed a night on the town and romantic dinner for two. They were also seen boarding A-Rod's private jet together, heading back to the States after their whirlwind trip. While the ex-slugger was overseas celebrating his 46th birthday, J Lo just happened to be there too. The Love Don't Cost a Thing singer got the hell out of Dodge with Affleck to ring in her 52nd birthday, which was just three days before A-Rod's. Talk about awkward -- not only did the exes end up in the same place, but J Lo's assistant had to cancel lunch plans when she learned A-Rod was at the exact restaurant the Hustlers actress wanted to take Affleck. arod/Instagram" },
C:   { id="4312859554237913000"^^com.smartnews:article, link="https://www.insider.com/tennessee-gop-rep-david-byrd-covid-months-take-virus-seriously-2021-8"^^tt:url, title="Tennessee GOP rep who rejected masks now says COVID-19 is real and dangerous after his 8-month battle with the virus", date=new Date("2021-08-02T05:23:36.000Z"), source="Insider", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4312859554237912910.mp3"^^tt:url, content="State Rep. David Byrd at a special session of the Tennessee House in 2019. Mark Humphrey/AP Photo Rep. David Byrd used to support the idea that the media was sensationalizing the COVID-19 pandemic. In his eight-month battle with COVID-19, he developed pneumonia, jaundice, and liver failure. He said he hoped that sharing his near-death experience would help people take the virus seriously. Visit Insider's homepage for more stories. Tennessee state GOP Rep. David Byrd is urging people to take COVID-19 seriously and get vaccinated after his eight-month struggle with the coronavirus, in which he was hospitalized and put on a ventilator for 55 days.In a statement on Friday, he said he was diagnosed with COVID-19 the day before Thanksgiving and admitted to the hospital on December 5.He had voted for a resolution in June 2020 that accused the media of sensationalizing the COVID-19 pandemic. And he attended a retreat for House Republicans last November, when cases were surging in the state, involving barbecues and boat tours - many attendees were unmasked.But after having COVID-19, Byrd said he wanted people to take the virus seriously, saying it's real and dangerous.\"Up until this point in my life, I've been pretty healthy and active. Foolishly, I believed this virus only seriously affected people who are at high risk,\" he said in the statement, obtained by NewsChannel 5 Nashville.Byrd said that the virus took over his lungs with \"lightning speed\" and that he got pneumonia. He was placed on a ventilator in the intensive-care unit, and his family faced the possibility of a funeral, he said.\"I got sicker and sicker, and more and more anxious,\" he said. \"Every breath was pure agony.\"When his lungs got better, his liver started to fail, and he developed jaundice, again putting him at risk of death, he said. Overall, he spent eight months in the hospital and a rehabilitation facility, he added.Byrd said he hoped that sharing his experience would show that the virus is \"an enemy that knows no skin color, economic status or political affiliation.\"\"I have never been against taking the Covid-19 vaccine, but I understand the concerns of those who are hesitant. To them, I would say Covid is real and it is very dangerous,\" he said.\"It is a disease that wants to kill us. Please take it seriously. Please consider getting vaccinated. This is an issue that should not divide us,\" he continued.In 2018, three women accused Byrd of sexually assaulting them when he was their high-school basketball coach. Byrd did not directly deny the accusations but said he was unable to recall the incidents the women described. Following the accusations, Byrd's fellow representatives called for him to step down.Read the original article on Insider" },
C:   { id="4313041364129427000"^^com.smartnews:article, link="https://1061kissfm.iheart.com/content/2021-08-02-watch-argument-over-seat-reclining-leads-to-brawl-on-austin-bound-flight/"^^tt:url, title="WATCH: Argument Over Seat Reclining Leads To Brawl On Austin-Bound Flight", date=new Date("2021-08-02T15:41:00.000Z"), source="KISS FM - Dallas, TX", author="Anna Gallegos", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313041364129426834.mp3"^^tt:url, content="Photo: Getty ImagesTexas cops had to escort two men off a plane over the weekend after an argument over a seat turned physical. The two men were yelling at each other about a seat \"that couldn’t unrecline\" on a Sunday (August 1) afternoon American Airlines flight from New Orleans, Louisiana, to Austin, Texas, a passenger told KXAN. \"When the plane finally landed in Austin and the seat belt sign was turned off, both men jumped up and physically started fighting each other,\" another anonymous passenger told KEYE. A passenger video shows the two men trading blows and pushing each other into innocent passengers while the plane is parked at a gate at the Austin-Bergstrom International Airport. On the video, a passenger can be heard yelling \"it's not worth it\" multiple times as a flight attendant physically gets between the two men. The two men continue to yell at each other even after the punches stopped flying. One of the men called another passenger a \"narco b****\" after being forced back into his seat. Austin police officers were called to escort the two men off the plane, but it's unclear if either were arrested. American Airlines wouldn't comment on the flight but confirmed that an \"altercation between passengers\" occurred. ***The following video contains profanity and fighting. *** WATCH: Brawl breaks out on plane at ABIA over alleged seat-reclining disputeWATCH: Two people were detained at the Austin airport on Sunday after punches were thrown allegedly over a plane seat that was stuck in the reclined position. FULL STORY: https://cbsaustin.com/newsletter-daily/two-detained-at-austin-airport-following-brawl-over-reported-seat-reclining-dispute ***WARNING: This video contains graphic language that may be offensive to some viewers***Posted by CBS Austin on Sunday, August 1, 2021" },
C:   { id="4313094392974946300"^^com.smartnews:article, link="https://www.charlotteobserver.com/entertainment/arts-culture/article252927728.html"^^tt:url, title="These artists have a goal for Charlotte: Prioritize diversity, equity and inclusion", date=new Date("2021-08-02T20:56:21.000Z"), source="Charlotte Observer", author="Liz Rothaus Bertrand", audio_url="https://oval-project.s3-ap-northeast-1.amazonaws.com/data/210803/voice/summary_4313094392974946131.mp3"^^tt:url, content="In the midst of social justice protests last summer, a group of local artists and arts leaders began meeting online to discuss an ugly truth: The arts and entertainment world has long been permeated by inequities that hinder the careers of many Black artists and other artists of color. Now that group has evolved into a new nonprofit organization, focused on taking action. Diversity On & Off Stage wants to serve as a resource and an accountability partner to help Charlotte-area arts organizations make substantive changes to ensure opportunities and support exist for everyone. On Aug. 30, the group will officially celebrate its one-year anniversary with its first public event in person, which will be free. Registration details will be forthcoming on the group’s Instagram and Facebook pages, along with its website, diversityonandoffstage.org. Here’s a look at how the past year has gone and where the group is headed. Raising awareness The idea for launching conversations initially came from members of Queen City Comedy, who had seen some of the nation’s leading improv and sketch comedy organizations falter under public scrutiny for a lack of diversity. They wanted to be proactive in Charlotte and reached out to other arts organizations. Diversity On & Off Stage hosted its first virtual gathering in July 2020, with artists and administrators from across a spectrum of creative fields. “In the beginning, it was raw emotion,” said Arlethia Hailstock, co-chair of Diversity On & Off Stage. She also serves as the community initiatives leader at Children’s Theatre of Charlotte. “It was tons of people joining a call and just spilling their guts.” The group’s original objective was to provide a safe space for artists of color to share their personal experiences with discrimination they encountered locally while pursuing their art. Over time, the monthly conversations shifted focus from the arts community as a whole to discipline-specific chats on music, dance, comedy, film, visual arts and fashion. (Past events are archived on the group’s Facebook page.) Chats about the same issues kept recurring: Artists have been unable to access needed funding or venue space to showcase their art. Encouraging leaders from larger organizations and venue owners to join the Zoom calls to hear these first-hand accounts also has been an intentional part of the process. “I’ve really tried to focus on listening,” said Blumenthal Performing Arts President and CEO Tom Gabbard, who regularly attends the collective’s monthly Zoom calls. “At first there was a very intentional goal to talk about hard things and things where people had run into obstacles or been discriminated against, or found it difficult for them to pursue their art because of their color,” he said. “And so for us to hear those stories and understand the difficulty that artists had faced — that was really important.” Gradually, the conversation steered toward ways to do better and inspiring examples of people who are creating new models of success. The hurt is real and needed to be acknowledged, Gabbard said, but the conversation didn’t get stuck there. “It moved ahead, and I give credit to the group for doing that.” The group’s leaders say clearly defining its mission was key. Deciding to become a nonprofit organization to better facilitate the ongoing nature of their work was also significant. “I feel very proud to be a part of it because I see the shift,” said Ana Ogbueze, founder of the hip-hop studio NC Dance District and vice chair of the organization. “I see the mindset changing. I see people having conversations, and I think it’s just a beautiful thing. I feel like somebody just had to get the ball rolling, and now it’s about keeping it rolling.” Taking action The nonprofit has created an online pledge through which individuals and organizations commit to prioritizing diversity, equity and inclusion. For organizational leaders, this public commitment also calls for instituting continual education for staff and board leaders, as well as setting a timeline to build and implement a plan of action. To date, 44 individuals and organizations have taken the pledge. Establishing this commitment will help the organization assess progress, provide resources and act as an accountability partner. “We know it’s going to take time — this is a big shift,” said co-chair Tiffany Bryant-Jackson, who is also the founder of Open Cage Productions. But she has been gratified to see some organizations already making moves to address problems. For instance, Blumenthal Performing Arts — where she works part time as a senior customer service representative — now has a diversity committee on staff that works to hold people accountable, including Board of Trustees members. She also cites Free Reign Theatre Company, which asked the nonprofit for help devising a plan to make its organization more inclusive, including seeking out diverse directors for productions. Gabbard said his experience with the On & Off Stage group has influenced changes to Blumenthal’s advertising practices for hiring new positions or posting casting notices. “We weren’t getting the opportunity in front of the right people or enough people,” Gabbard said. “And by limiting the advertising, it perhaps unintentionally conveyed some exclusivity that we didn’t want.” The nonprofit is committed to advocating for real change, Bryant-Jackson said. “We can’t keep doing the same thing every cycle of a big injustice,” she said. “It’s performative acts that maintain the status quo.” Moving forward Diversity On & Off Stage would like to see other changes, too, including: Organizations looking carefully at their board and leadership composition to make sure they are inclusive.Collaborations between more established arts organizations and smaller groups led by people of color to increase access to performance space and other resources.Internships and mentorships to support more women and people of color wanting to break into fields such as entertainment booking at music and comedy venues, which are dominated by white men.Increased representation on stages throughout the year, not just in February, during Black History Month. “We’ve really just scratched the surface,” Hailstock said. “So much of this work was productive and successful over the past year because we were stuck at home and couldn’t turn away from George Floyd, Breonna Taylor, Ahmaud Arbery and we all were forced to look at it. And that, in turn, forced organizations to hold mirrors up to themselves ... “We can’t get weary because we are in place again, and we’re excited to hug people again,” she said. “There’s still so much work to be done.” More arts coverage Want to see more stories like this? You can join our Facebook group, “Inside Charlotte Arts,” at https://www.facebook.com/groups/insidecharlottearts/" }
C: ]]
C: #[count=50]
C: #[more=true];
A: Here are the news.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_many;
U: can you tell the date
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_date();
====
# recording/ecd08afa31db9bdabb8f13877768333c
U: what's my name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
A: Your name is giovanni.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the temperature outside
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [temperature] of @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { location=new Location(37.4863239, -122.232523, "Redwood City, California"), temperature=22.1C, status=enum sunny }
C: ]];
A: It is sunny today in Redwood City, California and the temperature is 22.1 C.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the humidity
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: [humidity] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="giovanni" }
C: ]];
C: [temperature] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { location=new Location(37.4863239, -122.232523, "Redwood City, California"), temperature=22.1C, status=enum sunny }
C: ]];
C: [humidity] of @org.thingpedia.weather.current(location=new Location(37.4863239, -122.232523, "Redwood City, California"))
C: #[results=[
C:   { location=new Location(37.4863239, -122.232523, "Redwood City, California"), humidity=43.6, status=enum sunny }
C: ]];
A: The current weather in Redwood City, California is sunny. The humidity is 43.6 %.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0e03191245471940fa24714a3d6a013b
U: play the podcast all the presidents lawyer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "all the presidents lawyer" => @org.thingpedia.media-player.play(playable=id);
====
# recording/d2e020d03ed00eaffa91013aec492ad6
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/4ad00e2e2da979df18ef5edad4236e9b
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/7f51b06c25723f0aa169b9d84afe6f1e
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/8508c0923f0e01040653583e7ec27429
U: play the weekend
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("weekend")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7KxS1dL7Q7jxMkyb2ZvzXH"^^org.thingpedia.media-source:artist("Fury Weekend")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0SLVrAsEqTYcHFOKoDQGzb"^^org.thingpedia.media-source:playable("Another Brick In The Wall"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3RZZ8KnNq63Isfqo67KI4W"^^org.thingpedia.media-source:playable("Black To The Future"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4YyG15mMNRqjYCH3S7aBw0"^^org.thingpedia.media-source:playable("Knightriders"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6ElrKvNHLjtsmUqav1lrZl"^^org.thingpedia.media-source:playable("Dr. Online"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Adp5UsOveWYIsMP2ddkfJ"^^org.thingpedia.media-source:playable("Automatic Love - Extra Terra Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1r90nCKvPoWxSOLAWf0rKs"^^org.thingpedia.media-source:playable("Illumination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3mp3rEFAkam0fvsUzcBVU1"^^org.thingpedia.media-source:playable("12 To Midnight"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6nLlrtjFPS8wBETtkKvnLZ"^^org.thingpedia.media-source:playable("Signals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ePIF5AAQo9FvOJQdFof1z"^^org.thingpedia.media-source:playable("Euphoria"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5bPwnmPUsaSwHs7nBYAebf"^^org.thingpedia.media-source:playable("Gamechanger"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
A: Did you mean get music by weekend and then play the id on Spotify?
A: I played music by Fury Weekend on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play the weeknd
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("weeknd")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7KxS1dL7Q7jxMkyb2ZvzXH"^^org.thingpedia.media-source:artist("Fury Weekend")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0SLVrAsEqTYcHFOKoDQGzb"^^org.thingpedia.media-source:playable("Another Brick In The Wall"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3RZZ8KnNq63Isfqo67KI4W"^^org.thingpedia.media-source:playable("Black To The Future"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4YyG15mMNRqjYCH3S7aBw0"^^org.thingpedia.media-source:playable("Knightriders"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6ElrKvNHLjtsmUqav1lrZl"^^org.thingpedia.media-source:playable("Dr. Online"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Adp5UsOveWYIsMP2ddkfJ"^^org.thingpedia.media-source:playable("Automatic Love - Extra Terra Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1r90nCKvPoWxSOLAWf0rKs"^^org.thingpedia.media-source:playable("Illumination"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3mp3rEFAkam0fvsUzcBVU1"^^org.thingpedia.media-source:playable("12 To Midnight"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6nLlrtjFPS8wBETtkKvnLZ"^^org.thingpedia.media-source:playable("Signals"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ePIF5AAQo9FvOJQdFof1z"^^org.thingpedia.media-source:playable("Euphoria"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5bPwnmPUsaSwHs7nBYAebf"^^org.thingpedia.media-source:playable("Gamechanger"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1Xyo4u8uXC1ZmMpatF05PJ"^^org.thingpedia.media-source:artist("The Weeknd")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:37BZB0z9T8Xu7U3e65qxFy"^^org.thingpedia.media-source:playable("Save Your Tears (with Ariana Grande) (Remix)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0VjIjW4GlUZAMYd2vXMi3b"^^org.thingpedia.media-source:playable("Blinding Lights"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fBv7CLKzipRk6EC6TWHOB"^^org.thingpedia.media-source:playable("The Hills"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7MXVkk9YMctZqd1Srtv4MB"^^org.thingpedia.media-source:playable("Starboy"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:22VdIZQfgXJea34mQxlt81"^^org.thingpedia.media-source:playable("Can't Feel My Face"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:09mEdoA6zrmBPgTEN5qXmN"^^org.thingpedia.media-source:playable("Call Out My Name"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6bnF93Rx87YqUBLSgjiMU8"^^org.thingpedia.media-source:playable("Heartless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7szuecWAPwGoV1e5vGu8tl"^^org.thingpedia.media-source:playable("In Your Eyes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ch7LmS7r2Gy2kc64wv3Bz"^^org.thingpedia.media-source:playable("Die For You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4PhsKqMdgMEUSstTDAmMpg"^^org.thingpedia.media-source:playable("Often"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=44];
A: I played music by The Weeknd on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/770260fda95f0117dc041866f722becd
U: play blink 182
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("blink 182")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6FBDaR13swtiWwGhX1WQsP"^^org.thingpedia.media-source:artist("blink-182")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m1hi0nfMR9vdGC8UcrnwU"^^org.thingpedia.media-source:playable("All The Small Things"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1oTo3ijRbaDAtrjJrGAPSw"^^org.thingpedia.media-source:playable("I Miss You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4LJhJ6DQS7NwE7UKtvcM52"^^org.thingpedia.media-source:playable("What's My Age Again?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1fJFuvU2ldmeAm5nFIHcPP"^^org.thingpedia.media-source:playable("1 Date"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6WkSUgo1VdpzgtiXKlFPcY"^^org.thingpedia.media-source:playable("Dammit"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xpDh0dXrkVp0Po1qrHUd8"^^org.thingpedia.media-source:playable("Adam's Song"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2ydUT1pFhuLDnouelIv4WH"^^org.thingpedia.media-source:playable("The Rock Show"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:26AYR77170U49cMcXB7aRV"^^org.thingpedia.media-source:playable("Feeling This"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:24CRDgNOgA72JLL7PHFjgB"^^org.thingpedia.media-source:playable("Anthem Part 2"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:44TuSOP6xIAEeJmZsN3nXO"^^org.thingpedia.media-source:playable("Bored To Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=41];
A: I played music by blink-182 on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/746d7590e5feba828151320075dcd7ed
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: get joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="TS7U0oWnjyd"^^com.icanhazdadjoke:id, text="What is bread's favorite number?  Leaven." }
C: ]];
A: What is bread's favorite number? Leaven.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: get restaurant
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant();
====
# recording/998fc6382c838508ee6df390ea9b302f
U: play megalovania
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "megalovania" => @org.thingpedia.media-player.play(playable=id);
====
# recording/046f33bc50e7433f85c79736e7d386b9
U: like the album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/5cd240d311463a01c25c4344d9e8761e
U: How is it going?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Who are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where is almond?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
A: My creators are mostly at Stanford. I'm an open-source assistant in the cloud.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the weather in ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("iss"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
A: It is cloudy today in Nummi, Turku and the temperature is 70.7 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is ISS?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="iss");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
A: I found International Space Station | NASA.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is elon?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="elon");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
A: I found Elon University / Home.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: who is bezos?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="bezos");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="bezos")
C: #[results=[
C:   { query="bezos", title="Jeff Bezos - Wikipedia", description="Jeffrey Preston Bezos (/ ˈ b eɪ z oʊ s / BAY-zohss; né Jorgensen; born January 12, 1964) is an American business magnate, media proprietor, and investor.Bezos is the founder and executive chairman of Amazon, having previously served as chairman, president and CEO of the company. With a net worth of more than $200 billion as of June 2021, he is the richest person in the world according to ...", link="https://en.wikipedia.org/wiki/Jeff_Bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Wife, Kids & Amazon - Biography", description="Bezos was born on January 12, 1964, in Albuquerque, New Mexico, to a teenage mother, Jacklyn Gise Jorgensen, and his biological father, Ted Jorgensen. The Jorgensens were married less than a year ...", link="https://www.biography.com/business-figure/jeff-bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Forbes", description="Jeff Bezos founded e-commerce giant Amazon in 1994 out of his garage in Seattle. He stepped down as CEO to become executive chairman on July 5, 2021. Amazon thrived during the pandemic; revenues ...", link="https://www.forbes.com/profile/jeff-bezos/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos steps down as Amazon CEO as retailer starts new ...", description="Bezos founded Amazon as an online bookstore and built it into a shopping and entertainment empire that is the second-largest private employer in the U.S., behind Walmart. Amazon, which is buying ...", link="https://www.cbsnews.com/news/jeff-bezos-amazon-ceo-steps-down/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos | Biography, Amazon, & Facts | Britannica", description="Jeff Bezos, American entrepreneur who played a key role in the growth of e-commerce as the founder and chief executive officer of the online retailer Amazon.com. Under his guidance, Amazon became the largest retailer on the World Wide Web and the model for Internet sales.", link="https://www.britannica.com/biography/Jeff-Bezos"^^tt:url }
C: ]];
A: I found Jeff Bezos - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: how did bezos dies?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="bezos dies");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku"))
C: #[results=[
C:   { temperature=21.5C, wind_speed=5.9mps, humidity=77.6, cloudiness=96.7, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=4;content_type=image/png"^^tt:picture, location=new Location(60.46322415, 22.302891572000966, "Nummi, Turku") }
C: ]];
C: @com.bing.web_search(query="iss")
C: #[results=[
C:   { query="iss", title="International Space Station | NASA", description="Get the latest news, images, videos and more from humanity's home in orbit -- the International Space Station.", link="https://www.nasa.gov/mission_pages/station/main/index.html"^^tt:url },
C:   { query="iss", title="International Space Station - Wikipedia", description="The International Space Station (ISS) is a modular space station (habitable artificial satellite) in low Earth orbit.It is a multinational collaborative project involving five participating space agencies: NASA (United States), Roscosmos (Russia), JAXA (Japan), ESA (Europe), and CSA (Canada). The ownership and use of the space station is established by intergovernmental treaties and agreements.", link="https://en.wikipedia.org/wiki/International_Space_Station"^^tt:url },
C:   { query="iss", title="Spot The Station | NASA", description="Watch the International Space Station pass overhead from several thousand worldwide locations. It is the third brightest object in the sky and easy to spot if you know when to look up. Visible to the naked eye, it looks like a fast-moving plane only much higher and traveling thousands of miles an hour faster!", link="https://spotthestation.nasa.gov/"^^tt:url },
C:   { query="iss", title="Live Space Station Tracking Map | Spot The Station | NASA", description="Live Space Station Tracking Map. The tracker shows where the Space Station is right now and its path 90 minutes ago (-1.5 hr) and 90 minutes ahead (+1.5 hr). The dark overlay indicates where it is nighttime in the world. ISS Tracker. ERROR: Cannot load images.", link="https://spotthestation.nasa.gov/tracking_map.cfm"^^tt:url },
C:   { query="iss", title="Home | ISS", description="ISS NEWS ISS Announces Acquisition of Genesys Research Genesys is a leading provider of product intelligence to the asset management and insurance communities, delivering to leading asset managers and insurance providers a combination of data and research solutions focused on the subadvisory and platform markets.", link="https://www.issgovernance.com/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="elon")
C: #[results=[
C:   { query="elon", title="Elon University / Home", description="Elon is one of only 18 private universities in the nation with an accredited communications school. More than 1,200 students pursue undergraduate majors in journalism, strategic communications, cinema and television arts, communication design, media analytics, and sport management, along with a master’s program in interactive media. Learn More.", link="https://www.elon.edu/"^^tt:url },
C:   { query="elon", title="Elon Musk - Wikipedia", description="Elon Reeve Musk was born on June 28, 1971, in Pretoria, South Africa. His mother is Maye Musk (née Haldeman), a model and dietitian born in Saskatchewan, Canada, but raised in South Africa. His father is Errol Musk, a South African electromechanical engineer, pilot, sailor, consultant, and property developer.", link="https://en.wikipedia.org/wiki/Elon_Musk"^^tt:url },
C:   { query="elon", title="Elon Musk (@elonmusk) | Twitter", description="The latest Tweets from Elon Musk (@elonmusk). Technoking of Tesla, Imperator of Mars ?", link="https://twitter.com/elonmusk"^^tt:url },
C:   { query="elon", title="Elon Musk (@ElonMusk) | Twitter", description="We would like to show you a description here but the site won’t allow us.", link="https://twitter.com/@elonmusk"^^tt:url },
C:   { query="elon", title="Elon University / Information Technology / University Email", description="Elon University is a mid-sized private university in North Carolina that is nationally recognized as the premier student-centered environment for experiential learning.", link="https://www.elon.edu/u/fa/technology/university-email/"^^tt:url }
C: ]];
C: @com.bing.web_search(query="bezos")
C: #[results=[
C:   { query="bezos", title="Jeff Bezos - Wikipedia", description="Jeffrey Preston Bezos (/ ˈ b eɪ z oʊ s / BAY-zohss; né Jorgensen; born January 12, 1964) is an American business magnate, media proprietor, and investor.Bezos is the founder and executive chairman of Amazon, having previously served as chairman, president and CEO of the company. With a net worth of more than $200 billion as of June 2021, he is the richest person in the world according to ...", link="https://en.wikipedia.org/wiki/Jeff_Bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Wife, Kids & Amazon - Biography", description="Bezos was born on January 12, 1964, in Albuquerque, New Mexico, to a teenage mother, Jacklyn Gise Jorgensen, and his biological father, Ted Jorgensen. The Jorgensens were married less than a year ...", link="https://www.biography.com/business-figure/jeff-bezos"^^tt:url },
C:   { query="bezos", title="Jeff Bezos - Forbes", description="Jeff Bezos founded e-commerce giant Amazon in 1994 out of his garage in Seattle. He stepped down as CEO to become executive chairman on July 5, 2021. Amazon thrived during the pandemic; revenues ...", link="https://www.forbes.com/profile/jeff-bezos/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos steps down as Amazon CEO as retailer starts new ...", description="Bezos founded Amazon as an online bookstore and built it into a shopping and entertainment empire that is the second-largest private employer in the U.S., behind Walmart. Amazon, which is buying ...", link="https://www.cbsnews.com/news/jeff-bezos-amazon-ceo-steps-down/"^^tt:url },
C:   { query="bezos", title="Jeff Bezos | Biography, Amazon, & Facts | Britannica", description="Jeff Bezos, American entrepreneur who played a key role in the growth of e-commerce as the founder and chief executive officer of the online retailer Amazon.com. Under his guidance, Amazon became the largest retailer on the World Wide Web and the model for Internet sales.", link="https://www.britannica.com/biography/Jeff-Bezos"^^tt:url }
C: ]];
C: @com.bing.web_search(query="bezos dies")
C: #[results=[
C:   { query="bezos dies", title="Jeff Bezos Death ? | Is Jeff Bezos Dead ? - What Happened ...", description="– Dies ? – There are unconfirmed rumors spreading everywhere through social media July 8, 2020, that CEO of Amazon, Jeff Bezos has died at the age of 56. There were no reliable source to confirm these rumor neither there was any cause of death said.", link="https://deaddeath.com/jeff-bezos-death-is-jeff-bezos-dead-what-happened-to-jeff-bezos-how-did-amazon-ceo-died-what-is-cause-of-death/"^^tt:url },
C:   { query="bezos dies", title="Jeff Bezos had a brush with death in a helicopter while ...", description="Bezos was visiting a canyon near Cathedral Mountain, which is located in West Texas roughly 50 miles from the Mexico border. He wanted to buy a huge, secluded desert ranch to test-fire rocket ...", link="https://www.businessinsider.com/jeff-bezos-blue-origin-helicopter-crash-2018-3"^^tt:url },
C:   { query="bezos dies", title="Is Jeff Bezos dead? #RipJeffBezos trends over claims 'he ...", description="Is Jeff Bezos dead? #RipJeffBezos trends over claims 'he drowned in Amazon river', Internet debunks viral hoax. It seems a few bored internet users decided to trend #RIPJeffbezos, similar to the previous #rRIPEllen trend, which went viral but was eventually established as a hoax that spread like wildfire", link="https://meaww.com/jeff-bezos-dead-rip-jeff-bezos-trends-internet-claims-drown-amazon-river-viral-hoax-debunk"^^tt:url },
C:   { query="bezos dies", title="Jeff Bezos Just Predicted When Amazon Will Die (and ...", description="In a meeting with employees last week, reported by CNBC, Bezos offered a healthy tinge of realism, as his company expands in the face of substantial and increasing opposition. Indeed, he predicted ...", link="https://www.inc.com/chris-matyszczyk/jeff-bezos-just-predicted-when-amazon-will-die-and-revealed-1-product-that-might-make-it-last-longer.html"^^tt:url },
C:   { query="bezos dies", title="Jeff Bezos refused to meet his dying biological father - Blind", description="Jeff Bezos refused to meet his dying biological father. Ted Jorgensen discovered his son was Jeff Bezos when a biographer writing a book about Jeff Bezos contacted him. He was about to die and wanted to see his son one last time. He died and Jeff's only comment was, \"I've never met him...the only time I ever think about it is when the doctor ...", link="https://www.teamblind.com/post/Jeff-Bezos-refused-to-meet-his-dying-biological-father-6b1HK2Tx"^^tt:url }
C: ]];
A: I found Jeff Bezos Death ? | Is Jeff Bezos Dead ? - What Happened ..
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: how did FBI cause 9/11?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="fbi cause 9 / 11");
====
# recording/6e82fa4b10204f055f5d95df0b3af55a
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me ajoke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="uPu4MRZLmrc"^^com.icanhazdadjoke:id, text="Want to hear a chimney joke? Got stacks of em! First one's on the house" }
C: ]];
A: Want to hear a chimney joke? Got stacks of em! First one's on the house.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/e7c7ace5d05fb10bcfaddc735d6c24ff
U: hello
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/69ce5ef4b7f91376fd84b98fcf3f3de0
U: how are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: can you run a function?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum how_to_configure_skill);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum how_to_configure_skill)
C: #[results=[
C:   { reply="You can enable new skills to expand the set of commands that I understand. Click on Configure New Skills in the My Genie page to do so.", question=enum how_to_configure_skill }
C: ]];
A: You can enable new skills to expand the set of commands that I understand. Click on Configure New Skills in the My Genie page to do so.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: open the door for me
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.iot.cover.set_openclose(state=enum open);
====
# recording/901d03214273942e12f2bea7569775b0
U: what's the time
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 10, 56) }
C: ]];
A: Right now, it's 11:10 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
====
# recording/ab5d94a4f1d9307d866ec76df4bffec0
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="BQnyImOCIBd"^^com.icanhazdadjoke:id, text="How do hens stay fit? They always egg-cercise!" }
C: ]];
A: How do hens stay fit? They always egg-cercise!
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play some music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/b15608377d16d13c272dfc98c5da6463
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/f7d0c8dd113d566adddd2a44e3304227
U: what time is it
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 9, 57) }
C: ]];
A: Right now, it's 11:09 AM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: show me a cat picture
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.thecatapi.cat();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 9, 57) }
C: ]];
C: @com.thecatapi.cat()
C: #[results=[
C:   { id="bX5VJKzVM"^^com.thecatapi:cat, picture_url="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/bX5VJKzVM.jpg"^^tt:picture, link="http://thecatapi.com/?id=bX5VJKzVM"^^tt:url }
C: ]];
A: Here is a cat picture.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: show me a dog picture
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.thedogapi.dog();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(18, 9, 57) }
C: ]];
C: @com.thecatapi.cat()
C: #[results=[
C:   { id="bX5VJKzVM"^^com.thecatapi:cat, picture_url="https://s3.us-west-2.amazonaws.com/cdn2.thecatapi.com/images/bX5VJKzVM.jpg"^^tt:picture, link="http://thecatapi.com/?id=bX5VJKzVM"^^tt:url }
C: ]];
C: @com.thedogapi.dog()
C: #[results=[
C:   { id="ZRQ0TYzz6"^^com.thedogapi:dog("Tibetan Terrier"), picture_url="https://cdn2.thedogapi.com/images/ZRQ0TYzz6.jpg"^^tt:picture }
C: ]];
A: Did you mean Get dog pictures?
A: Here is a picture of a Tibetan Terrier.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's the latest song by taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.song() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")))[1];
====
# recording/a10f2a3037c2cd2f35ebf4784bc28393
U: hi there
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/ae5d0cc31faf431b391116995ea6a54f
U: Tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="rHBQuXLR7h"^^com.icanhazdadjoke:id, text="Why did the cookie cry?\r\nBecause his mother was a wafer so long" }
C: ]];
A: Why did the cookie cry? Because his mother was a wafer so long.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/6420c03f75c9194e50d9c0a8780a6f3c
U: hey, you there?
UT: $dialogue @org.thingpedia.dialogue.transaction.greet;
====
# recording/e42fb3a7ebc533a2300d22ad86f5696a
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Where are you now?
A: It is sunny today in Palo Alto, California and the temperature is 77.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: tell me a joke
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.icanhazdadjoke.get();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=25.2C, wind_speed=2.7mps, humidity=43.7, cloudiness=11.7, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @com.icanhazdadjoke.get()
C: #[results=[
C:   { id="lyPZgVn3Le"^^com.icanhazdadjoke:id, text="What did the ocean say to the shore? Nothing, it just waved." }
C: ]];
A: What did the ocean say to the shore? Nothing, it just waved.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/0e3849c646aa29e5b3a426f05c8908e1
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to rock
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify.add_song_to_playlist(playlist="rock", song=id);
====
# recording/f812a986565de71885b0ce06b3e61502
U: play taylor swift
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("taylor swift")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/5f481bba0cc2a0bd79db8446255ffd80
U: can you tell me about soccer too?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.goal_smart.fixtures();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
C: @com.goal_smart.fixtures();
A: Did you mean Get soccer fixtures?
A: What team do you want out check out?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(team_id);
AT: @com.goal_smart.fixtures();
U: chelsea
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.goal_smart.fixtures(team_id=null^^com.goal_smart:soccer_team("chelsea"));
====
# recording/0fd2bcf6fd61643dcf0dcc7632ac3c1d
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/0be9132121c6ac06cabf7617a080e7b9
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/59bfa4f16693184528dd3e229e314ad2
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 82.2 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast for next week?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 60.1 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Did you mean get the weather forecast?
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 60.1 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the forecast for this weekend
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=new Date(enum saturday));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=new Date(enum saturday), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=21.6C, wind_speed=2.8mps, humidity=67.8, cloudiness=44.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-08-07T18:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Did you mean get the weather on start of day on Saturday?
A: It will be cloudy next Saturday at 11:00 AM in Palo Alto, California and the temperature will be 70.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/b38326ed6d93fe3d8b63325b2199ff0d
U: add this song to playlist z
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="z", song=id);
====
# recording/2519187c18544c754d76fb1b91544558
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/a9d2d62afc5f9526d74a8e1563c7f434
U: what's the weather next week in palo alto?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location("palo alto"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: Did you mean Get the the weather on the end of this week in palo alto?
A: It will be cloudy on next Sunday at 5:00 AM in Palo Alto, California and the temperature will be 58.6 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's my name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
A: Your name is tony.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's your name
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where am i
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
A: Sorry, I cannot access your location in this version of genie.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: i am in palo alto
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("palo alto"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
A: I set your current location to Palo Alto, California.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where are you?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
A: My creators are mostly at Stanford. I'm an open-source assistant in the cloud.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: where am i?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
A: Sorry, I cannot access your location in this version of genie.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=14.8C, wind_speed=1.2mps, humidity=86.1, cloudiness=24.2, fog=0.8, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T12:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_location)
C: #[results=[
C:   { reply="My creators are mostly at Stanford. I'm an open-source assistant in the cloud.", question=enum about_almond_location }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=31.3C, wind_speed=2.2mps, humidity=32.3, cloudiness=42.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 88.3 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/d893ccb67346625cf250ec62a974e620
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/56ca29accadadcd1e19de4c9be2a7813
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/163b76dc0e8096b67b7e89871d501b91
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b68c8660d885018992451f92391b631c
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: i like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added STAY (with Justin Bieber) to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/680018ce835fe24f5308f14a4b665506
U: play a good podcast on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/6f07bdd793e0834f419e59fef3b93839
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/86e510936beed3b1afae9bf319dcf005
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/082da9896b7ea27e3ac46f7b19efbd69
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/fca3c63814637c135094754595c2f237
U: play the cure
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/a774e3e34bc609ed8607c25e9950051c
U: play madonna
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("madonna")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:6tbjWDEIzxoDsBA1FuhfPW"^^org.thingpedia.media-source:artist("Madonna")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:22sLuJYcvZOSoLLRYev1s5"^^org.thingpedia.media-source:playable("Material Girl"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1z3ugFmUKoCzGsI6jdY4Ci"^^org.thingpedia.media-source:playable("Like 1 Prayer"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3850dYVgOFIXJh5U4BFEWH"^^org.thingpedia.media-source:playable("Hung Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2n5y6cRV8vr6mJcuNCu2ce"^^org.thingpedia.media-source:playable("Dress You Up / Into The Groove - Live"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7uPaXeJ7a1E8OUzXzgfnNR"^^org.thingpedia.media-source:playable("Express Yourself - MDNA World Tour / Live 2012"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1ZPlNanZsJSPK5h9YZZFbZ"^^org.thingpedia.media-source:playable("Like 1 Virgin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1oHClQEgDmmbcEx12Kc5nZ"^^org.thingpedia.media-source:playable("4 Minutes (feat. Justin Timberlake & Timbaland)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2m0M7YqCy4lXfedh18qd8N"^^org.thingpedia.media-source:playable("Into the Groove"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27QvYgBk0CHOVHthWnkuWt"^^org.thingpedia.media-source:playable("Vogue"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6r8k1vznHrzlEKYxL4dZEe"^^org.thingpedia.media-source:playable("La Isla Bonita"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=34];
A: I played music by Madonna on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/039c95a9ea87ab7e7b8d1f055160d4fa
U: time
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(19, 58, 10) }
C: ]];
A: Right now, it's 12:58 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: news?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/914869702b865d3f0a048d2badf80036
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play artist the cure
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
A: Did you mean get music by cure and then play the id on Spotify?
A: I played music by The Cure on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/bacf90e789f94dc838c05828bb88671c
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/80c7c5854ebb7d9964311ca86222bb3c
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/8ac3856f063252eb39cb96fc22226bb4
U: play some tsol
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("tsol")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:5XwDirrHPY6KCzScs3rKGr"^^org.thingpedia.media-source:artist("Tila Tsoli")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3mT3nS7uqcSrw7rPvHs8oq"^^org.thingpedia.media-source:playable("Bimbo Doll"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Bimbo Doll on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some dead kennedy's
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("dead kennedy 's")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/5921ce13377017c5c952d82f1cbd3b70
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/3335c5d678fdfe4a8577df4602c4462a
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/b70ee66c558d96d33455282ad8e472ba
U: play the most popular song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(popularity desc of @org.thingpedia.media-source.song())[1] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(popularity desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played STAY (with Justin Bieber) on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/1f796479b17cbb0772301e96b3eb6744
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/bf985db56108dbe6b20308316f7e0239
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play archair expert
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cprB7E9cUJNu5yaLWw85G"^^org.thingpedia.media-source:playable("Armchair Expert"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get music that has name archair expert and then play the id on Spotify?
A: I played Armchair Expert on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play armchair podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "armchair" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cprB7E9cUJNu5yaLWw85G"^^org.thingpedia.media-source:playable("Armchair Expert"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "armchair")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:6kAsbP8pxwaU2kPibKTuHE"^^org.thingpedia.media-source:playable("Armchair Expert with Dax Shepard"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get podcast that has name armchair and then play the id on Spotify?
A: I played Armchair Expert with Dax Shepard on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "archair expert")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6cprB7E9cUJNu5yaLWw85G"^^org.thingpedia.media-source:playable("Armchair Expert"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "armchair")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:6kAsbP8pxwaU2kPibKTuHE"^^org.thingpedia.media-source:playable("Armchair Expert with Dax Shepard"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the capital of malasyia
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capital of malasyia");
====
# recording/0a24d6bf869129829e74956c8baa3611
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/59341f86458cb5a548aad557e47b1eb7
U: create new playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: secondhand
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="secondhand");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="secondhand")
C: #[results=[
C:   { name="secondhand", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist for you named secondhand.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play secondhand serenade
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "secondhand serenade" => @org.thingpedia.media-player.play(playable=id);
====
# recording/a0d66813c9f8d20acb93adb3cbc0ff86
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[new Date("2021-09-01T15:51:00.000Z")]) => @org.thingpedia.builtin.thingengine.builtin.say(message="hello world")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(22, 52, 57) }
C: ]];
A: Right now, it's 3:52 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather in san francisco?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("san francisco"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[new Date("2021-09-01T15:51:00.000Z")]) => @org.thingpedia.builtin.thingengine.builtin.say(message="hello world")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(22, 52, 57) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.7790262, -122.419906, "San Francisco, California"))
C: #[results=[
C:   { temperature=17C, wind_speed=8.1mps, humidity=68.5, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.7790262, -122.419906, "San Francisco, California") }
C: ]];
A: It is cloudy today in San Francisco, California and the temperature is 62.6 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather there tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location(37.7790262, -122.419906, "San Francisco, California"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: ontimer(date=[new Date("2021-09-01T15:51:00.000Z")]) => @org.thingpedia.builtin.thingengine.builtin.say(message="hello world")
C: #[results=[]];
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(22, 52, 57) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.7790262, -122.419906, "San Francisco, California"))
C: #[results=[
C:   { temperature=17C, wind_speed=8.1mps, humidity=68.5, cloudiness=55.5, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.7790262, -122.419906, "San Francisco, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.7790262, -122.419906, "San Francisco, California"))
C: #[results=[
C:   { temperature=14.4C, wind_speed=5.3mps, humidity=85.3, cloudiness=56.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, date=new Date("2021-09-02T14:00:00.000Z"), location=new Location(37.7790262, -122.419906, "San Francisco, California") }
C: ]];
A: Did you mean get the weather forecast in San Francisco, California?
A: It will be cloudy tomorrow at 7:00 AM in San Francisco, California and the temperature will be 57.9 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's a good restaurant in san francisco mission district
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("san francisco mission district");
====
# recording/546c213bb1bd8e1749841930d2c8cf16
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b6350cdc69138e1a61893f1bead0e2af
U: add this song to my spotify library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/3d2f0caaac065a28d3bd0a2f43241bf6
U: play baba riley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "baba riley" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Baba O'Riley on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "baba riley")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { value="2faa93e1b2b45b85b02b90b497d311c37e7659e7", display="Soundworks’s Mac Pro", playable="spotify:track:3qiyyUfYe7CRYLucrPmulD"^^org.thingpedia.media-source:playable("Baba O'Riley"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[]];
A: I played the next song.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/4894d95d420e9a1fa51aa9c2f425fb6a
U: play music by artist the cure
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
A: I played music by The Cure on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's the weather
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 82.2 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: and the forecast for next week
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(date=$end_of(week));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:7bu3H8JO7d0UbMoVzbo70s"^^org.thingpedia.media-source:artist("The Cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76GlO5H5RT6g7y0gev86Nk"^^org.thingpedia.media-source:playable("Just like Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:263aNAQCeFSWipk896byo6"^^org.thingpedia.media-source:playable("Friday I'm in Love"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4dneV7C1yDt9UtyxrQY375"^^org.thingpedia.media-source:playable("Boys Don't Cry - Single Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0X5C4WjQNubRysTkHOubz3"^^org.thingpedia.media-source:playable("Lovesong - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7ABE6G4uQxbNtYgVrpBBPA"^^org.thingpedia.media-source:playable("Close to Me - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1tuwC1Ob5vnYZhvg3zyzJg"^^org.thingpedia.media-source:playable("Pictures of You - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:07CyrZF9eVd02zzIse7tZA"^^org.thingpedia.media-source:playable("In Between Days - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3O4TPMOgChXOerSdB5WENH"^^org.thingpedia.media-source:playable("1 Forest - 2006 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4d4oXk7O2lEhZ83ivV93li"^^org.thingpedia.media-source:playable("Lullaby - 2010 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5GHwCpwEos0FzYe55slXEp"^^org.thingpedia.media-source:playable("The Lovecats"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=36];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=27.9C, wind_speed=2.3mps, humidity=36.8, cloudiness=1.6, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(week), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.6C, wind_speed=0.9mps, humidity=76.1, cloudiness=32, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-01T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 60.1 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5fd4b686facffeaa366fa55972817bea
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/de3aba27dd5a768b8ed2374acfaf4e58
U: ask yelp good chinese
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter contains(cuisines, null^^com.yelp:restaurant_cuisine("chinese"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.yelp.restaurant() filter contains(cuisines, "chinese"^^com.yelp:restaurant_cuisine("Chinese"))
C: #[results=[
C:   { id="uVploy81jeEvlvPTA6cgjw"^^com.yelp:restaurant("Mandarin Roots"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/AnLZUIDEHJsFcEMyzoggzQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/mandarin-roots-palo-alto-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "asianfusion"^^com.yelp:restaurant_cuisine("Asian Fusion"), "tapasmallplates"^^com.yelp:restaurant_cuisine("Tapas/Small Plates")], price=enum moderate, rating=4, review_count=555, geo=new Location(37.42028, -122.13601, "3345 El Camino Real, Palo Alto, CA 94306"), phone="+16505658868"^^tt:phone_number },
C:   { id="w17EBwOBXKaYIiGf7LTD9Q"^^com.yelp:restaurant("Jing Jing Chinese Gourmet"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/fsjBluohoq0fQYUAN8fD4g/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/jing-jing-chinese-gourmet-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=3.5, review_count=403, geo=new Location(37.44514, -122.16306, "443 Emerson St, Palo Alto, CA 94301"), phone="+16503286885"^^tt:phone_number },
C:   { id="ZimdCe2xCAOOZjt1aQAMvg"^^com.yelp:restaurant("Chef Chu's"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/8Ne4RN6pc5NN-w2PRx2KMA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/chef-chus-los-altos?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "seafood"^^com.yelp:restaurant_cuisine("Seafood")], price=enum moderate, rating=4, review_count=1864, geo=new Location(37.4006, -122.11367, "1067 N San Antonio Rd, Los Altos, CA 94022"), phone="+16509482696"^^tt:phone_number },
C:   { id="aLXs35royGdxEtfRmesaTw"^^com.yelp:restaurant("Green Elephant Gourmet"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/HUD3IHMYSQMUPHv7pTN2nA/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/green-elephant-gourmet-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "burmese"^^com.yelp:restaurant_cuisine("Burmese")], price=enum moderate, rating=3.5, review_count=286, geo=new Location(37.4187397433899, -122.109109532186, "3950 Middlefield Rd, Palo Alto, CA 94303"), phone="+16504947391"^^tt:phone_number },
C:   { id="LjI8BVHVg5vNEHYuRyxtHw"^^com.yelp:restaurant("Peking Duck"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/0kzgVrhDcpPDAaeuef1y8g/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/peking-duck-palo-alto?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=3, review_count=352, geo=new Location(37.428471817387894, -122.14277685914219, "151 S California Ave, Palo Alto, CA 94306"), phone="+16503219388"^^tt:phone_number },
C:   { id="WWyaK9oskNOpjCsO6MA7Pw"^^com.yelp:restaurant("P.F. Chang's"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/SR0mlHWyUwVBqxBBbeGRaw/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/p-f-changs-palo-alto-2?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "asianfusion"^^com.yelp:restaurant_cuisine("Asian Fusion"), "gluten_free"^^com.yelp:restaurant_cuisine("Gluten-Free")], price=enum moderate, rating=2.5, review_count=777, geo=new Location(37.4436714574102, -122.168239921338, "900 Stanford Shopping Ctr, Bldg W, Palo Alto, CA 94304"), phone="+16503301782"^^tt:phone_number },
C:   { id="OFUQHchaV2uqjJmO-EuVlA"^^com.yelp:restaurant("Veggie Garden"), image_url="https://s3-media4.fl.yelpcdn.com/bphoto/lXh0FX6kfTa7IXuGew5etQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/veggie-garden-mountain-view?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["vegan"^^com.yelp:restaurant_cuisine("Vegan"), "vegetarian"^^com.yelp:restaurant_cuisine("Vegetarian"), "chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4.5, review_count=499, geo=new Location(37.399226131236, -122.1086273955, "2464 W El Camino Real, Ste C, Mountain View, CA 94040"), phone="+16509616888"^^tt:phone_number },
C:   { id="cm8oHti0SIPPqR8PcmcSvA"^^com.yelp:restaurant("Garden Fresh"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/EnKogtsi9rjeTVAbGjTY7Q/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/garden-fresh-mountain-view-4?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "noodles"^^com.yelp:restaurant_cuisine("Noodles"), "soup"^^com.yelp:restaurant_cuisine("Soup")], price=enum moderate, rating=4, review_count=1333, geo=new Location(37.387904, -122.089053, "1245 W El Camino Real, Mountain View, CA 94040"), phone="+16502541688"^^tt:phone_number },
C:   { id="zg83ulOQw1m18kLoNHcXUA"^^com.yelp:restaurant("Phil's Kitchen"), image_url="https://s3-media3.fl.yelpcdn.com/bphoto/rpCFoxuH71QLwDoveRY9Hg/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/phils-kitchen-menlo-park?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["chinese"^^com.yelp:restaurant_cuisine("Chinese"), "hawaiian"^^com.yelp:restaurant_cuisine("Hawaiian"), "bbq"^^com.yelp:restaurant_cuisine("Barbeque")], price=enum cheap, rating=4, review_count=510, geo=new Location(37.4536749590389, -122.184342294931, "625 Oak Grove Ave, Unit B, Menlo Park, CA 94025"), phone="+16505614296"^^tt:phone_number },
C:   { id="IccyNXafP876EY6vkHetbg"^^com.yelp:restaurant("MP Mongolian BBQ"), image_url="https://s3-media2.fl.yelpcdn.com/bphoto/MBjcL710bbS2OLNOjvlwvQ/o.jpg"^^tt:picture, link="https://www.yelp.com/biz/mp-mongolian-bbq-menlo-park?adjust_creative=hejPBQRox5iXtqGPiDw4dg&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=hejPBQRox5iXtqGPiDw4dg"^^tt:url, cuisines=["buffets"^^com.yelp:restaurant_cuisine("Buffets"), "chinese"^^com.yelp:restaurant_cuisine("Chinese")], price=enum moderate, rating=4, review_count=308, geo=new Location(37.451705, -122.178848, "700 El Camino Real, Ste 170, Menlo Park, CA 94025"), phone="+16508531118"^^tt:phone_number }
C: ]]
C: #[count=34];
A: I see Mandarin Roots, Jing Jing Chinese Gourmet, and Chef Chu's. They're moderate restaurants with Chinese food.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_three;
U: smartnews
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
====
# recording/4482295ba8b48bf198df79341733fe58
U: play don't stop believing
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "don't stop believing" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "don't stop believing")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:4bHsxqR3GMrXTxEPLuK5ue"^^org.thingpedia.media-source:playable("Don't Stop Believin'"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Don't Stop Believin' on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: create playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist(name="oval");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "don't stop believing")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:4bHsxqR3GMrXTxEPLuK5ue"^^org.thingpedia.media-source:playable("Don't Stop Believin'"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="oval")
C: #[results=[
C:   { name="oval", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist named oval.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
====
# recording/2f6d6fb318ad713b79b4d14b9d11e6a2
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @com.spotify.add_item_to_library(playable=id);
====
# recording/7221dc45f037087f578205a9648c8ed9
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/cbc00db36f2c9f377efa926556fa20e1
U: like song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/b122e9f8ffd82b81d399ebfe43e6344a
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/dec64aeb440113f1794b22a29fba40a2
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
====
# recording/12e23096f3aa7bab9827944c05e1e73c
U: play chopin
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("chopin")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/840ddf3c20683989ccd1eb686b29567d
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5a5ddd653f49cc0fcf5ad3724774fc13
U: play playlist cyn piano
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "cyn piano" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "cyn piano")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:7yrp8Jmaj5pfzLYXPEhb5D"^^org.thingpedia.media-source:playable("Cyn Piano"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Cyn Piano on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play playlist this is nine inch nails
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "cyn piano")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:7yrp8Jmaj5pfzLYXPEhb5D"^^org.thingpedia.media-source:playable("Cyn Piano"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Did you mean get playlist that has name this is 9 inch nails and then play the id on Spotify?
A: Sorry, there are no playlist matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b60f8e1fa75e984f449d8f444fd98738
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/80421acf49fcbe6cae8830ffdbb1c1aa
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/6ca83d2cdbedc5808b3c89729919ae81
U: play five songs
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song()[1 : 5] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song()[1 : 5] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6PQ88X9TkUIAUIZJHW2upE"^^org.thingpedia.media-source:playable("Bad Habits"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the first 5 songs on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/2f7925b0958d14964a54947c01d3dcb4
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: i like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/fe19884cc3dae50060be994990f78c86
U: play music by composer elton john
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("elton john")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:3PhoLpVuITZKcymswpck5b"^^org.thingpedia.media-source:artist("Elton John")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3gdewACMIVMEWVbyb8O9sY"^^org.thingpedia.media-source:playable("Rocket Man (I Think It's Going To Be 1 Long, Long Time)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2TVxnKdb3tqe1nhQWwwZCO"^^org.thingpedia.media-source:playable("Tiny Dancer"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1jDJFeK9x3OZboIAHsY9k2"^^org.thingpedia.media-source:playable("I'm Still Standing"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5Wj1rJnCLpMHdLaxsFtJLs"^^org.thingpedia.media-source:playable("Bennie And The Jets - Remastered 2014"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:38zsOOcu31XbbYj9BIPUF1"^^org.thingpedia.media-source:playable("Your Song"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7HW5WIw7ZgZORCzUxv5gW5"^^org.thingpedia.media-source:playable("Don't Go Breaking My Heart"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6WCeFNVAXUtNczb7lqLiZU"^^org.thingpedia.media-source:playable("Crocodile Rock"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4IRHwIZHzlHT1FQpRa5RdE"^^org.thingpedia.media-source:playable("Goodbye Yellow Brick Road - Remastered 2014"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:23l1kVpqMVREiwU1YAlcr4"^^org.thingpedia.media-source:playable("I Guess That's Why They Call It The Blues"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:12yHvSYFXI7PGzNecUvIDu"^^org.thingpedia.media-source:playable("Saturday Night’s Alright (For Fighting) - Remastered 2014"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=43];
A: I played music by Elton John on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add to my playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
====
# recording/97a67e4c84147110ecb9b71fdb8bcfb5
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5e0260f6462b5e10d4934b0df43b1eba
U: play baba o'riley by the who
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("who")) && id =~ "baba o 'riley" => @org.thingpedia.media-player.play(playable=id);
====
# recording/c8827b6892af7d63a9fe0a2f9d3d450a
U: like this song on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/e376921e0221bc3dfea90dfc0c622436
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/fb6a768d27a4d13a8d18fc8f7c05967e
U: news
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.smartnews.article();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
A: Sorry, the smartnews service is unavailable. Please try again later.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: what's your name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
A: I'm Genie, an open-source virtual assistant created at Stanford.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what's my name?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_name();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
A: Your name is tony.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: where do i live?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_gps();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.smartnews.article()
C: #[results=[]]
C: #[error=enum unavailable];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_identity)
C: #[results=[
C:   { reply="I'm Genie, an open-source virtual assistant created at Stanford.", question=enum about_almond_identity }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_name()
C: #[results=[
C:   { name="tony" }
C: ]];
C: @org.thingpedia.builtin.thingengine.builtin.get_gps()
C: #[results=[]]
C: #[error=enum unsupported_platform];
A: Did you mean Get the my current location?
A: Sorry, I cannot access your location in this version of genie.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/d2e7fabc96c48059db3f609a61870f99
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3535169b1cd8f4c07af668b2997aa859
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
A: Right now, it's 6:25 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is cloudy today in Palo Alto, California and the temperature is 82.4 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some reggae
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1wIn4YjJl6OpcMUn5McoxU"^^org.thingpedia.media-source:playable("Mi Gente"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6KErFkRhU1gbVQR8waxl3W"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3HV5bB2lOkBNCWJdqR5hRZ"^^org.thingpedia.media-source:playable("Me Gustas Tu"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JgADdEmaGrh9obb2ke3xi"^^org.thingpedia.media-source:playable("Bajo La Luna"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7IWGXK4ayKVfFG29bo7qYa"^^org.thingpedia.media-source:playable("No Es Justo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1p8TANEe8KLm1AFZcUp8rc"^^org.thingpedia.media-source:playable("Sin Compromiso"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
A: Did you mean get reggae music and then play the id on Spotify?
A: I played reggae music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1wIn4YjJl6OpcMUn5McoxU"^^org.thingpedia.media-source:playable("Mi Gente"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6KErFkRhU1gbVQR8waxl3W"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3HV5bB2lOkBNCWJdqR5hRZ"^^org.thingpedia.media-source:playable("Me Gustas Tu"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JgADdEmaGrh9obb2ke3xi"^^org.thingpedia.media-source:playable("Bajo La Luna"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7IWGXK4ayKVfFG29bo7qYa"^^org.thingpedia.media-source:playable("No Es Justo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1p8TANEe8KLm1AFZcUp8rc"^^org.thingpedia.media-source:playable("Sin Compromiso"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: what is the capitol of the united states
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capitol of the united states");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(1, 25, 51) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=28C, wind_speed=2.2mps, humidity=33.2, cloudiness=75.8, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=3;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1wIn4YjJl6OpcMUn5McoxU"^^org.thingpedia.media-source:playable("Mi Gente"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6KErFkRhU1gbVQR8waxl3W"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3HV5bB2lOkBNCWJdqR5hRZ"^^org.thingpedia.media-source:playable("Me Gustas Tu"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JgADdEmaGrh9obb2ke3xi"^^org.thingpedia.media-source:playable("Bajo La Luna"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7IWGXK4ayKVfFG29bo7qYa"^^org.thingpedia.media-source:playable("No Es Justo"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1p8TANEe8KLm1AFZcUp8rc"^^org.thingpedia.media-source:playable("Sin Compromiso"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.bing.web_search(query="capitol of the united states")
C: #[results=[
C:   { query="capitol of the united states", title="United States Capitol - Wikipedia", description="The United States Capitol, often called The Capitol or the Capitol Building, is the meeting place of the United States Congress and the seat of the legislative branch of the U.S. federal government.It is located on Capitol Hill at the eastern end of the National Mall in Washington, D.C. Though no longer at the geographic center of the federal district, the Capitol forms the origin point for ...", link="https://en.wikipedia.org/wiki/United_States_Capitol"^^tt:url },
C:   { query="capitol of the united states", title="List of capitals in the United States - Wikipedia", description="States (highlighted in blue) that have changed their capital city at least once. This is a list of capital cities of the United States, including places that serve or have served as federal, state, insular area, territorial, colonial and Native American capitals. Washington, D.C. has been the federal capital of the United States since 1800.", link="https://en.wikipedia.org/wiki/List_of_capitals_in_the_United_States"^^tt:url },
C:   { query="capitol of the united states", title="U.S. Capitol Building | Architect of the Capitol", description="The United States Capitol Building is located in Washington, D.C., at the eastern end of the National Mall on a plateau 88 feet above the level of the Potomac River, commanding a westward view across the U.S. Capitol Reflecting Pool to the Washington Monument 1.4 miles away and the Lincoln Memorial 2.2 miles away.", link="https://www.aoc.gov/explore-capitol-campus/buildings-grounds/capitol-building"^^tt:url },
C:   { query="capitol of the united states", title="United States Capitol | Architecture, History, United ...", description="United States Capitol, meeting place of the United States Congress and one of the most familiar landmarks in Washington, D.C. Possibly the most culturally and historically important building in the United States, it has been home to Congress since 1800. The following year Thomas Jefferson became the first president to be sworn in on its steps.", link="https://www.britannica.com/topic/United-States-Capitol"^^tt:url },
C:   { query="capitol of the united states", title="What Is the Capital of the USA? - WorldAtlas", description="The capital city of the United States of America is Washington, D.C., and can be referred to formally as the District of Columbia or more informally as D.C. or Washington. In 2017, the city had a population of 6,131,977 and an approximate size of 68.34 square miles. The city was founded after the American Revolution and named after Founding Father and first President of the United States of ...", link="https://www.worldatlas.com/articles/what-is-the-capital-of-the-united-states-of-america.html"^^tt:url }
C: ]];
A: I found United States Capitol - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what is the capital of the united states
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capital of the united states");
====
# recording/d507a290e8550a945dc76cf353b03379
U: play playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "oval" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "oval")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3a3xrK5RMXlQ14qPMss3fg"^^org.thingpedia.media-source:playable("oval"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played oval on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play playlist This is Nine Inch Nails
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "oval")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3a3xrK5RMXlQ14qPMss3fg"^^org.thingpedia.media-source:playable("oval"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Did you mean get playlist that has name this is 9 inch nails and then play the id on Spotify?
A: Sorry, there are no playlist matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: create playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "oval")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:3a3xrK5RMXlQ14qPMss3fg"^^org.thingpedia.media-source:playable("oval"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "this is 9 inch nails")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: One
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="one");
====
# recording/0c035a374a3e758f6a6ca47e8cc03136
U: play favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/76d6aee60a8292aa375103cbca37d211
U: play latest podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: sort(release_date desc of @org.thingpedia.media-source.show())[1] => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
A: Sorry, there are no shows matching your request.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_empty_search;
U: play whiteness podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get podcast that has name whiteness and then play the id on Spotify?
A: I played Whiteness at Work on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play playlist secondhand
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:0BfFoqrSMr5ti6mpSHtgto"^^org.thingpedia.media-source:playable("secondhand"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played secondhand on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:0BfFoqrSMr5ti6mpSHtgto"^^org.thingpedia.media-source:playable("secondhand"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: create a new playlist gizmo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist(name="gizmo");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: sort(release_date desc of @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show())[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "whiteness")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3mgGCIHV5BycOT0ZRgUmcd"^^org.thingpedia.media-source:playable("Whiteness at Work"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playlist() filter id =~ "secondhand")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:playlist:0BfFoqrSMr5ti6mpSHtgto"^^org.thingpedia.media-source:playable("secondhand"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="gizmo")
C: #[results=[
C:   { name="gizmo", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean create a new playlist with name gizmo?
A: I created a new playlist for you named gizmo.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add current song to gizmo playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="gizmo", song=id);
====
# recording/cea189516ff0b7fd0a2b64df281521b6
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/e303b8805f67d2379158fc6ae64b60c4
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/84252a03b43c2c5830472c52c7164413
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3a445da4e84e21074753fad229e00305
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[]]
C: #[error=enum no_song_playing];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: play my favorite
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/887aa58786f9be544975ea9575f1fe92
U: what time is it?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.get_time();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(0, 39, 9) }
C: ]];
A: Right now, it's 5:39 PM.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather in berkeley
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("berkeley"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.get_time()
C: #[results=[
C:   { time=new Time(0, 39, 9) }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.8753497, -122.23963364918777, "University of California, Berkeley, North Street"))
C: #[results=[
C:   { temperature=16.3C, wind_speed=5.8mps, humidity=65, cloudiness=3.9, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.8753497, -122.23963364918777, "University of California, Berkeley, North Street") }
C: ]];
A: It is sunny today in University of California, Berkeley, North Street and the temperature is 61.3 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what's the weather going to be like tomorrow?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast(location=new Location(37.8753497, -122.23963364918777, "University of California, Berkeley, North Street"));
====
# recording/a7e10ebfd2f957aca18527b8d921fab4
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/ce813de29b16a97119f05ba51a557994
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: resume
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_play();
====
# recording/20dd651313b7b2fdd01d9bf40ff78425
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c1cf3ff2a9748091d1a0866c57349a57
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/eebc7b4f87c0588dfbfbece03f7dbbac
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/a42096c2ca88251c2e444d48ebee488f
U: save this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/156989012b643e22571437d876582358
U: what's the weather in tahoe
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current(location=new Location("tahoe"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.weather.current(location=new Location(43.6387671, -79.6102134, "Tahoe, Mississauga Transitway"))
C: #[results=[
C:   { temperature=18.2C, wind_speed=2.3mps, humidity=63.6, cloudiness=10.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(43.6387671, -79.6102134, "Tahoe, Mississauga Transitway") }
C: ]];
A: It is sunny today in Tahoe, Mississauga Transitway and the temperature is 64.8 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: what is the capital of the united states
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="capital of the united states");
====
# recording/149a6480fd6f8f13e7c342488fe96297
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/993e2ad4e40e2ab22b14cd612c688019
U: play a podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play my favorite music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/12e4ddc0b5220f06a92464d93728d75d
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/2d38b4844808752efff5e8d5598f0ff4
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
====
# recording/4b5ff826c19f37417aa19ec2abe0dd05
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/8dd63be2cc4b78f90c25c81f9e67c071
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/5859ea7560933e850a9c8caf2257dd60
U: play podcast azaria
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "azaria" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played The Azarias Capital Podcast on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: stop podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() filter id =~ "azaria")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0pkZD7Nve0Q28ds5muZgzz"^^org.thingpedia.media-source:playable("The Azarias Capital Podcast"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:0F0bomQrdLbPjz4nxRVjiI"^^org.thingpedia.media-source:playable("Ultimate Mock Draft 2021 - Pro Basketball Draft Simulation"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[error="invalid id"];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/b8b36ae8868ba5807e79ff747cf43dc3
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: previous song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_previous();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the previous song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: weather today
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.7C, wind_speed=3.3mps, humidity=45.9, cloudiness=6.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It is sunny today in Palo Alto, California and the temperature is 74.7 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: weather tomorrow
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.forecast();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_previous()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.weather.current(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=23.7C, wind_speed=3.3mps, humidity=45.9, cloudiness=6.2, fog=0, status=enum sunny, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=1;content_type=image/png"^^tt:picture, location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
C: @org.thingpedia.weather.forecast(date=$end_of(day), location=new Location(37.4443293, -122.1598465, "Palo Alto, California"))
C: #[results=[
C:   { temperature=15.1C, wind_speed=1.4mps, humidity=86.9, cloudiness=31.2, fog=0, status=enum cloudy, icon="http://api.met.no/weatherapi/weathericon/1.1/?symbol=2;content_type=image/png"^^tt:picture, date=new Date("2021-08-06T14:00:00.000Z"), location=new Location(37.4443293, -122.1598465, "Palo Alto, California") }
C: ]];
A: It will be cloudy tomorrow at 7:00 AM in Palo Alto, California and the temperature will be 59.2 F.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_display_result;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/34ac7e5ae59f3cf992c7527849c79903
U: play some dead kennedys
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("dead kennedys")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:30U8fYtiNpeA5KH6H87QUV"^^org.thingpedia.media-source:artist("Dead Kennedys")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OuNnwnNQyWrF47pthWxNb"^^org.thingpedia.media-source:playable("Holiday in Cambodia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5szJ8SMwQVEvvdk65w6M6g"^^org.thingpedia.media-source:playable("California Uber Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6M4yg3BknyHmRnsvlkuHD5"^^org.thingpedia.media-source:playable("Police Truck"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0gJ4X2ojTykeaoDEDEE1Xj"^^org.thingpedia.media-source:playable("Too Drunk to Fuck"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2LF13LC1wG5XqZ2js2yC9O"^^org.thingpedia.media-source:playable("Nazi Punks Fuck Off"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1zLCRp9Co721leiKVD2dMY"^^org.thingpedia.media-source:playable("Soup is Good Food"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3PraFkxThh80PiD685IzWC"^^org.thingpedia.media-source:playable("Kill the Poor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6XDIdtt7sugfe7UHYIDWXW"^^org.thingpedia.media-source:playable("Moon Over Marin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4AjNTrJmgry75yiihCMOP8"^^org.thingpedia.media-source:playable("I Fought the Law"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=49];
A: I played music by Dead Kennedys on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/8aeb38c42f182385d4446b756c3ba791
U: play baba riley by the who
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("the who")) && id =~ "baba riley" => @org.thingpedia.media-player.play(playable=id);
====
# recording/bcb04dffae19c28141b3810d27d53938
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[]]
C: #[error=enum no_song_playing];
A: Sorry, there was an unexpected error with your command. Please try again later or report this issue to my developers.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0642bb49d172649be6d2d44124aaef0b
U: like this song on spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/647b00d84d5e47510e7bd6daf0046524
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/8b4e0e984ad058aebde555d1d268caba
U: play song thriller
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter id =~ "thriller" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).song() filter id =~ "thriller")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7azo4rpSUh8nXgtonC6Pkq"^^org.thingpedia.media-source:playable("Thriller"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Thriller on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/0d8dcf71ab48b069958ca30115e80aec
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/14b3840307339dfa2925dc4f2b88c4a5
U: play tony's playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playlist() filter id =~ "tony 's" => @org.thingpedia.media-player.play(playable=id);
====
# recording/cbabe7220874e057e203de8bfdc7d90e
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/51a6ab4c29b53852b64b59e5eec4fbac
U: play favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/a1630899011f061abe54cf7dd556d160
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/58e4df5becd973459db1aaa0158e17f3
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/e3a7a76acf15898e9bef32a5d2325a08
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/3a4ceecf47cb36dc6f995e2d6e400c45
U: play a podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean stop playing?
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play a podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get shows and then play the id on Spotify?
A: I played shows on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c35486e24085b68bb43c11df3ae2a84e
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/886c7b089f24f6c0f809f6db70c8a5cc
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/213c0cda6fc19685141f558eda6b63e9
U: play soundtrack gladiator
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "soundtrack gladiator" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "soundtrack gladiator")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:playable("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean Get music that has name soundtrack gladiator and then play the id on Spotify?
A: I played Now We Are Free - From "Gladiator" Soundtrack on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to playlist oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "soundtrack gladiator")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:playable("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="oval", song=id)
C: #[results=[
C:   { playlist="oval", song="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:song("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added a song to a playlist for you named oval named Now We Are Free - From "Gladiator" Soundtrack.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: stop music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "soundtrack gladiator")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:playable("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="oval", song=id)
C: #[results=[
C:   { playlist="oval", song="spotify:track:1raWfcURBd1Q3W3K0ojDCM"^^org.thingpedia.media-source:song("Now We Are Free - From \"Gladiator\" Soundtrack"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I paused playback.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/5d6c36f9ed5d7dda55d3ed6740574b41
U: Like currently playing song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/a338ebc83068b79481cf8209de4a747d
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/80f36f91fdfdb19354ce58cafd38d9cf
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to playlist gizmo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="gizmo", song=id);
====
# recording/2784ee32b4115fa5fd60df67fc221189
U: play podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).show() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:5ZKHbyeo97VivPN05bXt8r"^^org.thingpedia.media-source:playable("Good Times with Mo: The Podcast Year 10"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1TZWDLIrcaPgq7kQAyOqfQ"^^org.thingpedia.media-source:playable("Year End Reflection"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:3CpR3dGT55X7ZxUfJ0mS7S"^^org.thingpedia.media-source:playable("Come Follow Me 2021 - Doctrine and Covenants"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:1d2Arg2uau2W6JXcY4gNqR"^^org.thingpedia.media-source:playable("20 Years of 24"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:show:21JT1fT5BauYygwzWhXqzm"^^org.thingpedia.media-source:playable("Commencement: Speeches For The Class of 2021"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played shows on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/d8ae69289fc61962c4763a57dde8a487
U: play spotify liked songs
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/4080688aed7ccf1bb192adc2e2849f07
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/a076fcf3b5c19931e99dd3239ee4b202
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/80bc04a88f005844acfe9bf2df635f87
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/40d01ce36a0415ee2e5a5d1c6e9f478f
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4RVwu0g32PAqgUiJoXsdF8"^^org.thingpedia.media-source:playable("Happier Than Ever"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0RbW8kWozrVSIGb4V13o0o"^^org.thingpedia.media-source:playable("Hurricane"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added STAY (with Justin Bieber) to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/9517aaad7dedbeca9331d925e7fad957
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6xGEDLwoReTEuSETJj17zt"^^org.thingpedia.media-source:playable("Breathe"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/2e8ebf70ad42dd8b66a965df8db0eec9
U: play spanish english podcast
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.show() filter id =~ "spanish english" => @org.thingpedia.media-player.play(playable=id);
====
# recording/9af7699bc228f967f9fe91bdbb69e256
U: play spotify
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:7BFk1nSfwfkDOgnNNeY7Yn"^^org.thingpedia.media-source:playable("wish i dropped out like brakence interlude"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:0eRJI4VhEm6UqIdMbf4VyX"^^org.thingpedia.media-source:playable("Year 3000"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:1lrjBRhWKrd3YShBN4Un7c"^^org.thingpedia.media-source:playable("Bob Dylan"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to oval
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="oval", song=id);
====
# recording/22558917f992199c7ec4c009c78bdabe
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/c21f1f2d3c330286f90269e302120c3d
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
====
# recording/e0d329083ad82a93fbc8e51681c4d45e
U: play album Freedom of Choice by Devo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.album() filter contains(artists, null^^org.thingpedia.media-source:artist("devo")) && id =~ "freedom of choice" => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).album() filter contains(artists, "spotify:artist:0UKfenbZb15sqhfPC6zbt3"^^org.thingpedia.media-source:artist("DEVO")) && id =~ "freedom of choice")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:album:6UsP4NQ9K4L4Nqxj0Qis41"^^org.thingpedia.media-source:playable("Freedom Of Choice"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played Freedom Of Choice on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like the album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/e172491e7a7863ac381ceba55285aa04
U: Play come down to us by burial.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("burial")) && id =~ "come down to us" => @org.thingpedia.media-player.play(playable=id);
====
# recording/dc8d1c30b3af34e7d91872e7573b07dd
U: Play still alive.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "still alive" => @org.thingpedia.media-player.play(playable=id);
====
# recording/1e3b70ac03a39cf4992fa930cbe1d873
U: play some punk rock
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "punk rock") => @org.thingpedia.media-player.play(playable=id);
====
# recording/054e7d7e0f2814ad710eab41e41b0687
U: Play some pop rock.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains~(genres, "pop rock") => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "pop rock") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5zFglKYiknIxks8geR8rcL"^^org.thingpedia.media-source:playable("Beautiful Mistakes (feat. Megan Thee Stallion)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3JvrhDOgAt6p7K8mDyZwRd"^^org.thingpedia.media-source:playable("Riptide"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0GO8y8jQk1PkHzS31d699N"^^org.thingpedia.media-source:playable("Tongue Tied"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2UbVnbE5FH6008mAm6Mmgw"^^org.thingpedia.media-source:playable("Run"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2iUmqdfGZcHIhS3b9E9EWq"^^org.thingpedia.media-source:playable("Everybody Talks"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7w87IxuO7BDcJ3YUqCyMTT"^^org.thingpedia.media-source:playable("Pumped Up Kicks"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6FE2iI43OZnszFLuLtvvmg"^^org.thingpedia.media-source:playable("Classic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4HlFJV71xXKIGcU3kRyttv"^^org.thingpedia.media-source:playable("Hey, Soul Sister"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3d8y0t70g7hw2FOWl9Z4Fm"^^org.thingpedia.media-source:playable("Ophelia"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:53BHUFdQphHiZUUG3nx9zn"^^org.thingpedia.media-source:playable("Bang!"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=41];
A: I played pop rock music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Turn it off.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
====
# recording/b499d6f342dc7de4b4ed81ea252a1a52
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Did you mean get music by slayer and then play the id on Spotify?
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: Play some against me.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("against me")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/aff9194ed397b56a8aea1b66d87a4ef4
U: play some devo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("devo")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:0UKfenbZb15sqhfPC6zbt3"^^org.thingpedia.media-source:artist("DEVO")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4sscDOZCkbLSlDqcCgUJnX"^^org.thingpedia.media-source:playable("Whip It"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1RG1Pz45nlYNHka7JioyOT"^^org.thingpedia.media-source:playable("Uncontrollable Urge"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2vFaBeQqDVZW9SiJeiM4LU"^^org.thingpedia.media-source:playable("Gut Feeling / (Slap Your Mammy)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rNXiNb8IN78GL6cx9VsP7"^^org.thingpedia.media-source:playable("Girl U Want - 2009 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5FzBxhIsZBFXDTVGWtV4IQ"^^org.thingpedia.media-source:playable("(I Can't Get No) Satisfaction"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:03YadWiNth3S5n3gD1zQGB"^^org.thingpedia.media-source:playable("Step Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3bGG7jaMbcx8JDl3gLUvo7"^^org.thingpedia.media-source:playable("Mongoloid"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played music by DEVO on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/e4663f9dc90d0a77ef6c1f0986e2881e
U: shuffle my electric candy playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_shuffle(shuffle=enum on);
UT: @org.thingpedia.media-source.playlist() filter id =~ "electric candy" => @org.thingpedia.media-player.play(playable=id);
====
# recording/588bdf859a842c3dfcde893419d4df81
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/53581e4d339336ba24b103918cc857f0
U: Cancel.
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/ecc7b1d46313c83dbfd02d98184b083e
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/35aeecfc1d5c014a4d1cbfe2b59f32a4
U: Play some songs about cats.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.song() filter contains~(genres, "cats") => @org.thingpedia.media-player.play(playable=id);
====
# recording/e5eb78ea2f9e19a329d2d07dc292727e
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add this song to my library
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added Angel Of Death to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: Did you mean get my favorites and then play the id on Spotify?
A: I played your favorites on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some krs-one
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("krs-one")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2gINJ8xw86xawPyGvx1bla"^^org.thingpedia.media-source:artist("KRS-One")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5xXL4i9L2ZbKBtENNh8fWY"^^org.thingpedia.media-source:playable("Step into 1 World (Rapture's Delight)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0snDRsjNRMJhm7SVja8l6J"^^org.thingpedia.media-source:playable("MC's Act Like They Don't Know"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JPCZLbqNBonKhC53JPu4A"^^org.thingpedia.media-source:playable("1 Friend"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjRkRZ9N9blrca0f0UzeF"^^org.thingpedia.media-source:playable("Outta Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0dupEkAq7v5mTay6lJBvRx"^^org.thingpedia.media-source:playable("I Can't Wake Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7q0xO3uiDpfqyyWXNMWspM"^^org.thingpedia.media-source:playable("Hush"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7sBxvRUzQmF7uB2ZFfjzF3"^^org.thingpedia.media-source:playable("Mortal Thought"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BB2d2NGwpSCyrcdcBCpH7"^^org.thingpedia.media-source:playable("The MC"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0i5BepbSYym7AAIqyOhIxL"^^org.thingpedia.media-source:playable("Black Cop"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
A: Did you mean get music by krs-one and then play the id on Spotify?
A: I played music by KRS-One on Spotify for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2gINJ8xw86xawPyGvx1bla"^^org.thingpedia.media-source:artist("KRS-One")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5xXL4i9L2ZbKBtENNh8fWY"^^org.thingpedia.media-source:playable("Step into 1 World (Rapture's Delight)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0snDRsjNRMJhm7SVja8l6J"^^org.thingpedia.media-source:playable("MC's Act Like They Don't Know"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JPCZLbqNBonKhC53JPu4A"^^org.thingpedia.media-source:playable("1 Friend"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjRkRZ9N9blrca0f0UzeF"^^org.thingpedia.media-source:playable("Outta Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0dupEkAq7v5mTay6lJBvRx"^^org.thingpedia.media-source:playable("I Can't Wake Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7q0xO3uiDpfqyyWXNMWspM"^^org.thingpedia.media-source:playable("Hush"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7sBxvRUzQmF7uB2ZFfjzF3"^^org.thingpedia.media-source:playable("Mortal Thought"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BB2d2NGwpSCyrcdcBCpH7"^^org.thingpedia.media-source:playable("The MC"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0i5BepbSYym7AAIqyOhIxL"^^org.thingpedia.media-source:playable("Black Cop"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5WhHdNu7A0fm30e9VmaA8U"^^org.thingpedia.media-source:playable("California Über Alles"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6yIaRcvzhIrukxS4VVhil0"^^org.thingpedia.media-source:playable("Minor Threat"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5OU9pkK0wkHJMCOBVYafye"^^org.thingpedia.media-source:playable("My Favorite Accident"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5i7fZq3chLyCHo3VeB6goD"^^org.thingpedia.media-source:playable("1 of the Year (Equinox)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3idga60u7YBoOxfaiEu9Nh"^^org.thingpedia.media-source:playable("Jessie & My Whetstone"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3b9xTm2eiaCRTGqUEWuzxc"^^org.thingpedia.media-source:playable("I'm Glad Trouble Don't Last Always"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5cxnSTLzGD1t9xcdmJYFVB"^^org.thingpedia.media-source:playable("No Children"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6JXGqMLXr0WhiJ6rtI8S4W"^^org.thingpedia.media-source:playable("Hammerhead"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:2gINJ8xw86xawPyGvx1bla"^^org.thingpedia.media-source:artist("KRS-One")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5xXL4i9L2ZbKBtENNh8fWY"^^org.thingpedia.media-source:playable("Step into 1 World (Rapture's Delight)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0snDRsjNRMJhm7SVja8l6J"^^org.thingpedia.media-source:playable("MC's Act Like They Don't Know"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5JPCZLbqNBonKhC53JPu4A"^^org.thingpedia.media-source:playable("1 Friend"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1yjRkRZ9N9blrca0f0UzeF"^^org.thingpedia.media-source:playable("Outta Here"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0dupEkAq7v5mTay6lJBvRx"^^org.thingpedia.media-source:playable("I Can't Wake Up"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7q0xO3uiDpfqyyWXNMWspM"^^org.thingpedia.media-source:playable("Hush"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7sBxvRUzQmF7uB2ZFfjzF3"^^org.thingpedia.media-source:playable("Mortal Thought"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3BB2d2NGwpSCyrcdcBCpH7"^^org.thingpedia.media-source:playable("The MC"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0i5BepbSYym7AAIqyOhIxL"^^org.thingpedia.media-source:playable("Black Cop"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=47];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=id)
C: #[results=[
C:   { playable="spotify:track:3Y6XWs8xMlCngyIxNOFnsp"^^org.thingpedia.media-source:playable("Sound of da Police"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added Sound of da Police to your favorite.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_item_to_library(playable=album);
====
# recording/9d69a379259aa387ee2e97d1757ea87b
U: Set location to Palo Alto, CA.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location("palo alto , ca"));
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.set_location(location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current)
C: #[results=[
C:   { location=new Location(37.4443293, -122.1598465, "Palo Alto, California"), type=enum current }
C: ]];
A: I set your current location for you to Palo Alto, California.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: What's the weather?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.weather.current();
====
# recording/b75b5eb1666f48ab61846e11505a5989
U: how you been?
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
A: Great. Thanks for asking. How can I help you?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Play some Slayer.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
A: Sorry, you must open the Spotify app first.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_error;
U: OK, so play some Slayer.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum about_almond_how_are_you)
C: #[results=[
C:   { reply="Great. Thanks for asking. How can I help you?", question=enum about_almond_how_are_you }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[]]
C: #[error=enum no_active_device];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: Did you mean get music by slayer and then play the id on Spotify?
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: Next song.
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
====
# recording/0ed3b37fab0b60bbc830ed59245b376e
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this album
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=album);
====
# recording/0f6d5e44e01db57eee9492217d5ded98
U: create a playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify.create_playlist();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
A: What do you want to name your playlist?
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_slot_fill(name);
AT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist();
U: black squirrel
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I created a new playlist for you named black squirrel.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some atmosphere
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("atmosphere")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
A: Did you mean get music by atmosphere and then play the id on Spotify?
A: I played music by Atmosphere on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: next
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).create_playlist(name="black squirrel")
C: #[results=[
C:   { name="black squirrel", __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1GAS0rb4L8VTPvizAx2O9J"^^org.thingpedia.media-source:artist("Atmosphere")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7wdx4RyIAgjRNoJLhjsnh4"^^org.thingpedia.media-source:playable("Sunshine"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:74HckRky7JmEeWqeOW7ucq"^^org.thingpedia.media-source:playable("Yesterday"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:48vRKDOBxyVChwHAjU0SOf"^^org.thingpedia.media-source:playable("The Best Day"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:76xfSfbw0byLqMHykJyPru"^^org.thingpedia.media-source:playable("GodLovesUgly - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6V7c3Y5Nio1rp87a52mgtN"^^org.thingpedia.media-source:playable("God's Bathroom Floor"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7jIkKFVb0xI2APdtOwE33l"^^org.thingpedia.media-source:playable("Trying To Find 1 Balance"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5aaKBosgMkbgcsWxN8jWYG"^^org.thingpedia.media-source:playable("Strung (feat. Musab)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2dYmlijyh60yiIuGvoOJGf"^^org.thingpedia.media-source:playable("Clocked"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:21xyw6hdV7aMWLSkfStjNN"^^org.thingpedia.media-source:playable("Woes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0rnGWfmLo549sjL9eiTKfp"^^org.thingpedia.media-source:playable("Sleepless (feat. Nino Bless)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=38];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_next()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I played the next song for you.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add to my black squirrel playlist
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="black squirrel", song=id);
====
# recording/87e7d01042761e0d8ce15f1b2d9a8c6f
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/563fe38f15a3e8876e3e0394bb923727
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/61bda0cc476def89d7b74e6170fd37cb
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some slayer
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("slayer")) => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, "spotify:artist:1IQ2e1buppatiN1bxUVkrk"^^org.thingpedia.media-source:artist("Slayer")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:01Mpj13vURSO3cCLprPt5T"^^org.thingpedia.media-source:playable("Raining Blood"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:61dTqhd46yMkSWmC5LAh5F"^^org.thingpedia.media-source:playable("Angel Of Death"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1f2nJKg780VxYIveVq6Xej"^^org.thingpedia.media-source:playable("South Of Heaven"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6W2KBpMMXW17r7dPyqi8Iu"^^org.thingpedia.media-source:playable("Repentless"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3Ky8IzV8IVSwijtaTWB2SK"^^org.thingpedia.media-source:playable("Seasons In The Abyss"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0esBc6VgM4lFk3SOlL3Ys4"^^org.thingpedia.media-source:playable("Disciple"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2RJba1by26f8314u8IgMta"^^org.thingpedia.media-source:playable("Bloodline"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2L2XquxTZBmzzNBCPCzq0p"^^org.thingpedia.media-source:playable("Dead Skin Mask"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4cJhBmeJ7KiBeuy7oxRnZ3"^^org.thingpedia.media-source:playable("Black Magic"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7fSOpoZTwCmS8FON3g5M4O"^^org.thingpedia.media-source:playable("War Ensemble"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=46];
A: Did you mean get music by slayer and then play the id on Spotify?
A: I played music by Slayer on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/69b533faf55f166fc68aa1787059f005
U: pause music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play holiday in cambodia
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() filter id =~ "holiday in cambodia" => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: (@org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter id =~ "holiday in cambodia")[1] => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2OuNnwnNQyWrF47pthWxNb"^^org.thingpedia.media-source:playable("Holiday in Cambodia"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean get music that has name holiday in cambodia and then play the id on Spotify?
A: I played Holiday in Cambodia on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/d4d87574e1fe8e08cc180ccfd25ae5c3
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
====
# recording/bf8d20f1d33792f7f91b473ed3fc23c8
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:15mZo1Kah03g8CTLbSsWrr"^^org.thingpedia.media-source:playable("The Whole of the Moon - 2004 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2mv6GY70UsHiTCGQZ4JfgC"^^org.thingpedia.media-source:playable("Fools Gold - Remastered"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7CZiDzGVjUssMSOXrDNYHL"^^org.thingpedia.media-source:playable("Ticket To Ride - Remastered 2009"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0n9WsxAyHGJ884COiouw1G"^^org.thingpedia.media-source:playable("Vervet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3kR5YXGreVtFOoPDOBKken"^^org.thingpedia.media-source:playable("Delusional Waste"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Tp6nX0n9aDCYmtTYqRamf"^^org.thingpedia.media-source:playable("Telling You - Elo Rub Mix, Feat. Tim Holmes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:25PA58rQD2zi7TxybWV1AD"^^org.thingpedia.media-source:playable("Telling You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2NjNkyvUvlKWXXqAwC0WPj"^^org.thingpedia.media-source:playable("Under My Skin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3c4bJL7mARZvd387847GsC"^^org.thingpedia.media-source:playable("Precious"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
A: I played your favorites on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: pause
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-player.player_pause();
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:15mZo1Kah03g8CTLbSsWrr"^^org.thingpedia.media-source:playable("The Whole of the Moon - 2004 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2mv6GY70UsHiTCGQZ4JfgC"^^org.thingpedia.media-source:playable("Fools Gold - Remastered"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7CZiDzGVjUssMSOXrDNYHL"^^org.thingpedia.media-source:playable("Ticket To Ride - Remastered 2009"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0n9WsxAyHGJ884COiouw1G"^^org.thingpedia.media-source:playable("Vervet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3kR5YXGreVtFOoPDOBKken"^^org.thingpedia.media-source:playable("Delusional Waste"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Tp6nX0n9aDCYmtTYqRamf"^^org.thingpedia.media-source:playable("Telling You - Elo Rub Mix, Feat. Tim Holmes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:25PA58rQD2zi7TxybWV1AD"^^org.thingpedia.media-source:playable("Telling You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2NjNkyvUvlKWXXqAwC0WPj"^^org.thingpedia.media-source:playable("Under My Skin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3c4bJL7mARZvd387847GsC"^^org.thingpedia.media-source:playable("Precious"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: Did you mean stop playing?
A: I stopped playing.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play some reggae
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_song_from_library() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:15mZo1Kah03g8CTLbSsWrr"^^org.thingpedia.media-source:playable("The Whole of the Moon - 2004 Remaster"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2mv6GY70UsHiTCGQZ4JfgC"^^org.thingpedia.media-source:playable("Fools Gold - Remastered"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:7CZiDzGVjUssMSOXrDNYHL"^^org.thingpedia.media-source:playable("Ticket To Ride - Remastered 2009"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0n9WsxAyHGJ884COiouw1G"^^org.thingpedia.media-source:playable("Vervet"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3kR5YXGreVtFOoPDOBKken"^^org.thingpedia.media-source:playable("Delusional Waste"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4Tp6nX0n9aDCYmtTYqRamf"^^org.thingpedia.media-source:playable("Telling You - Elo Rub Mix, Feat. Tim Holmes"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:25PA58rQD2zi7TxybWV1AD"^^org.thingpedia.media-source:playable("Telling You"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2NjNkyvUvlKWXXqAwC0WPj"^^org.thingpedia.media-source:playable("Under My Skin"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:3c4bJL7mARZvd387847GsC"^^org.thingpedia.media-source:playable("Precious"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=20];
C: @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).player_pause()
C: #[results=[
C:   { __device="XXXXXXXX"^^tt:device_id }
C: ]];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains~(genres, "reggae") => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5fwSHlTEWpluwOM0Sxnh5k"^^org.thingpedia.media-source:playable("Pepas"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2JPLbjOn0wPCngEot2STUS"^^org.thingpedia.media-source:playable("Yonaguni"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:05bfbizlM5AX6Mf1RRyMho"^^org.thingpedia.media-source:playable("AM Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:6hf0RpxTbOprT5nnwzkk8e"^^org.thingpedia.media-source:playable("Qué Más Pues?"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0G2zPzWqVjR68iNPmx2TBe"^^org.thingpedia.media-source:playable("Volando - Remix"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:63aj87TQG6F3RVO5nbG2VQ"^^org.thingpedia.media-source:playable("In Da Getto"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0fea68AdmYNygeTGI4RC18"^^org.thingpedia.media-source:playable("LA CANCIÓN"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:47EiUVwUp4C9fGccaPuUCS"^^org.thingpedia.media-source:playable("DÁKITI"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2XIc1pqjXV3Cr2BQUGNBck"^^org.thingpedia.media-source:playable("LA NOCHE DE ANOCHE"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:1UdoSq3BY0EMa1kUIN2ZXS"^^org.thingpedia.media-source:playable("Ambiente"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=48];
A: Did you mean get reggae music and then play them on Spotify?
A: I played reggae music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: play me some of that there cure music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() filter contains(artists, null^^org.thingpedia.media-source:artist("cure")) => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id);
====
# recording/95d3f80c8357e25a9e6d027ffa69d5b3
U: play music
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.playable() => @org.thingpedia.media-player.play(playable=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
A: I played music on Spotify.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: add song to gizmo
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_song_to_playlist(playlist="gizmo", song=id);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:2Ls1I4GixLh0RFE6HTcirT"^^org.thingpedia.media-source:playable("If You're Over Me"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify(id="com.spotify-XXXXXXXX"^^tt:device_id).add_song_to_playlist(playlist="gizmo", song=id)
C: #[results=[
C:   { playlist="gizmo", song="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:song("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id }
C: ]];
A: I added a song to a playlist for you named gizmo with song name STAY (with Justin Bieber).
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: like song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/d016e147fa16592aa7b574eba8849ef2
U: play my favorites
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_song_from_library() => @org.thingpedia.media-player.play(playable=id);
====
# recording/e993de692ea6dd92b276792d0948ea81
U: like this song
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.media-source.get_currently_playing() => @com.spotify.add_item_to_library(playable=id);
====
# recording/04063ee6ebebb7710ae100e548d16496
U: search the web for black squirrels
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.bing.web_search(query="black squirrels");
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @com.bing.web_search(query="black squirrels")
C: #[results=[
C:   { query="black squirrels", title="Black squirrel - Wikipedia", description="Black squirrels are a melanistic subgroup of squirrels with black coloration on their fur. The phenomenon occurs with several species of squirrels, although it is most frequent with the eastern gray squirrel (Sciurus carolinensis) and the fox squirrel (Sciurus niger).Black morphs of the eastern gray and fox squirrels are the result of an abnormal pigment gene.", link="https://en.wikipedia.org/wiki/Black_squirrel"^^tt:url },
C:   { query="black squirrels", title="Black Squirrels: Are They More Aggressive?", description="What Is A Black Squirrel? Black squirrels are genetic variants that are found for both Grey and Fox squirrels. The melanistic genetic mutation has been studied extensively in the Grey squirrel. A study published in 2019 suggests that the mutation may have originated in Fox squirrels and was passed to Grey squirrels through interspecies breeding.", link="https://www.squirrelsatthefeeder.com/black-squirrels/"^^tt:url },
C:   { query="black squirrels", title="Cute and Cool Facts About the Relatively Rare Black Squirrels", description="Black panthers are a well-known example of adaptive melanism. This is the same condition that affects black squirrels. Black squirrels have some advantages over their lighter-colored counterparts. For example, they are better camouflaged in the dense, dark forests of the eastern United States.", link="https://animalsake.com/facts-about-black-squirrels"^^tt:url },
C:   { query="black squirrels", title="Black Squirrels | Where Do Black Squirrels Come From?", description="Little known fact: The black squirrel is considered the unofficial mascot of Kent State University. It was in 1961 when several of them were trapped in Canada and released by a number of students at Kent State University. There is a story behind this chronicled by Kent State “The Black Squirrel Festival is only the beginning of black squirrel pride in Kent.", link="https://www.removesquirrels.com/black-squirrels/"^^tt:url },
C:   { query="black squirrels", title="Black Squirrel - Profile | Distribution | Habitat | Facts ...", description="Black squirrels can be 400 to 700 grams (14 – 25 oz.), of body weight. During winter, the black squirrel loses 10% of their body weight. The black squirrel has a significantly higher cooling tolerance than the gray squirrel. Black squirrels enjoy the advantage of a better view when viewed from the top in this darkly lit habitat.", link="https://www.mammalage.com/black-squirrel/"^^tt:url }
C: ]];
A: I found Black squirrel - Wikipedia.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_recommend_one;
U: what's a good restaurant in los altos
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @com.yelp.restaurant() filter geo == new Location("los altos");
====
# recording/0ab59f9aab350f7d07310118457df2a7
U: cancel
UT: $dialogue @org.thingpedia.dialogue.transaction.cancel;
====
# recording/021a5eb6b717ca8200ad59917364ae3c
U: test
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help);
C: $dialogue @org.thingpedia.dialogue.transaction.execute;
C: @org.thingpedia.media-source(id="com.spotify-XXXXXXXX"^^tt:device_id).playable() => @org.thingpedia.media-player(id="com.spotify-XXXXXXXX"^^tt:device_id).play(playable=id)
C: #[results=[
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5HCyWlXZPP0y6Gqq8TgA20"^^org.thingpedia.media-source:playable("STAY (with Justin Bieber)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0UsmyJDsst2xhX1ZiFF3JW"^^org.thingpedia.media-source:playable("Year,2015"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:4ZtFanR9U6ndgddUvNcjcG"^^org.thingpedia.media-source:playable("good 4 u"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:0u7vHkZJtxjSP65kf0yZOA"^^org.thingpedia.media-source:playable("Rubish"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:27NovPIUIRrOZoCHxABJwK"^^org.thingpedia.media-source:playable("INDUSTRY BABY (feat. Jack Harlow)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5rJw9VsPNdfnV9Ar97xZG2"^^org.thingpedia.media-source:playable("K-LOVE Fan Awards: Songs of the Year (2015 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:67BtfxlNbhBmCDR2L2l8qd"^^org.thingpedia.media-source:playable("MONTERO (Call Me By Your Name)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:5BJs3aDrKYBRkzrhaVxf89"^^org.thingpedia.media-source:playable("After Me - 2021 Version"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:748mdHapucXQri7IAO8yFK"^^org.thingpedia.media-source:playable("Kiss Me More (feat. SZA)"), __device="XXXXXXXX"^^tt:device_id },
C:   { device="XXXXXXXX"^^org.thingpedia.media-player:device, playable="spotify:track:00ohIpPn9LkKpeIqhfIU9V"^^org.thingpedia.media-source:playable("K-Love Fan Awards: Songs of the Year (2014 Mash-Up)"), __device="XXXXXXXX"^^tt:device_id }
C: ]]
C: #[count=50];
C: @org.thingpedia.builtin.thingengine.builtin.faq_reply(question=enum general_help)
C: #[results=[
C:   { reply="I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.", question=enum general_help }
C: ]];
A: I'm a new virtual assistant. At the moment, I can help you with music, jokes, and managing some IoT devices.
AT: $dialogue @org.thingpedia.dialogue.transaction.sys_action_success;
U: tell me a joke in 10 seconds
UT: $dialogue @org.thingpedia.dialogue.transaction.execute;
UT: ontimer(date=[$now + 10s]) => @com.icanhazdadjoke.get();
